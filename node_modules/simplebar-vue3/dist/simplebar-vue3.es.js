import { inject, provide, defineComponent, ref, toRefs, onMounted, onActivated, onDeactivated, openBlock, createBlock, resolveDynamicComponent, withCtx, renderSlot, reactive } from "vue";
import SimpleBar from "simplebar";
function removeUndefinedsFromObject(object) {
  return Object.keys(object).reduce((acc, key) => {
    const targetValue = object[key];
    return targetValue ? { ...acc, [key]: targetValue } : acc;
  }, {});
}
const injectionKey = Symbol("simplebar");
function provideSimplebar(param) {
  provide(injectionKey, param);
}
function useSimplebar() {
  return inject(injectionKey);
}
const _sfc_main = /* @__PURE__ */ defineComponent({
  props: {
    tag: { type: String, required: false, default: "div" },
    autoHide: { type: null, required: false },
    classNames: { type: null, required: false },
    clickOnTrack: { type: null, required: false },
    direction: { type: null, required: false },
    forceVisible: { type: null, required: false },
    scrollbarMaxSize: { type: null, required: false },
    scrollbarMinSize: { type: null, required: false },
    timeout: { type: null, required: false }
  },
  emits: ["created", "scroll", "wheel"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const simplebarInstance = ref(null);
    const element = ref(null);
    const { tag: tagRef, ...options } = toRefs(props);
    expose(simplebarInstance);
    provideSimplebar(simplebarInstance);
    function simplebarHookHandler(hook) {
      if (!element.value)
        return;
      if (hook === "activated" && simplebarInstance.value) {
        return;
      }
      const simpleBarOptions = { ...reactive(options) };
      const simplebarFilteredOptions = removeUndefinedsFromObject(simpleBarOptions);
      const simplebar = new SimpleBar(element.value, Object.keys(simplebarFilteredOptions).length > 0 ? simplebarFilteredOptions : void 0);
      simplebarInstance.value = simplebar;
      const scrollElement = simplebar.getScrollElement();
      scrollElement.addEventListener("scroll", (e) => {
        emit("scroll", e);
      });
      scrollElement.addEventListener("wheel", (e) => {
        emit("wheel", e);
      });
      emit("created", simplebar);
    }
    onMounted(() => simplebarHookHandler("mounted"));
    onActivated(() => simplebarHookHandler("activated"));
    onDeactivated(() => {
      simplebarInstance.value = null;
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(__props.tag), {
        ref: (_value, _refs) => {
          _refs["element"] = _value;
          element.value = _value;
        }
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 512);
    };
  }
});
export { _sfc_main as SimpleBar, useSimplebar };
