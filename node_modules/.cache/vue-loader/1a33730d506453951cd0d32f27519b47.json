{"remainingRequest":"C:\\wamp64\\www\\crm\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\wamp64\\www\\crm\\frontend\\src\\components\\appoinmentCalendar.vue?vue&type=style&index=0&id=11378642&lang=css","dependencies":[{"path":"C:\\wamp64\\www\\crm\\frontend\\src\\components\\appoinmentCalendar.vue","mtime":1689110555999},{"path":"C:\\wamp64\\www\\crm\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1668443312723},{"path":"C:\\wamp64\\www\\crm\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1668443313146},{"path":"C:\\wamp64\\www\\crm\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1668443312991},{"path":"C:\\wamp64\\www\\crm\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668443304858},{"path":"C:\\wamp64\\www\\crm\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1668443313146}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudGV4dC1ibGFja3sNCiAgY29sb3I6IGJsYWNrOw0KfQ0K"},{"version":3,"sources":["C:\\wamp64\\www\\crm\\frontend\\src\\components\\appoinmentCalendar.vue"],"names":[],"mappings":";AAivBA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd","file":"C:/wamp64/www/crm/frontend/src/components/appoinmentCalendar.vue","sourceRoot":"","sourcesContent":["<script>\r\nimport Swal from \"sweetalert2\";\r\nimport \"@fullcalendar/core/vdom\";\r\nimport { SimpleBar } from \"simplebar-vue3\";\r\nimport { CalendarIcon } from \"@zhuowenli/vue-feather-icons\";\r\n\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\n\r\nimport FullCalendar from \"@fullcalendar/vue3\";\r\nimport flatPickr from \"vue-flatpickr-component\";\r\nimport \"flatpickr/dist/flatpickr.css\";\r\n\r\nimport { required, helpers } from \"@vuelidate/validators\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\n\r\n// import { INITIAL_EVENTS } from \"./calendar\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment/moment\";\r\n// import moment from \"moment\";\r\n\r\nexport default {\r\n  setup() {\r\n    return { v$: useVuelidate() };\r\n  },\r\n  validations: {\r\n    event: {\r\n      title: {\r\n        required: helpers.withMessage(\"Title is required\", required),\r\n      },\r\n      category: {\r\n        required: helpers.withMessage(\"Category is required\", required),\r\n      },\r\n    },\r\n  },\r\n  page: {\r\n    title: \"Calendar\",\r\n  },\r\n  data() {\r\n    return {\r\n      title: \"Calendar\",\r\n      items: [\r\n        {\r\n          text: \"Apps\",\r\n          href: \"/\",\r\n        },\r\n        {\r\n          text: \"Calendar\",\r\n          active: true,\r\n        },\r\n      ],\r\n      categories: [\r\n        {\r\n          name: 'Danger',\r\n          value: 'bg-danger'\r\n        },\r\n        {\r\n          name: 'Success',\r\n          value: 'bg-success'\r\n        },\r\n        {\r\n          name: 'Primary',\r\n          value: 'bg-primary'\r\n        },\r\n        {\r\n          name: 'Info',\r\n          value: 'bg-info'\r\n        },\r\n        {\r\n          name: 'Dark',\r\n          value: 'bg-dark'\r\n        },\r\n        {\r\n          name: 'Warning',\r\n          value: 'bg-warning'\r\n        },\r\n      ],\r\n      currentEvents: [],\r\n      showModal: false,\r\n      eventModal: false,\r\n      submitted: false,\r\n      submit: false,\r\n      newEventData: {},\r\n      edit: {},\r\n      deleteId: {},\r\n      errors: [],\r\n      event: {\r\n        id: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        category: \"\",\r\n        start: null,\r\n        end: null,\r\n        location: \"\",\r\n      },\r\n      editevent: {\r\n        editID: 0,\r\n        editTitle: \"\",\r\n        editcategory: \"\",\r\n        editDescription: \"\",\r\n        editStart: \"\",\r\n        editEnd: \"\",\r\n        editLocation: \"\",\r\n      },\r\n      description: \"\",\r\n      dateTimeConfig: {\r\n        enableTime: true,\r\n        dateFormat: \"F j, Y H:i K\"\r\n      },\r\n      toDate:  null,\r\n      fromDate: null,\r\n      calendarOptions: {\r\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        droppable: true,\r\n        navLinks: true,\r\n        plugins: [\r\n          dayGridPlugin,\r\n          timeGridPlugin,\r\n          // interactionPlugin,\r\n          bootstrapPlugin,\r\n          listPlugin,\r\n        ],\r\n        themeSystem: \"bootstrap\",\r\n        headerToolbar: {\r\n          left: \"prev,next today\",\r\n          center: \"title\",\r\n          right: \"dayGridMonth,timeGridWeek,timeGridDay,listMonth\",\r\n        },\r\n        windowResize: () => {\r\n          this.getInitialView();\r\n        },\r\n        initialView: this.getInitialView(),\r\n        editable: true,\r\n        selectable: true,\r\n        selectMirror: true,\r\n        dayMaxEvents: true,\r\n        weekends: true,\r\n        dateClick: this.dateClicked,\r\n        eventClick: this.editEvent,\r\n        eventsSet: this.handleEvents,\r\n        eventDrop: async function (event) {\r\n          this.submit = true;\r\n          const editTitle = event.event.title;\r\n          const editcategory = event.event.classNames[0];\r\n          // console.log(editcategory)\r\n\r\n          this.edit = event.event;\r\n          this.edit.setProp(\"title\", editTitle);\r\n          this.edit.setProp(\"classNames\", editcategory);\r\n\r\n          var date = new Date();\r\n          var d = date.getDate();\r\n          var m = date.getMonth();\r\n          var y = date.getFullYear();\r\n          new Date(y, m, d + 24, 16, 0)\r\n\r\n          const data = {\r\n            token: localStorage.getItem('jwt'),\r\n            userEmail: localStorage.getItem('email'),\r\n            event: {\r\n              editID: event.event.id,\r\n              editTitle: editTitle,\r\n              editcategory: event.event.classNames[0],\r\n              editDescription: event.event.extendedProps.description,\r\n              editStart: moment(event.event.startStr).format('MMMM D, YYYY h:mm A'),\r\n              editEnd: moment(event.event.endStr).format('MMMM D, YYYY h:mm A'),\r\n              editLocation: event.event.extendedProps.location,\r\n            },\r\n            edit: this.edit,\r\n            test: new Date(y, m, d + 24, 16, 0),\r\n            userID: localStorage.getItem('id')\r\n          }\r\n\r\n          // console.log(data)\r\n\r\n          await axios\r\n              .post('/api/updateEvent', data)\r\n              .then(response => {\r\n\r\n                if (response === 'True') {\r\n                  Swal.fire({\r\n                    position: \"top-end\",\r\n                    icon: \"success\",\r\n                    title: \"Event updated!\",\r\n                    showConfirmButton: false,\r\n                    timer: 2000,\r\n                  });\r\n                  this.updateCalendarEvents()\r\n                }\r\n              })\r\n              .catch(error => {\r\n                if (error.response) {\r\n\r\n                  if (error.response.data.detail === 'Your session is expired!') {\r\n                    this.$router.push('logout')\r\n                  }\r\n\r\n                  Swal.fire(\"Oops!\", \"Calendar Events couldn't be updated, please contact your SysAdmin.\", \"error\")\r\n                }\r\n              })\r\n          await Swal.fire({\r\n            position: \"center\",\r\n            icon: \"success\",\r\n            title: \"Event has been updated!\",\r\n            showConfirmButton: false,\r\n            timer: 1000,\r\n          });\r\n          this.eventModal = false;\r\n        },\r\n        eventResize: async function (event) {\r\n          // console.log(event)\r\n          this.submit = true;\r\n          const editTitle = event.event.title;\r\n          const editcategory = event.event.classNames[0];\r\n\r\n          this.edit = event.event;\r\n          this.edit.setProp(\"title\", editTitle);\r\n          this.edit.setProp(\"classNames\", editcategory);\r\n\r\n          var date = new Date();\r\n          var d = date.getDate();\r\n          var m = date.getMonth();\r\n          var y = date.getFullYear();\r\n          new Date(y, m, d + 24, 16, 0)\r\n\r\n          const data = {\r\n            token: localStorage.getItem('jwt'),\r\n            userEmail: localStorage.getItem('email'),\r\n            event: {\r\n              editID: event.event.id,\r\n              editTitle: editTitle,\r\n              editcategory: event.event.classNames[0],\r\n              editDescription: event.event.extendedProps.description,\r\n              editStart: moment(event.event.startStr).format('MMMM D, YYYY h:mm A'),\r\n              editEnd: moment(event.event.endStr).format('MMMM D, YYYY h:mm A'),\r\n              editLocation: event.event.extendedProps.location\r\n            },\r\n            edit: this.edit,\r\n            test: new Date(y, m, d + 24, 16, 0),\r\n            userID: localStorage.getItem('id')\r\n          }\r\n\r\n          await axios\r\n              .post('/api/updateEvent', data)\r\n              .then(response => {\r\n\r\n                if (response === 'True') {\r\n                  Swal.fire({\r\n                    position: \"top-end\",\r\n                    icon: \"success\",\r\n                    title: \"Event updated!\",\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                  });\r\n                  this.updateCalendarEvents()\r\n                }\r\n              })\r\n              .catch(error => {\r\n                if (error.response) {\r\n\r\n                  if (error.response.data.detail === 'Your session is expired!') {\r\n                    this.$router.push('logout')\r\n                  }\r\n\r\n                  Swal.fire(\"Oops!\", \"Calendar Events couldn't be updated, please contact your SysAdmin.\", \"error\")\r\n                }\r\n              })\r\n          await Swal.fire({\r\n            position: \"center\",\r\n            icon: \"success\",\r\n            title: \"Event has been updated!\",\r\n            showConfirmButton: false,\r\n            timer: 1000,\r\n          });\r\n          this.eventModal = false;\r\n        },\r\n        drop: function(e){\r\n\r\n          let start = moment(e.date).add(1, 'days').format('MMMM D, YYYY h:mm A');\r\n          let end = moment(start).add(1, 'hours').format('MMMM D, YYYY h:mm A');\r\n          let event = JSON.parse(localStorage.getItem('creatingEvent'))\r\n\r\n          const editTitle = event.title;\r\n          const editcategory = event.category;\r\n\r\n          this.edit = event;\r\n          this.edit[\"title\"] = editTitle;\r\n          this.edit[\"classNames\"] = editcategory;\r\n\r\n          var date = new Date();\r\n          var d = date.getDate();\r\n          var m = date.getMonth();\r\n          var y = date.getFullYear();\r\n          new Date(y, m, d + 24, 16, 0)\r\n\r\n          const data = {\r\n            token: localStorage.getItem('jwt'),\r\n            userEmail: localStorage.getItem('email'),\r\n            event: {\r\n              editID: event.id,\r\n              editTitle: editTitle,\r\n              editcategory: event.category,\r\n              editDescription: event.description,\r\n              editStart: start,\r\n              editEnd: end,\r\n              editLocation: event.location,\r\n            },\r\n            edit: this.edit,\r\n            test: new Date(y, m, d + 24, 16, 0),\r\n            userID: localStorage.getItem('id')\r\n          }\r\n\r\n          axios\r\n              .post('/api/updateEvent', data)\r\n              .then(response => {\r\n\r\n                if (response === 'True') {\r\n                  Swal.fire({\r\n                    position: \"top-end\",\r\n                    icon: \"success\",\r\n                    title: \"Event updated!\",\r\n                    showConfirmButton: false,\r\n                    timer: 2000,\r\n                  });\r\n                }\r\n              })\r\n              .catch(error => {\r\n                if (error.response) {\r\n\r\n                  if (error.response.data.detail === 'Your session is expired!') {\r\n                    this.$router.push('logout')\r\n                  }\r\n\r\n                  Swal.fire(\"Oops!\", \"Calendar Events couldn't be updated, please contact your SysAdmin.\", \"error\")\r\n                }\r\n              })\r\n          this.eventModal = false;\r\n\r\n        },\r\n      },\r\n    };\r\n  },\r\n  components: {\r\n    FullCalendar,\r\n    SimpleBar,\r\n    CalendarIcon,\r\n    flatPickr,\r\n  },\r\n  methods: {\r\n\r\n    async getData() {\r\n      const data = {\r\n        token: localStorage.getItem('jwt'),\r\n        userEmail: localStorage.getItem('email'),\r\n        userID: localStorage.getItem('id'),\r\n      }\r\n\r\n      await axios\r\n          .post('/api/getAgentAppointments', data)\r\n          .then(response => {\r\n            this.calendarOptions.events = response.data;\r\n            console.log(response.data)\r\n          })\r\n          .catch(error => {\r\n            if (error.response) {\r\n\r\n              if(error.response.data.detail === 'Your session is expired!'){\r\n                this.$router.push('logout')\r\n              }\r\n\r\n              Swal.fire(\"Oops!\", \"Calendar Events couldn't be loaded, please contact your SysAdmin.\", \"error\")\r\n            }\r\n          })\r\n    },\r\n    formatDate(date) {\r\n      var monthNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n      ];\r\n      var d = new Date(date),\r\n          month = \"\" + monthNames[d.getMonth()],\r\n          day = \"\" + d.getDate(),\r\n          year = d.getFullYear();\r\n      if (month.length < 2) month = \"0\" + month;\r\n      if (day.length < 2) day = \"0\" + day;\r\n      return [day + \" \" + month, year].join(\",\");\r\n    },\r\n    formatDate22: function (date, format) {\r\n      date = moment(date).format(format)\r\n      return date;\r\n    },\r\n    getInitialView() {\r\n      if (window.innerWidth >= 768 && window.innerWidth < 1200) {\r\n        return \"timeGridWeek\";\r\n      } else if (window.innerWidth <= 768) {\r\n        return \"listMonth\";\r\n      } else {\r\n        return \"dayGridMonth\";\r\n      }\r\n    },\r\n    /**\r\n     * Modal form submit\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    async handleSubmit(e) {\r\n      this.submitted = true;\r\n\r\n      // stop here if form is invalid\r\n      this.v$.$touch();\r\n      if (this.v$.$invalid) {\r\n        return;\r\n      } else {\r\n        const title = this.event.title;\r\n        const category = this.event.category;\r\n        let calendarApi = this.$refs.fullCalendar.getApi();\r\n\r\n        // console.log(calendarApi);\r\n\r\n        // const data = {\r\n        //   token: localStorage.getItem('jwt'),\r\n        //   userEmail: localStorage.getItem('email'),\r\n        //   userID: localStorage.getItem('id'),\r\n        //   event: {\r\n        //     title: eventEl.innerText,\r\n        //     start: new Date(),\r\n        //     className: eventEl.getAttribute(\"data-class\"),\r\n        //   }\r\n        // }\r\n        //\r\n        // await axios\r\n        //     .post('/api/createEvent', data)\r\n        //     .then(response => {\r\n        //       if (response){\r\n        //         Swal.fire({\r\n        //           position: \"top-end\",\r\n        //           icon: \"success\",\r\n        //           title: \"Event created!\",\r\n        //           showConfirmButton: false,\r\n        //           timer: 1000,\r\n        //         });\r\n        //         this.updateCalendarEvents()\r\n        //       }\r\n        //     })\r\n        //     .catch(error => {\r\n        //       if (error.response) {\r\n        //\r\n        //         if(error.response.data.detail === 'Your session is expired!'){\r\n        //           this.$router.push('logout')\r\n        //         }\r\n        //\r\n        //         Swal.fire(\"Oops!\", \"Calendar Events couldn't be saved, please contact your SysAdmin.\", \"error\")\r\n        //       }\r\n        //     })\r\n\r\n        // return {\r\n        //   title: eventEl.innerText,\r\n        //   start: new Date(),\r\n        //   className: eventEl.getAttribute(\"data-class\"),\r\n        // };\r\n\r\n        this.currentEvents = calendarApi.addEvent({\r\n          id: this.newEventData.length + 1,\r\n          title,\r\n          start: this.toDate,\r\n          end: this.fromDate,\r\n          classNames: [category],\r\n        });\r\n\r\n        this.successmsg();\r\n        this.showModal = false;\r\n        this.newEventData = {};\r\n      }\r\n      this.submitted = false;\r\n      this.event = {};\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    hideModal(e) {\r\n      this.submitted = false;\r\n      this.showModal = false;\r\n      this.event = {};\r\n    },\r\n    /**\r\n     * Edit event modal submit\r\n     */  // eslint-disable-next-line no-unused-vars\r\n    async editSubmit(e) {\r\n      this.submit = true;\r\n      const editTitle = this.editevent.editTitle;\r\n      const editcategory = this.editevent.editcategory;\r\n\r\n      this.edit.setProp(\"title\", editTitle);\r\n      this.edit.setProp(\"classNames\", editcategory);\r\n\r\n      var date = new Date();\r\n      var d = date.getDate();\r\n      var m = date.getMonth();\r\n      var y = date.getFullYear();\r\n      new Date(y, m, d + 24, 16, 0)\r\n\r\n      const data = {\r\n        token: localStorage.getItem('jwt'),\r\n        userEmail: localStorage.getItem('email'),\r\n        event: this.editevent,\r\n        edit: this.edit,\r\n        test: new Date(y, m, d + 24, 16, 0),\r\n        userID: localStorage.getItem('id')\r\n      }\r\n\r\n      await axios\r\n          .post('/api/updateEvent', data)\r\n          .then(response => {\r\n            this.updateCalendarEvents()\r\n            if(response === 'True'){\r\n              Swal.fire({\r\n                position: \"top-end\",\r\n                icon: \"success\",\r\n                title: \"Event updated!\",\r\n                showConfirmButton: false,\r\n                timer: 1000,\r\n              });\r\n            }\r\n          })\r\n          .catch(error => {\r\n            if (error.response) {\r\n\r\n              if(error.response.data.detail === 'Your session is expired!'){\r\n                this.$router.push('logout')\r\n              }\r\n\r\n              Swal.fire(\"Oops!\", \"Calendar Events couldn't be updated, please contact your SysAdmin.\", \"error\")\r\n            }\r\n          })\r\n      this.successmsg();\r\n      this.eventModal = false;\r\n    },\r\n    /**\r\n     * Delete event\r\n     */\r\n    deleteEvent() {\r\n      this.edit.remove();\r\n      this.eventModal = false;\r\n    },\r\n    /**\r\n     * Click any date to add event\r\n     * Modal open for add event\r\n     */\r\n    dateClicked(info) {\r\n      this.newEventData = info;\r\n      this.showModal = true;\r\n    },\r\n    /**\r\n     * Modal open for edit event\r\n     */\r\n    editEvent(info) {\r\n      this.edit = info.event;\r\n      this.editevent.editID = this.edit._def.publicId\r\n\r\n      const data = {\r\n        token: localStorage.getItem('jwt'),\r\n        userEmail: localStorage.getItem('email'),\r\n        eventID: this.editevent.editID,\r\n        userID: localStorage.getItem('id')\r\n      }\r\n\r\n      axios.post('/api/getEventByid', data)\r\n          .then(response => {\r\n            let data = response.data[0]\r\n            this.editevent.editTitle = data.title;\r\n            this.editevent.editDescription = data.description;\r\n            this.editevent.editLocation = data.location;\r\n            this.editevent.editcategory = data.className;\r\n            this.editevent.editStart = moment(data.start).format('MMMM D, YYYY h:mm A');\r\n            this.editevent.editEnd = moment(data.end).format('MMMM D, YYYY h:mm A');\r\n            // console.log(this.editevent.editStart.toLocaleString('en-US', {\r\n            //   timeZone: 'America/New_York',\r\n            // }))\r\n            // this.editevent.editStart = this.edit._instance.range.start;\r\n            // this.editevent.editEnd = this.edit._instance.range.end;\r\n            this.eventModal = true;\r\n          })\r\n          .catch(error => {\r\n            if (error.response) {\r\n\r\n              if (error.response.data.detail === 'Your session is expired!') {\r\n                this.$router.push('logout')\r\n              }\r\n\r\n              Swal.fire(\"Oops!\", \"Calendar Events couldn't be updated, please contact your SysAdmin.\", \"error\")\r\n            }\r\n          })\r\n    },\r\n    closeModal() {\r\n      this.eventModal = false;\r\n    },\r\n    confirm() {\r\n      Swal.fire({\r\n        title: \"Are you sure?\",\r\n        text: \"You won't be able to delete this!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#34c38f\",\r\n        cancelButtonColor: \"#f46a6a\",\r\n        confirmButtonText: \"Yes, delete it!\",\r\n      }).then((result) => {\r\n        if (result.value) {\r\n          this.deleteEvent();\r\n          Swal.fire(\"Deleted!\", \"Event has been deleted.\", \"success\");\r\n        }\r\n      });\r\n    },\r\n    async updateCalendarEvents(){\r\n      const data = {\r\n        token: localStorage.getItem('jwt'),\r\n        userEmail: localStorage.getItem('email'),\r\n        userID: localStorage.getItem('id'),\r\n      }\r\n\r\n      await axios\r\n          .post('/api/getAgentAppointments', data)\r\n          .then(response => {\r\n            this.calendarOptions.events = response.data;\r\n          })\r\n          .catch(error => {\r\n            if (error.response) {\r\n\r\n              if(error.response.data.detail === 'Your session is expired!'){\r\n                this.$router.push('logout')\r\n              }\r\n\r\n              Swal.fire(\"Oops!\", \"Calendar Events couldn't be loaded, please contact your SysAdmin.\", \"error\")\r\n            }\r\n          })\r\n    },\r\n    /**\r\n     * Show list of events\r\n     */\r\n    handleEvents(events) {\r\n      this.currentEvents = events;\r\n    },\r\n    /**\r\n     * Show successfull Save Dialog\r\n     */\r\n    successmsg() {\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"success\",\r\n        title: \"Event has been saved!\",\r\n        showConfirmButton: false,\r\n        timer: 1000,\r\n      });\r\n    },\r\n    sortEvents(events){\r\n      events.sort((a, b) => {\r\n        return new Date(a.start) - new Date(b.start); // descending\r\n      })\r\n    },\r\n\r\n    createEvent(){\r\n\r\n      this.errors = []\r\n\r\n      if (!this.event.title) {\r\n        this.errors.push('Event tittle is required.');\r\n      }\r\n\r\n      if (!this.event.description) {\r\n        this.errors.push('Event Description is required.');\r\n      }\r\n\r\n      if (!this.event.description) {\r\n        this.errors.push('Event Description is required.');\r\n      }\r\n\r\n      if (!document.getElementById('createCategory').value) {\r\n        this.errors.push('Event Category is required.');\r\n      }\r\n\r\n      this.event.category = document.getElementById('createCategory').value\r\n\r\n      const data = {\r\n        token: localStorage.getItem('jwt'),\r\n        userEmail: localStorage.getItem('email'),\r\n        userID: localStorage.getItem('id'),\r\n        event: {\r\n          title:  this.event.title,\r\n          start: this.event.start,\r\n          description: this.event.description,\r\n          end: this.event.end,\r\n          className: this.event.category,\r\n          createButton: 1\r\n        }\r\n      }\r\n\r\n      axios.post('/api/createEvent', data).then(response => {\r\n        if (response.status === 200){\r\n\r\n          Swal.fire({\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: \"Event created!\",\r\n            showConfirmButton: false,\r\n            timer: 1000,\r\n          });\r\n          location.reload();\r\n        }\r\n      }).catch(error => {\r\n        if (error.response) {\r\n          if(error.response.data.detail === 'Your session is expired!'){\r\n            this.$router.push('logout')\r\n          }\r\n          Swal.fire(\"Oops!\", \"Calendar Events couldn't be saved, please contact your SysAdmin.\", \"error\")\r\n        }\r\n      })\r\n    }\r\n  },\r\n  async mounted() {\r\n\r\n    const data = {\r\n      token: localStorage.getItem('jwt'),\r\n      userEmail: localStorage.getItem('email'),\r\n      userID: localStorage.getItem('id'),\r\n    }\r\n\r\n    await axios\r\n        .post('/api/getAgentAppointments', data)\r\n        .then(response => {\r\n          this.calendarOptions.events = response.data;\r\n        })\r\n        .catch(error => {\r\n          if (error.response) {\r\n\r\n            if(error.response.data.detail === 'Your session is expired!'){\r\n              this.$router.push('logout')\r\n            }\r\n            Swal.fire(\"Oops!\", \"Calendar Events couldn't be loaded, please contact your SysAdmin.\", \"error\")\r\n          }\r\n        })\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.text-black{\r\n  color: black;\r\n}\r\n</style>\r\n<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xl-3\">\r\n          <div>\r\n            <h5 class=\"mb-1\">{{ $t(\"t-upcoming-events\") }}</h5>\r\n            <p class=\"text-muted\">Don't miss scheduled events</p>\r\n            <SimpleBar\r\n                class=\"upcoming-events pe-2 me-n1 mb-3\"\r\n                data-simplebar=\"init\"\r\n                style=\"height: 600px\"\r\n            >\r\n              <div\r\n                  class=\"card mb-3\"\r\n                  v-for=\"event in currentEvents\"\r\n                  :key=\"event.id\"\r\n              >\r\n                <div class=\"card-body\">\r\n                  <div class=\"d-flex mb-3\">\r\n                    <div class=\"flex-grow-1\">\r\n                      <i\r\n                          :class=\"`mdi mdi-checkbox-blank-circle me-2 ${event.classNames[0]} `\"\r\n                      ></i\r\n                      ><span class=\"fw-medium\">{{\r\n                        this.formatDate(event.start)\r\n                      }}</span>\r\n                    </div>\r\n                    <div class=\"flex-shrink-0\">\r\n                      <small class=\"badge badge-soft-primary ms-auto\"></small>\r\n                    </div>\r\n                  </div>\r\n                  <h6 class=\"card-title fs-16\">{{ event.title }}</h6>\r\n                  <p class=\"text-muted text-truncate-two-lines mb-0\">\r\n                    {{ event.description }}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </SimpleBar>\r\n          </div>\r\n          <div class=\"card\">\r\n            <div class=\"card-body bg-soft-info\">\r\n              <div class=\"d-flex\">\r\n                <div class=\"flex-shrink-0\">\r\n                  <CalendarIcon\r\n                      class=\"text-info icon-dual-info\"\r\n                  ></CalendarIcon>\r\n                </div>\r\n                <div class=\"flex-grow-1 ms-3\">\r\n                  <h6 class=\"fs-15\">Welcome to your Calendar!</h6>\r\n                  <p class=\"text-muted mb-0\">\r\n                    Event that applications book will appear here. Click on an\r\n                    event to see the details and manage applicants event.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <!--end card-->\r\n        </div>\r\n        <div class=\"col-xl-9\">\r\n          <div class=\"card card-h-100\">\r\n            <div class=\"card-body\">\r\n              <FullCalendar ref=\"fullCalendar\" :options=\"calendarOptions\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style=\"clear: both\"></div>\r\n    </div>\r\n  </div>\r\n  <b-modal\r\n      v-model=\"showModal\"\r\n      title=\"Add New Event\"\r\n      title-class=\"text-black font-18\"\r\n      body-class=\"p-3\"\r\n      hide-footer>\r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"name\">Title</label>\r\n            <input\r\n                id=\"name\"\r\n                v-model=\"event.title\"\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                placeholder=\"Insert Event name\"\r\n                :class=\"{ 'is-invalid': submitted && v$.event.title.$error }\"\r\n            />\r\n            <div\r\n                v-if=\"submitted && v$.event.title.$error\"\r\n                class=\"invalid-feedback\">\r\n              <span v-if=\"v$.event.title.required.$message\">{{\r\n                  v$.event.title.required.$message\r\n                }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <label for=\"filterFromDate\" class=\"form-label\"> Start On </label>\r\n          <flat-pickr\r\n              v-model=\"event.start\"\r\n              :config=\"dateTimeConfig\"\r\n              class=\"form-control\"\r\n          ></flat-pickr>\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <label for=\"filterToDate\" class=\"form-label\"> End On</label>\r\n          <flat-pickr\r\n              v-model=\"event.end\"\r\n              :config=\"dateTimeConfig\"\r\n              class=\"form-control\"\r\n          ></flat-pickr>\r\n        </div>\r\n        <div class=\"col-12\" style=\"margin-top: 5px;\">\r\n          <label for=\"eventDescription\" class=\"form-label\">Description</label>\r\n          <textarea class=\"form-control\" id=\"eventDescription\" rows=\"3\" v-model=\"event.description\"></textarea>\r\n        </div>\r\n        <div class=\"col-12\" style=\"margin-top: 5px;\">\r\n          <div class=\"mb-3\">\r\n            <label class=\"control-label\">Category</label>\r\n            <select\r\n                v-model=\"event.category\"\r\n                class=\"form-control\"\r\n                name=\"category\"\r\n                id=\"createCategory\"\r\n            >\r\n              <option\r\n                  v-for=\"option in categories\"\r\n                  :key=\"option.backgroundColor\"\r\n                  :value=\"`${option.value}`\"\r\n              >\r\n                {{ option.name }}\r\n              </option>\r\n            </select>\r\n            <div\r\n                v-if=\"submitted && v$.event.category.$error\"\r\n                class=\"invalid-feedback\"\r\n            >\r\n              <span v-if=\"v$.event.category.required.$message\">{{\r\n                  v$.event.category.required.$message\r\n                }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"text-end pt-5 mt-3\">\r\n        <b-button variant=\"light\" @click=\"hideModal\">Close</b-button>\r\n        <b-button type=\"submit\" variant=\"success\" class=\"ms-1\" @click=\"createEvent\">Create event</b-button>\r\n      </div>\r\n    </form>\r\n  </b-modal>\r\n\r\n<!-- Edit Modal -->\r\n<!--  <b-modal-->\r\n<!--      v-model=\"eventModal\"-->\r\n<!--      title=\"Edit Event\"-->\r\n<!--      title-class=\"text-black font-18\"-->\r\n<!--      hide-footer-->\r\n<!--      body-class=\"p-3\"-->\r\n<!--  >-->\r\n<!--    <form @submit.prevent=\"editSubmit\">-->\r\n<!--      <div class=\"row\">-->\r\n<!--        <div class=\"col-12\">-->\r\n<!--          <div class=\"mb-3\">-->\r\n<!--            <label for=\"name\">Event Name</label>-->\r\n<!--            <input-->\r\n<!--                id=\"name1\"-->\r\n<!--                v-model=\"editevent.editTitle\"-->\r\n<!--                type=\"text\"-->\r\n<!--                class=\"form-control\"-->\r\n<!--                placeholder=\"Insert Event name\"-->\r\n<!--            />-->\r\n<!--          </div>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"col-6\">-->\r\n<!--          <label for=\"filterFromDate\" class=\"form-label\"> Start On </label>-->\r\n<!--          <flat-pickr-->\r\n<!--              v-model=\"editevent.editStart\"-->\r\n<!--              :config=\"dateTimeConfig\"-->\r\n<!--              class=\"form-control\"-->\r\n<!--              data-provider=\"timepickr\"-->\r\n<!--              data-time-hrs=\"true\"-->\r\n<!--          ></flat-pickr>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"col-6\">-->\r\n<!--          <label for=\"filterToDate\" class=\"form-label\"> End On</label>-->\r\n<!--          <flat-pickr-->\r\n<!--              v-model=\"editevent.editEnd\"-->\r\n<!--              :config=\"dateTimeConfig\"-->\r\n<!--              class=\"form-control\"-->\r\n<!--              data-provider=\"timepickr\"-->\r\n<!--              data-time-hrs=\"true\"-->\r\n<!--          ></flat-pickr>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"col-12\" style=\"margin-top: 5px;\">-->\r\n<!--          <label for=\"eventDescription\" class=\"form-label\">Description</label>-->\r\n<!--          <textarea class=\"form-control\" id=\"eventDescription\" rows=\"3\" v-model=\"editevent.editDescription\"></textarea>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"col-12\" style=\"margin-top: 5px;\">-->\r\n<!--          <div class=\"mb-3\">-->\r\n<!--            <label class=\"control-label\">Category</label>-->\r\n<!--            <select-->\r\n<!--                v-model=\"editevent.editcategory\"-->\r\n<!--                class=\"form-control\"-->\r\n<!--                name=\"category\"-->\r\n<!--            >-->\r\n<!--              <option-->\r\n<!--                  v-for=\"option in categories\"-->\r\n<!--                  :key=\"option.backgroundColor\"-->\r\n<!--                  :value=\"`${option.value}`\"-->\r\n<!--              >-->\r\n<!--                {{ option.name }}-->\r\n<!--              </option>-->\r\n<!--            </select>-->\r\n<!--          </div>-->\r\n<!--        </div>-->\r\n<!--      </div>-->\r\n<!--      <div class=\"text-end p-3\">-->\r\n<!--        <b-button variant=\"light\" @click=\"closeModal\">Close</b-button>-->\r\n<!--        <b-button class=\"ms-1\" variant=\"danger\" @click=\"confirm\"-->\r\n<!--        >Delete</b-button-->\r\n<!--        >-->\r\n<!--        <b-button class=\"ms-1\" variant=\"success\" @click=\"editSubmit\"-->\r\n<!--        >Save</b-button-->\r\n<!--        >-->\r\n<!--      </div>-->\r\n<!--    </form>-->\r\n<!--  </b-modal>-->\r\n</template>\r\n"]}]}