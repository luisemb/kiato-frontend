{
  "name": "vue3-component-base",
  "version": "0.0.9",
  "main": "index.js",
  "module": "index.js",
  "type": "module",
  "types": "index.d.ts",
  "keywords": [
    "vue",
    "component",
    "class"
  ],
  "bugs": {
    "url": "https://github.com/CarterLi/vue-component-base/issues",
    "email": "carter.li@eoitek.com"
  },
  "repository": "git@github.com:CarterLi/vue-component-base.git",
  "author": "李通洲 <carter.li@eoitek.com>",
  "license": "MIT",
  "dependencies": {
    "lodash-es": "^4.17.21",
    "tslib": "^2.3.1",
    "vue": "^3.2.26"
  },
  "devDependencies": {
    "@types/lodash-es": "^4.17.5",
    "typescript": "^4.5.4"
  },
  "scripts": {
    "build": "tsc -d -p ."
  },
  "readme": "# VueComponentBase\n\nFor Vue 3.\n\n## Functional difference from v2\n\n* Default prop value with field init syntax won't work, use prop option instead.\n\n```ts\n// @Prop() readonly prop = 'default prop'; // Doesn't work\n@Prop({ default: 'default prop' }) prop: string; // Works\n```\n\n* For `@Ref` that maps an array ( i.e. `ref` used in `v-for` ), declare `ref=\"xxx\"` in template as `:ref=\"x => xxxRefFn(index, x)\"`\n\n```ts\n@Ref() divs: HTMLDivElement[];\n```\n\n```html\n<div v-for=\"(item, index) of [1, 2, 3]\"\n     :key=\"item\"\n     :ref=\"x => divsRefFn(index, x)\"></div>\n```\n\n* Lifecycle hook `beforeDestroy` and `destroyed` are deprecated to follow the change of Vue 3, but they are still supported and are treated as the alias of `beforeUnmount` and `unmounted`.\n\nAll other functions stay the same.\n\n## Usage\n\n```ts\nimport { Component, VueComponentBase } from 'vue-component-base';\n\n@Component() // Parens are required\nexport default class MyComponent extends VueComponentBase { // NOT `extends Vue`. Note `extends MyBaseComponent` works\n  @Prop({ default: 'default prop' }) readonly prop: string; // https://github.com/kaorun343/vue-property-decorator#Prop\n\n  @Ref() readonly div: HTMLDivElement; // $refs.div\n\n  @Inject() inject readonly: Something; // inject\n\n  foo = ''; // Normal property\n  arrowFn = () => this.foo = 456; // Arrow function property\n\n  undefinedValue = undefined; // Different from https://github.com/vuejs/vue-class-component#undefined-will-not-be-reactive, this is reactive\n\n  undefinedValue2; // This is NOT reactive, TypeScript won't generate code for fields that have no init value. ( while babel and the standard do )\n\n  @Inreactive // It's not reactive, useful for constant values\n  readonly MY_CONSTANT = 'some constants';\n\n  setup(props: Record<string, any>, ctx: SetupContext) {} // setup function, you cannot use this in it\n\n  mounted() {} // Lifecycle hook with intellisense\n\n  doSomeAction() {} // Normal method\n\n  @Hook('mounted') // Another Lifecycle hook\n  fetchData() {} // Accepted as a normal method too\n\n  @Watch('field') // https://github.com/kaorun343/vue-property-decorator#-watchpath-string-options-watchoptions---decorator\n  onFieldChange(val: string, oldVal: string) {}\n\n  get computedVar() { // Computed properties\n    return 'field: ' + this.field;\n  }\n}\n```\n\n## License\n\nMIT\n"
}