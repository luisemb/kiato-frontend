var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
import VirtualScroll from './VirtualScroll';
import { Navigation } from './Navigation';
import { scrollToItem, areSame } from './utils';
import { guid, validatePackage, templateRendering, getListeners, getTemplate } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata';
/**
 * @hidden
 */
var DropDownBase = /** @class */function () {
  function DropDownBase(component) {
    var _this = this;
    this.vs = new VirtualScroll();
    this.navigation = new Navigation();
    this.handleItemClick = function (index, event) {
      var state = _this.initState();
      state.event = event;
      _this.component.handleItemSelect(index, state);
      _this.togglePopup(state);
      _this.applyState(state);
    };
    this.handleFocus = function (event) {
      if (!_this.component.currentFocused) {
        var state = _this.initState();
        // @ts-ignore
        state.data.currentFocused = true;
        state.events.push({
          type: 'focus'
        });
        state.event = event;
        _this.applyState(state);
      }
    };
    this.filterChanged = function (text, state) {
      var component = _this.component;
      var _a = component.$props,
        textField = _a.textField,
        filterable = _a.filterable;
      if (filterable) {
        state.events.push({
          type: 'filterchange',
          filter: {
            field: textField,
            operator: 'contains',
            ignoreCase: true,
            value: text
          }
        });
        _this.repositionPopup();
      }
    };
    this.togglePopup = function (state) {
      // @ts-ignore
      var props = _this.component.$props;
      // @ts-ignore
      var opened = props.opened !== undefined ? props.opened : _this.component.currentOpened;
      // @ts-ignore
      if (props.opened === undefined) {
        // @ts-ignore
        state.data.currentOpened = !opened;
      }
      if (opened) {
        state.events.push({
          type: 'close'
        });
      } else {
        state.events.push({
          type: 'open'
        });
        _this.calculatePopupWidth();
      }
    };
    this.pageChange = function (page, event) {
      var state = _this.initState();
      state.event = event;
      _this.triggerOnPageChange(state, page.skip, page.take);
      _this.applyState(state);
    };
    this.scrollChange = function (event) {
      _this.component.$emit('scroll', event);
    };
    this.scrollToVirtualItem = function (virtual, selectedItemIndex) {
      var vs = _this.vs;
      vs.enabled = false;
      if (virtual.skip === 0) {
        vs.reset();
      } else if (virtual.skip + virtual.pageSize === virtual.total) {
        vs.scrollToEnd();
      } else {
        var scrollTop = vs.translate;
        if (scrollTop === 0) {
          vs.calcScrollElementHeight();
          scrollTop = vs.itemHeight * virtual.skip;
          vs.translateTo(scrollTop - vs.itemHeight);
        }
        if (vs.container) {
          vs.container.scrollTop = scrollTop;
        }
        _this.scrollToItem(selectedItemIndex, true);
      }
      setTimeout(function () {
        return vs.enabled = true;
      }, 10);
    };
    this.getGroupedDataModernMode = function (data, groupField) {
      var newData = [];
      data.forEach(function (el, index) {
        var _a;
        if (data[index - 1] && el[groupField] !== data[index - 1][groupField]) {
          newData.push((_a = {}, _a[groupField] = el[groupField], _a));
          newData.push(data[index]);
        } else {
          newData.push(data[index]);
        }
      });
      return newData;
    };
    this.resetGroupStickyHeader = function (groupName, that) {
      var state = _this.initState();
      if (groupName !== that.group && that.state) {
        that.state.data.group = groupName;
        _this.applyState(state);
      }
    };
    validatePackage(packageMetadata);
    this.listBoxId = guid();
    this.guid = guid();
    this.component = component;
    this.vs.PageChange = this.pageChange;
    this.vs.ScrollChange = this.scrollChange;
  }
  DropDownBase.prototype.didMount = function () {
    // @ts-ignore
    var props = this.component.$props;
    var popupSettings = props.popupSettings || {};
    var style = props.style || {};
    var popupWidth = popupSettings.width;
    var shouldUpdate = props.opened === true;
    if (popupWidth === undefined) {
      this.calculatePopupWidth();
    }
    if (props.dir === undefined && style.direction === undefined) {
      this.calculateDir();
      shouldUpdate = true;
    }
    if (shouldUpdate) {
      // @ts-ignore
      this.component.$forceUpdate();
    }
  };
  DropDownBase.prototype.calculateDir = function () {
    if (this.component.element) {
      this.dirCalculated = window.getComputedStyle(this.component.element).direction || undefined;
    }
  };
  DropDownBase.prototype.calculatePopupWidth = function () {
    if (this.wrapper) {
      this.popupWidth = this.wrapper.offsetWidth + 'px';
    }
  };
  DropDownBase.prototype.scrollToItem = function (itemIndex, vsEnabled) {
    var list = this.list || this.vs.list;
    var item = list ? list.children[0] : undefined;
    if (item && itemIndex >= 0) {
      var vs = this.vs;
      var scrollElement = vs.container || list.parentNode;
      if (scrollElement) {
        var virtualScroll = vsEnabled !== undefined ? vsEnabled : vs.enabled;
        scrollToItem(scrollElement, item.offsetHeight, itemIndex, vs.translate, virtualScroll);
      }
    }
  };
  DropDownBase.prototype.repositionPopup = function () {
    var component = this.component;
    setTimeout(function () {
      var lc = component.$refs.container;
      if (lc) {
        var popup = lc.$refs.popup;
        if (popup && popup.show) {
          popup.reposition();
        }
      }
    }, 5);
  };
  DropDownBase.prototype.initState = function () {
    var state = {
      data: {},
      events: [],
      event: undefined
    };
    return state;
  };
  DropDownBase.prototype.applyState = function (state) {
    var _this = this;
    if (Object.keys(state.data).length > 0) {
      Object.keys(state.data).forEach(function (key) {
        _this.component[key] = state.data[key];
      });
    }
    // @ts-ignore
    var newValue = this.component.primitiveValue();
    var eventArgs = {
      event: state.event,
      component: this.component,
      target: {
        // @ts-ignore
        name: this.component.$props.name,
        value: newValue
      },
      value: newValue
    };
    state.events.forEach(function (eventData) {
      var type = eventData.type;
      delete eventData.type;
      if (type) {
        if (type === 'change') {
          // @ts-ignore
          _this.component.$emit('changemodel', newValue);
          // @ts-ignore
          _this.component.$emit('update:modelValue', newValue);
        }
        // @ts-ignore
        _this.component.$emit(type, __assign(__assign({}, eventArgs), eventData));
      }
    });
  };
  DropDownBase.prototype.triggerOnPageChange = function (state, skip, take) {
    // @ts-ignore
    var virtual = this.component.$props.virtual;
    if (virtual) {
      var newSkip = Math.min(Math.max(0, skip), Math.max(0, virtual.total - take));
      if (newSkip !== virtual.skip) {
        state.events.push({
          type: 'pagechange',
          page: {
            skip: newSkip,
            take: take
          }
        });
      }
    }
  };
  DropDownBase.prototype.triggerPageChangeCornerItems = function (item, state) {
    // @ts-ignore
    var props = this.component.$props;
    var _a = props.dataItems,
      dataItems = _a === void 0 ? [] : _a,
      dataItemKey = props.dataItemKey,
      virtual = props.virtual;
    var opened = props.opened !== undefined ? props.opened : this.component.currentOpened;
    if (item && virtual && this.vs.enabled) {
      if (virtual.skip > 0 && areSame(item, dataItems[0], dataItemKey)) {
        this.triggerOnPageChange(state, virtual.skip - 1, virtual.pageSize);
      } else if (virtual.skip + virtual.pageSize < virtual.total && areSame(item, dataItems[dataItems.length - 1], dataItemKey)) {
        this.triggerOnPageChange(state, virtual.skip + 1, virtual.pageSize);
      } else if (!opened && virtual.skip + virtual.pageSize < virtual.total && areSame(item, dataItems[dataItems.length - 1], dataItemKey)) {
        this.triggerOnPageChange(state, virtual.skip + 1, virtual.pageSize);
      }
    }
  };
  DropDownBase.prototype.getTemplateDef = function (template, h) {
    var templateRender = templateRendering.call(this, template, getListeners.call(this));
    return getTemplate.call(this, {
      h: h,
      template: templateRender
    });
  };
  DropDownBase.prototype.getListItemHeight = function (listItem) {
    var compStyles = listItem && window.getComputedStyle(listItem);
    return compStyles ? compStyles.height.slice(0, compStyles.height.length - 2) : 0; // Get the height of the list item as Number
  };

  DropDownBase.defaultProps = {
    popupSettings: {
      animate: true,
      height: '200px'
    },
    required: false,
    validityStyles: true
  };
  return DropDownBase;
}();
export default DropDownBase;