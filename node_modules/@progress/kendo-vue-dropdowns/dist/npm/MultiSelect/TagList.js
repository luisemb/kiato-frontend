"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagListVue2 = exports.TagList = void 0;
// @ts-ignore
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var preventDefault = function preventDefault(event) {
  return event.preventDefault();
};
var stopPropagation = function stopPropagation(event) {
  return event.event.stopPropagation();
};
/**
 * @hidden
 */
var TagListVue2 = {
  name: 'TagList',
  inheritAttrs: false,
  props: {
    removeTagIcon: String,
    dataItems: Array,
    guid: String,
    focused: Object,
    tagRender: [String, Function, Object],
    tagsRounded: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large', 'full'].includes(value);
      }
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return ['solid', 'flat', 'outline'].includes(value);
      }
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large'].includes(value);
      }
    }
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      var _b = this.$props,
        size = _b.size,
        disabled = _b.disabled;
      return _a = {
        'k-chip-list': true
      }, _a["k-chip-list-".concat(kendo_vue_common_1.kendoThemeMaps.sizeMap[size] || size)] = size, _a['k-disabled'] = disabled, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  methods: {
    onTagDelete: function onTagDelete(tagData, event) {
      this.$emit('tagdelete', tagData, event);
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    var _a = this.$props,
      dataItems = _a.dataItems,
      guid = _a.guid,
      size = _a.size,
      disabled = _a.disabled,
      tagsRounded = _a.tagsRounded,
      removeTagIcon = _a.removeTagIcon;
    return h("div", {
      "class": 'k-input-values',
      style: this.$attrs.style
    }, [h("div", {
      "class": this.wrapperClass,
      role: "listbox",
      attrs: this.v3 ? undefined : {
        role: "listbox",
        id: 'tagslist-' + guid
      },
      id: 'tagslist-' + guid
    }, [dataItems.map(function (tagData, index) {
      var _this = this;
      var uniqueId = "tag-".concat(guid, "-").concat(tagData.text.toString().replace(/\s+/g, '-'));
      var isFocused = tagData === this.$props.focused;
      var defaultRendering = h(kendo_vue_buttons_1.Chip, {
        id: uniqueId,
        attrs: this.v3 ? undefined : {
          id: uniqueId,
          tabindex: -1,
          "aria-selected": isFocused,
          role: "option",
          "aria-setsize": dataItems.length,
          text: tagData.text,
          disabled: disabled,
          removable: true,
          removeIcon: removeTagIcon,
          rounded: tagsRounded,
          size: size
        },
        tabindex: -1,
        "aria-selected": isFocused,
        role: "option",
        "aria-setsize": dataItems.length,
        key: tagData.text + index,
        text: tagData.text,
        disabled: disabled,
        removable: true,
        onRemove: function onRemove(e) {
          return _this.onTagDelete(tagData.data, e);
        },
        on: this.v3 ? undefined : {
          "remove": function onRemove(e) {
            return _this.onTagDelete(tagData.data, e);
          },
          "mousedown": preventDefault,
          "click": stopPropagation
        },
        removeIcon: removeTagIcon,
        onMousedown: preventDefault,
        onClick: stopPropagation,
        "class": isFocused ? 'k-focus' : undefined,
        rounded: tagsRounded,
        size: size
      });
      return kendo_vue_common_1.getTemplate.call(this, {
        h: h,
        template: this.$props.tagRender,
        defaultRendering: defaultRendering,
        additionalProps: __assign(__assign({}, this.$props), {
          tagData: tagData,
          index: index
        }),
        additionalListeners: {
          tagdelete: this.onTagDelete
        }
      });
    }, this), defaultSlot])]);
  }
};
exports.TagListVue2 = TagListVue2;
/**
 * @hidden
 */
var TagList = TagListVue2;
exports.TagList = TagList;