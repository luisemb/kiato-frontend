"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListVue2 = exports.List = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
var ListItem_1 = require("./ListItem");
var ListGroupItem_1 = require("./ListGroupItem");
var utils_1 = require("./utils");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
/**
 * @hidden
 */
var ListVue2 = {
  name: 'list',
  // @ts-ignore
  emits: {
    listclick: null,
    scroll: null
  },
  props: {
    id: String,
    show: Boolean,
    dataItems: Array,
    value: [Object, String, Number, Boolean, Array],
    textField: String,
    valueField: String,
    optionsGuid: String,
    wrapperCssClass: String,
    wrapperStyle: Object,
    listStyle: Object,
    skip: Number,
    focusedIndex: Number,
    highlightSelected: {
      type: Boolean,
      default: true
    },
    itemRender: [String, Function, Object],
    groupHeaderItemRender: [String, Function, Object],
    noDataRender: [String, Function, Object],
    scroller: Boolean,
    groupField: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var listRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      listRef: listRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  mounted: function mounted() {
    this.list = (0, kendo_vue_common_1.getRef)(this, 'list');
  },
  methods: {
    handleClick: function handleClick(index, e) {
      this.$emit('listclick', index, e);
    },
    handleScroll: function handleScroll(e) {
      this.$emit('scroll', e);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var _a = this.$props,
      id = _a.id,
      show = _a.show,
      wrapperCssClass = _a.wrapperCssClass,
      wrapperStyle = _a.wrapperStyle,
      listStyle = _a.listStyle,
      listRef = _a.listRef;
    var renderNoValueElement = function renderNoValueElement() {
      var noDataRender = this.$props.noDataRender;
      var noDataElement = h("div", {
        "class": 'k-nodata'
      }, [h("div", [localizationService.toLanguageString(main_1.nodata, main_1.messages[main_1.nodata])])]);
      return kendo_vue_common_1.getTemplate.call(this, {
        h: h,
        template: noDataRender,
        defaultRendering: noDataElement
      });
    };
    var renderItems = function renderItems() {
      var _a = this.$props,
        textField = _a.textField,
        valueField = _a.valueField,
        optionsGuid = _a.optionsGuid,
        _b = _a.skip,
        skip = _b === void 0 ? 0 : _b,
        focusedIndex = _a.focusedIndex,
        highlightSelected = _a.highlightSelected,
        value = _a.value,
        groupField = _a.groupField,
        itemRender = _a.itemRender,
        groupHeaderItemRender = _a.groupHeaderItemRender,
        dataItems = _a.dataItems;
      var isArray = Array.isArray(value);
      var groupCounter = 0;
      return dataItems.map(function (item, index) {
        var realIndex = skip + index;
        var selected = highlightSelected && (!isArray && (0, utils_1.areSame)(item, value, valueField) || isArray && value.findIndex(function (i) {
          return (0, utils_1.areSame)(i, item, valueField);
        }) !== -1);
        var group = undefined;
        var current, previous;
        if (index > 0 && groupField !== undefined) {
          current = (0, utils_1.getItemValue)(item, groupField);
          previous = (0, utils_1.getItemValue)(dataItems[index - 1], groupField);
          if (current && previous && current !== previous !== undefined) {
            group = current;
          }
        }
        if (group !== undefined && Object.keys(item).length === 1) {
          groupCounter += 1;
        }
        return group !== undefined && item[groupField] !== undefined && Object.keys(item).length === 1 ? h(ListGroupItem_1.ListGroupItem, {
          id: "option-".concat(optionsGuid, "-").concat(realIndex),
          attrs: this.v3 ? undefined : {
            id: "option-".concat(optionsGuid, "-").concat(realIndex),
            group: group,
            render: groupHeaderItemRender
          },
          key: realIndex + '-group-item',
          group: group,
          render: groupHeaderItemRender
        }) : h(ListItem_1.ListItem, {
          id: "option-".concat(optionsGuid, "-").concat(realIndex),
          attrs: this.v3 ? undefined : {
            id: "option-".concat(optionsGuid, "-").concat(realIndex),
            dataItem: item,
            selected: selected,
            focused: focusedIndex === realIndex - groupCounter,
            index: realIndex - groupCounter,
            textField: textField,
            group: group,
            render: itemRender
          },
          dataItem: item,
          selected: selected,
          focused: focusedIndex === realIndex - groupCounter,
          index: realIndex - groupCounter,
          key: realIndex - groupCounter,
          onItemclick: this.handleClick,
          on: this.v3 ? undefined : {
            "itemclick": this.handleClick
          },
          textField: textField,
          group: group,
          render: itemRender
        });
      }, this);
    };
    var items = renderItems.call(this);
    return items.length ? h("div", {
      "class": wrapperCssClass,
      style: wrapperStyle,
      unselectable: 'on',
      attrs: this.v3 ? undefined : {
        unselectable: 'on'
      },
      onScroll: this.handleScroll,
      on: this.v3 ? undefined : {
        "scroll": this.handleScroll
      }
    }, [h("ul", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        role: "listbox",
        "aria-live": "polite",
        "aria-hidden": !show ? true : undefined
      },
      role: "listbox",
      "aria-live": "polite",
      "aria-hidden": !show ? true : undefined,
      "class": 'k-list-ul',
      ref: (0, kendo_vue_common_1.setRef)(this, 'list'),
      style: listStyle
    }, [items]), defaultSlot]) : renderNoValueElement.call(this);
  }
};
exports.ListVue2 = ListVue2;
/**
 * @hidden
 */
var List = ListVue2;
exports.List = List;