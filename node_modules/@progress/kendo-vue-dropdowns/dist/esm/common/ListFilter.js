var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { getRef, Icon, kendoThemeMaps, setRef } from '@progress/kendo-vue-common';
import { searchIcon } from '@progress/kendo-svg-icons';
import { TextBox } from '@progress/kendo-vue-inputs';
var sizeMap = kendoThemeMaps.sizeMap,
  roundedMap = kendoThemeMaps.roundedMap;
/**
 * @hidden
 */
var ListFilterVue2 = {
  name: 'list-filter',
  // @ts-ignore
  emits: {
    keydown: null,
    change: null,
    focus: null,
    blur: null
  },
  props: {
    value: String,
    rounded: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large', 'full'].includes(value);
      }
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return ['solid', 'flat', 'outline'].includes(value);
      }
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large'].includes(value);
      }
    },
    adaptiveMode: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    spanClass: function spanClass() {
      var _a;
      var _b = this.$props,
        size = _b.size,
        rounded = _b.rounded,
        fillMode = _b.fillMode;
      return _a = {
        'k-searchbox k-input': true
      }, _a["k-input-".concat(sizeMap[size] || size)] = size, _a["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded, _a["k-input-".concat(fillMode)] = fillMode, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    return {
      v3: v3,
      inputRef: inputRef
    };
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$emit('keydown', e);
    },
    onChange: function onChange(e) {
      this.$emit('change', e);
    },
    handleFocus: function handleFocus(e) {
      this.$emit('focus', e);
    },
    handleBlur: function handleBlur(e) {
      this.$emit('blur', e);
    },
    prefixRender: function prefixRender(h) {
      var iconProps = {
        class: 'k-input-icon',
        name: 'search',
        icon: searchIcon
      };
      return h(Icon, __assign({
        props: this.v3 ? undefined : iconProps
      }, iconProps));
    }
  },
  mounted: function mounted() {
    this.input = getRef(this, 'input')._input;
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      size = _a.size,
      rounded = _a.rounded,
      fillMode = _a.fillMode,
      adaptiveMode = _a.adaptiveMode;
    var listFilterComponent = function listFilterComponent() {
      return h(TextBox, {
        ref: setRef(this, 'input'),
        value: this.$props.value,
        attrs: this.v3 ? undefined : {
          value: this.$props.value,
          size: size,
          fillMode: fillMode,
          rounded: rounded,
          inputPrefix: this.prefixRender
        },
        onInput: this.onChange,
        on: this.v3 ? undefined : {
          "input": this.onChange,
          "keydown": this.onKeyDown,
          "focus": this.handleFocus,
          "blur": this.handleBlur
        },
        onKeydown: this.onKeyDown,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        size: size,
        fillMode: fillMode,
        rounded: rounded,
        inputPrefix: this.prefixRender
      });
    };
    return !adaptiveMode ? h("div", {
      "class": "k-list-filter"
    }, [listFilterComponent.call(this)]) : listFilterComponent.call(this);
  }
};
/**
 * @hidden
 */
var ListFilter = ListFilterVue2;
export { ListFilter, ListFilterVue2 };