// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { canUseDOM, getRef, setRef } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var SearchBarVue2 = {
  name: 'search-bar',
  // @ts-ignore
  emits: {
    'change': null,
    'keydown': null,
    'focus': null,
    'blur': null
  },
  props: {
    value: String,
    id: String,
    placeholder: String,
    tabIndex: Number,
    size: {
      type: Number,
      default: undefined
    },
    suggestedText: String,
    focused: Boolean,
    disabled: Boolean,
    readOnly: Boolean,
    expanded: Boolean,
    owns: String,
    name: String,
    activedescendant: String,
    describedby: String,
    clearButton: Boolean,
    accessKey: String,
    ariaLabelledBy: String,
    ariaLabel: {
      type: String,
      default: undefined
    }
  },
  data: function data() {
    return {
      prevValue: undefined,
      prevSuggestedText: undefined
    };
  },
  watch: {
    suggestedText: function suggestedText(_, oldValue) {
      this.prevSuggestedText = oldValue;
    },
    value: function value(_, oldValue) {
      this.prevValue = oldValue;
    }
  },
  updated: function updated() {
    var _a = this.$props,
      value = _a.value,
      suggestedText = _a.suggestedText,
      focused = _a.focused;
    if (!this.input) {
      this.input = this.$refs.input;
    }
    var input = this.input;
    var valueChanged = this.$data.prevValue !== value || suggestedText !== this.prevSuggestedText;
    var deleting = valueChanged && this.$data.prevValue && this.$data.prevValue.startsWith(value) && !(this.$data.prevSuggestedText && suggestedText && this.$data.prevSuggestedText.endsWith(suggestedText));
    if (focused && input && canUseDOM && document.activeElement !== input) {
      input.focus();
    }
    if (suggestedText && valueChanged && !deleting && input) {
      input.setSelectionRange(value.length - suggestedText.length, value.length);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    return {
      v3: v3,
      inputRef: inputRef
    };
  },
  mounted: function mounted() {
    this.input = getRef(this, 'input');
  },
  methods: {
    onChange: function onChange(e) {
      this.$emit('change', e);
    },
    onBlur: function onBlur(e) {
      this.$emit('blur', e);
    },
    onFocus: function onFocus(e) {
      this.$emit('focus', e);
    },
    onKeyDown: function onKeyDown(e) {
      this.$emit('keydown', e);
    },
    clearButtonClick: function clearButtonClick(e) {
      this.$emit('clearbuttonclick', e);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    return h("input", {
      autocomplete: "off",
      attrs: this.v3 ? undefined : {
        autocomplete: "off",
        id: this.$props.id,
        type: "text",
        placeholder: this.$props.placeholder,
        tabindex: this.$props.tabIndex,
        accesskey: this.$props.accessKey,
        role: "combobox",
        name: this.$props.name,
        size: this.$props.size ? this.$props.size : 20,
        "aria-disabled": this.$props.disabled || undefined,
        disabled: this.$props.disabled || undefined,
        readonly: this.$props.readOnly || undefined,
        "aria-autocomplete": this.$props.suggestedText ? 'both' : 'list',
        "aria-haspopup": "listbox",
        "aria-expanded": this.$props.expanded || false,
        "aria-controls": this.$props.owns,
        "aria-activedescendant": this.$props.expanded ? this.$props.activedescendant : undefined,
        "aria-describedby": this.$props.describedby,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-label": this.$props.ariaLabel
      },
      id: this.$props.id,
      type: "text",
      key: "searchbar",
      placeholder: this.$props.placeholder,
      "class": "k-input-inner",
      tabindex: this.$props.tabIndex,
      accesskey: this.$props.accessKey,
      role: "combobox",
      name: this.$props.name,
      value: this.v3 ? this.$props.value : null,
      domProps: this.v3 ? undefined : {
        "value": this.$props.value
      },
      size: this.$props.size ? this.$props.size : 20,
      onInput: this.onChange,
      on: this.v3 ? undefined : {
        "input": this.onChange,
        "keydown": this.onKeyDown,
        "focusin": this.onFocus,
        "blur": this.onBlur
      },
      ref: setRef(this, 'input'),
      onKeydown: this.onKeyDown,
      onFocusin: this.onFocus,
      onBlur: this.onBlur,
      "aria-disabled": this.$props.disabled || undefined,
      disabled: this.$props.disabled || undefined,
      readonly: this.$props.readOnly || undefined,
      "aria-autocomplete": this.$props.suggestedText ? 'both' : 'list',
      "aria-haspopup": "listbox",
      "aria-expanded": this.$props.expanded || false,
      "aria-controls": this.$props.owns,
      "aria-activedescendant": this.$props.expanded ? this.$props.activedescendant : undefined,
      "aria-describedby": this.$props.describedby,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-label": this.$props.ariaLabel
    });
  }
};
/**
 * @hidden
 */
var SearchBar = SearchBarVue2;
export { SearchBar, SearchBarVue2 };