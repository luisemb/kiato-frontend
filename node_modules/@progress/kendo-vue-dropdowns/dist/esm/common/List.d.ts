import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
export interface ListProps {
    id?: string;
    show?: boolean;
    dataItems: any[];
    value?: any;
    textField?: string;
    valueField?: string;
    optionsGuid?: string;
    listRef?: (element: HTMLUListElement) => void;
    wrapperCssClass?: string;
    wrapperStyle?: any;
    listStyle?: any;
    skip?: number;
    focusedIndex?: number;
    highlightSelected?: boolean;
    onClick?: (index: number, event: any) => void;
    itemRender?: any;
    groupHeaderItemRender?: any;
    noDataRender?: any;
    scroller?: boolean;
    groupField: string;
}
/**
 * @hidden
 */
export interface ListMethods extends Vue2type {
    handleClick: (e: any) => void;
    handleScroll: (e: any) => void;
}
/**
 * @hidden
 */
export interface ListState {
    list: any;
    listRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface ListAll extends ListMethods, ListState {
    listRef: any;
}
/**
 * @hidden
 */
declare let ListVue2: ComponentOptions<Vue2type, DefaultData<{}>, DefaultMethods<ListMethods>, {}, RecordPropsDefinition<ListProps>>;
/**
 * @hidden
 */
declare const List: DefineComponent<{}, any, {}, {}, ListMethods, {}, {}, {}, string, {}, {}, {}>;
export { List, ListVue2 };
