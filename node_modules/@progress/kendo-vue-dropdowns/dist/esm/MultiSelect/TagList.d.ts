import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => TagListAll);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * Represents the tag data.
 */
export interface TagData {
    /**
     * Represents the text of the tag.
     */
    text: string;
    /**
     * Represents the data items which correspond to the tag.
     */
    data: Array<any>;
}
/**
 * @hidden
 */
export interface TagListProps {
    removeTagIcon: string;
    dataItems: Array<TagData>;
    guid: string;
    focused?: TagData;
    tagRender?: any;
    size?: null | 'small' | 'medium' | 'large' | string;
    fillMode?: null | 'solid' | 'outline' | 'flat' | string;
    tagsRounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
}
/**
 * @hidden
 */
export interface TagListMethods extends Vue2type {
    [key: string]: any;
    onTagDelete: (data: any, e: any) => void;
}
/**
 * @hidden
 */
export interface TagListAll extends TagListMethods {
}
/**
 * @hidden
 */
declare let TagListVue2: ComponentOptions<Vue2type, DefaultData<TagListAll>, DefaultMethods<TagListAll>, {}, RecordPropsDefinition<TagListProps>>;
/**
 * @hidden
 */
declare const TagList: DefineComponent<{}, any, {}, {}, TagListMethods, {}, {}, {}, string, {}, {}, {}>;
export { TagList, TagListVue2 };
