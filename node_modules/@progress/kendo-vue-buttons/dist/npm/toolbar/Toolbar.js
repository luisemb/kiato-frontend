"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarVue2 = exports.Toolbar = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var util_1 = require("./../util");
var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */
var ToolbarVue2 = {
  name: 'KendoToolbar',
  props: {
    tabIndex: {
      type: Number,
      default: 0
    },
    dir: String,
    keyboardNavigation: {
      type: Boolean,
      default: true
    },
    buttons: {
      type: Array,
      default: function _default() {
        return undefined;
      }
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    ariaLabel: String
  },
  created: function created() {
    this.offsetHeight = 0;
    this.offsetWidth = 0;
    this.currentButtons = [];
    this.focusedSelector = this.selectors.map(function (s) {
      return s + ':focus';
    }).join(',');
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
  },
  computed: {
    selectors: function selectors() {
      return this.$props.buttons || util_1.toolbarButtons;
    },
    wrapperClass: function wrapperClass() {
      var _a;
      var size = this.$props.size;
      return _a = {
        'k-toolbar': true
      }, _a["k-toolbar-".concat(kendo_vue_common_1.kendoThemeMaps.sizeMap[size] || size)] = size, _a;
    }
  },
  mounted: function mounted() {
    window.addEventListener('resize', this.onWindowResize);
    var element = this.$el;
    if (element) {
      this.offsetWidth = element.offsetWidth;
      this.offsetHeight = element.offsetHeight;
      if (this.$props.keyboardNavigation !== false) {
        this.currentButtons = this.getCurrentButtons();
        this.setTabIndex(0);
      }
    }
  },
  updated: function updated() {
    var element = this.$el;
    if (!element || this.$props.keyboardNavigation === false) {
      return;
    }
    this.currentButtons = this.getCurrentButtons();
    this.setTabIndex(this.focusedIndex());
  },
  destroyed: !!isV3 ? undefined : function () {
    window.removeEventListener('resize', this.onWindowResize);
    this.currentButtons.length = 0;
  },
  // @ts-ignore
  unmounted: function unmounted() {
    window.removeEventListener('resize', this.onWindowResize);
    this.currentButtons.length = 0;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    return h("div", {
      "class": this.wrapperClass,
      role: "toolbar",
      attrs: this.v3 ? undefined : {
        role: "toolbar",
        dir: this.$props.dir,
        "aria-label": this.$props.ariaLabel
      },
      dir: this.$props.dir,
      "aria-label": this.$props.ariaLabel,
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown
      }
    }, [defaultSlot]);
  },
  methods: {
    getCurrentButtons: function getCurrentButtons() {
      return this.$el && this.$el.querySelectorAll ? Array.from(this.$el.querySelectorAll(this.selectors.join(','))) : [];
    },
    getInternalButtons: function getInternalButtons() {
      return this.$el && this.$el.querySelectorAll ? Array.from(this.$el.querySelectorAll(util_1.internalButtons)) : [];
    },
    focusedIndex: function focusedIndex() {
      var focused = this.$el && this.$el.querySelector && this.$el.querySelector(this.focusedSelector);
      return Math.max(0, this.currentButtons.findIndex(function (e) {
        return e === focused;
      }));
    },
    setTabIndex: function setTabIndex(focusedIndex) {
      var tabIndex = this.$props.tabIndex;
      this.currentButtons.forEach(function (button, index) {
        button.tabIndex = index === focusedIndex ? tabIndex : -1;
      });
      this.getInternalButtons().forEach(function (button) {
        button.tabIndex = -1;
      });
    },
    onKeyDown: function onKeyDown(event) {
      if (this.$props.keyboardNavigation === false) {
        return;
      }
      var target = event.target;
      var arrowKey = event.keyCode === kendo_vue_common_1.Keys.left || event.keyCode === kendo_vue_common_1.Keys.right;
      if (!arrowKey || event.defaultPrevented || this.currentButtons.findIndex(function (b) {
        return b === target;
      }) === -1) {
        return;
      }
      var focusedIndex = this.focusedIndex();
      if (event.keyCode === kendo_vue_common_1.Keys.left) {
        this.focusButton(focusedIndex, focusedIndex - 1);
      } else {
        this.focusButton(focusedIndex, focusedIndex + 1);
      }
    },
    focusButton: function focusButton(prevIndex, index) {
      var tabIndex = this.$props.tabIndex;
      var button = this.currentButtons[index];
      if (button) {
        button.tabIndex = tabIndex;
        button.focus();
        var prevButton = this.currentButtons[prevIndex];
        if (prevButton) {
          prevButton.tabIndex = -1;
        }
      }
    },
    onWindowResize: function onWindowResize(event) {
      var element = this.$el;
      if (!element) {
        return;
      }
      var offsetWidth = element.offsetWidth;
      var offsetHeight = element.offsetHeight;
      if (this.offsetWidth !== offsetWidth || this.offsetHeight !== offsetHeight) {
        this.offsetWidth = offsetWidth;
        this.offsetHeight = offsetHeight;
        var newSizes = {
          offsetWidth: this.offsetWidth,
          offsetHeight: this.offsetHeight
        };
        this.$emit('resize', __assign(__assign({
          target: this
        }, newSizes), {
          nativeEvent: event
        }));
      }
    }
  }
};
exports.ToolbarVue2 = ToolbarVue2;
/**
 * @hidden
 */
var Toolbar = ToolbarVue2;
exports.Toolbar = Toolbar;