import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FormComponentProps } from '@progress/kendo-vue-common';
import { ChipListChangeEvent, ChipListDataChangeEvent } from '../models/events';
/**
 * Represents the properties of [ChipList]({% slug api_buttons_chiplist %}) component.
 */
export interface ChipListProps extends FormComponentProps {
    /**
     * Sets the `id` property of the top div element of the ChipList.
     */
    id?: string;
    /**
     * Sets additional classes to the ChipList.
     */
    className?: string;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Represents Chip component.
     */
    chip?: any;
    /**
     * Represents the data about the child Chips.
     */
    dataItems?: any;
    /**
     * Represents the default data about the child Chips.
     */
    defaultDataItems?: any[];
    /**
     * Triggered after Chip data change.
     */
    onDatachange?: (event: ChipListDataChangeEvent) => void;
    /**
     * Represents the selection state of Chip component.
     */
    value?: any | any[];
    /**
     * Represents the default value of the selection state of Chip component.
     */
    defaultValue?: any | any[];
    /**
     * Triggered after value change.
     */
    onChange?: (event: ChipListChangeEvent) => void;
    /**
     * Configures the `size` of the Chip.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `class`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * Configures the `roundness` of the Chip.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `class`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
    /**
     * Configures the `fillMode` of the Chip.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `class`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline' | 'flat' | string;
    /**
     * Represents the selection state of Chip component.
     */
    selection?: string;
    /**
     * Represents the `text` field of Chip, defaults to 'text'.
     */
    textField?: string;
    /**
     * Represents the `value` field of the Chip, defaults to 'value'.
     */
    valueField?: string;
    /**
     * Represents the 'avatar' field in the Chip,  defaults to 'avatar'.
     */
    avatarField?: object;
    /**
     * Determines of ChipList is disabled.
     */
    disabled?: boolean;
    /**
     * The ChipList direction 'ltr' as default or 'rtl'.
     */
    dir?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to HTML aria-describedby attribute.
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
}
/**
 * Represents the target(element and props) of the ChipListChangeEvent.
 */
export interface ChipListHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the ChipList.
     */
    props: ChipListProps;
}
/**
 * @hidden
 */
export interface ChipListMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ChipListState {
    v3: boolean;
    target: any;
    currentRtl: boolean;
}
/**
 * @hidden
 */
export interface ChipListData {
    currentDataItems: Array<any>;
    currentDir: string;
    isRtl: boolean;
    currentFocused: any;
}
/**
 * @hidden
 */
export interface ChipListComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ChipListAll extends ChipListMethods, ChipListState, ChipListData, ChipListComputed, Vue2type {
}
/**
 * @hidden
 */
declare let ChipListVue2: ComponentOptions<Vue2type, DefaultData<ChipListData>, DefaultMethods<ChipListAll>, ChipListComputed, RecordPropsDefinition<ChipListProps>>;
/**
 * @hidden
 */
declare const ChipList: DefineComponent<ChipListProps, any, ChipListData, ChipListComputed, ChipListMethods, {}, {}, {}, string, ChipListProps, ChipListProps, {}>;
export { ChipList, ChipListVue2 };
