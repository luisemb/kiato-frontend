import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * Represents the `resize` event of the Toolbar.
 */
export interface ToolbarResizeEvent {
    /**
     * An event target.
     */
    target: any;
    /**
     * The `offsetWidth` event of the Toolbar.
     */
    offsetWidth: number;
    /**
     * The `offsetHeight` event of the Toolbar.
     */
    offsetHeight: number;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}
/**
 * Represents the props of the [Kendo UI for Vue Toolbar component]({% slug overview_toolbar %}).
 */
export interface ToolbarProps {
    /**
     * Sets additional classes to the Toolbar.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Specifies the `tabIndex` of the Toolbar.
     */
    tabIndex?: number;
    /**
     * The `resize` event of the Toolbar.
     */
    onResize?: (event: ToolbarResizeEvent) => void;
    /**
     * If set to `false`, it will turn off the built-in keyboard navigation.
     */
    keyboardNavigation?: boolean;
    /**
     * @hidden
     *
     * The CSS selectors of the toolbar HTML elements used by built-in keyboard navigation.
     * Each selector needs to point to a focusable element.
     * Defaults to [
     *  'button',
     *  '.k-button-group > button',
     *  '.k-dropdown > .k-dropdown-wrap',
     *  '.k-colorpicker > .k-picker-wrap'
     * ].
     */
    buttons?: string[];
    /**
     * Configures the `size` of the Toolbar.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `class`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * Defines the `aria-label` of the Toolbar.
     */
    ariaLabel?: string;
}
/**
 * @hidden
 */
export interface ToolbarState {
    element: HTMLDivElement | null;
    offsetHeight: number;
    offsetWidth: number;
    currentButtons: Array<HTMLElement>;
    focusedSelector: string;
}
/**
 * @hidden
 */
export interface ToolbarComputed {
    [key: string]: any;
    selectors: string[];
}
/**
 * @hidden
 */
export interface ToolbarMethods {
    [key: string]: any;
    focusedIndex: () => number;
    getCurrentButtons: () => HTMLElement[];
    onKeyDown: (e: any) => void;
    onWindowResize: (e: any) => void;
    focusButton: (current: number, next: number) => void;
    setTabIndex: (index: number) => void;
}
/**
 * @hidden
 */
export interface ToolbarData {
}
/**
 * @hidden
 */
export interface ToolbarAll extends Vue2type, ToolbarMethods, ToolbarData, ToolbarComputed, ToolbarState {
}
/**
 * @hidden
 */
declare let ToolbarVue2: ComponentOptions<ToolbarAll, DefaultData<ToolbarData>, DefaultMethods<ToolbarAll>, ToolbarComputed, RecordPropsDefinition<ToolbarProps>>;
/**
 * @hidden
 */
declare const Toolbar: DefineComponent<ToolbarProps, any, ToolbarData, ToolbarComputed, ToolbarMethods, {}, {}, {}, string, ToolbarProps, ToolbarProps, {}>;
export { Toolbar, ToolbarVue2 };
