var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { getTabIndex, classNames, getListeners, templateRendering, getTemplate, validatePackage, kendoThemeMaps, setRef } from '@progress/kendo-vue-common';
import { selectionReducer } from './selection-reducer';
import { focusReducer } from './focus-reducer';
import { dataReducer } from './data-reducer';
import { Chip } from './Chip';
import { packageMetadata } from '../package-metadata';
/**
 * @hidden
 */
var ChipListVue2 = {
  name: 'KendoVueChipList',
  inheritAttrs: false,
  props: {
    id: String,
    tabIndex: Number,
    dataItems: Array,
    defaultDataItems: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    value: [Object, Array, String, Number],
    defaultValue: {
      type: [Object, Array, String, Number],
      default: function _default() {
        return null;
      }
    },
    size: {
      type: String,
      default: 'medium'
    },
    rounded: {
      type: String,
      default: 'medium'
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return [null, 'flat', 'outline', 'solid'].includes(value);
      }
    },
    selection: {
      type: String,
      default: function _default() {
        return 'none';
      }
    },
    textField: {
      type: String,
      default: function _default() {
        return 'text';
      }
    },
    valueField: {
      type: String,
      default: function _default() {
        return 'value';
      }
    },
    avatarField: {
      type: String,
      default: function _default() {
        return 'avatar';
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    dir: {
      type: String,
      default: function _default() {
        return 'ltr';
      }
    },
    chip: [String, Function, Object],
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  provide: function provide() {
    return {
      kendoSelection: this.currentValue,
      kendoFocused: this.currentFocused,
      kendoDataItems: this.computedDataItems,
      handleDispatchDataItems: this.handleDispatchDataItems,
      handleDispatchSelection: this.handleDispatchSelection,
      handleDispatchFocus: this.handleDispatchFocus
    };
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.currentDataItems = this.$props.dataItems || this.$props.defaultDataItems;
    this.currentValue.value = this.$props.value || this.$props.defaultValue;
  },
  data: function data() {
    return {
      currentDataItems: [],
      currentDir: 'ltr',
      isRtl: false,
      currentFocused: {
        value: false
      },
      currentValue: {
        value: null
      }
    };
  },
  mounted: function mounted() {
    this.chipList = this.v3 ? this.chipListRef : this.$refs.chipList;
    this.currentDir = this.$props.dir !== undefined ? this.$props.dir : this.$el && getComputedStyle(this.$el).direction === 'rtl' || false;
    this.isRtl = this.currentDir === 'rtl';
  },
  computed: {
    computedDataItems: function computedDataItems() {
      return this.$props.dataItems || this.currentDataItems;
    },
    computedValue: function computedValue() {
      return this.$props.value || this.currentValue.value;
    },
    items: function items() {
      return this.computedDataItems.reduce(this.itemsReducer, []);
    }
  },
  methods: {
    handleDispatchSelection: function handleDispatchSelection(action) {
      var newState = selectionReducer(this.computedValue, __assign(__assign({}, action), {
        selection: this.$props.selection,
        state: this.computedValue
      }));
      this.handleChange(newState, action.event);
      this.currentValue.value = newState;
    },
    handleDispatchFocus: function handleDispatchFocus(action) {
      var newState = focusReducer(action.payload, __assign(__assign({}, action), {
        items: this.items
      }));
      this.currentFocused.value = newState;
    },
    handleDispatchDataItems: function handleDispatchDataItems(action) {
      var newState = dataReducer(this.computedDataItems, __assign(__assign({}, action), {
        state: this.computedDataItems,
        valueField: this.$props.valueField
      }));
      this.handleDataChange(newState, action.event);
      this.currentDataItems = newState;
    },
    handleChange: function handleChange(newValue, event) {
      if (this.$el) {
        this.$emit('change', {
          value: newValue,
          target: this.$el,
          event: event
        });
      }
    },
    handleDataChange: function handleDataChange(newData, event) {
      if (this.$el) {
        this.$emit('datachange', {
          value: newData,
          target: this.$el,
          event: event
        });
      }
    },
    itemsReducer: function itemsReducer(acc, current) {
      acc.push(current[this.$props.valueField || this.$props.valueField]);
      return acc;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var chipListRef = ref(null);
    return {
      v3: v3,
      chipListRef: chipListRef
    };
  },
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var size = this.$props.size;
    return h("div", {
      ref: setRef(this, 'chipList'),
      role: 'listbox',
      attrs: this.v3 ? undefined : {
        role: 'listbox',
        id: this.$props.id,
        dir: this.currentDir,
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-orientation": 'horizontal',
        "aria-multiselectable": this.$props.selection === 'multiple' ? true : undefined
      },
      id: this.$props.id,
      dir: this.currentDir,
      style: this.$attrs.style,
      tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
      "class": classNames('k-chip-list', (_a = {}, _a["k-chip-list-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a['k-rtl'] = this.currentDir === 'rtl', _a['k-selection-single'] = this.$props.selection === 'single', _a['k-selection-multiple'] = this.$props.selection === 'multiple', _a['k-disabled'] = this.$props.disabled, _a)),
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-orientation": 'horizontal',
      "aria-multiselectable": this.$props.selection === 'multiple' ? true : undefined
    }, [this.computedDataItems.map(function (item) {
      var chipTemplate = templateRendering.call(this, this.$props.chip, getListeners.call(this));
      var chipDefaultRendering =
      // @ts-ignore  function children
      h(Chip, {
        role: 'option',
        attrs: this.v3 ? undefined : {
          role: 'option',
          dataItem: item,
          text: item[this.$props.textField],
          value: item[this.$props.valueField],
          avatar: item[this.$props.avatarField],
          size: this.$props.size,
          rounded: this.$props.rounded,
          fillMode: this.$props.fillMode
        },
        dataItem: item,
        key: item[this.$props.valueField],
        text: item[this.$props.textField],
        value: item[this.$props.valueField],
        avatar: item[this.$props.avatarField],
        size: this.$props.size,
        rounded: this.$props.rounded,
        fillMode: this.$props.fillMode
      });
      return getTemplate.call(this, {
        h: h,
        template: chipTemplate,
        defaultRendering: chipDefaultRendering,
        additionalProps: {
          dataItem: item,
          key: item[this.$props.valueField],
          text: item[this.$props.textField],
          value: item[this.$props.valueField],
          size: this.$props.size
        }
      });
    }, this)]);
  }
};
/**
 * @hidden
 */
var ChipList = ChipListVue2;
export { ChipList, ChipListVue2 };