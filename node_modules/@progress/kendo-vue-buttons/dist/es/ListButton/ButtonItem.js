// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getTemplate, Icon } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var ButtonItemVue2 = {
  name: 'KendoButtonItem',
  // @ts-ignore
  emits: {
    click: null,
    down: null
  },
  props: {
    focused: Boolean,
    index: Number,
    item: Object,
    render: [String, Object, Function],
    dataItem: [String, Object],
    id: String,
    textField: String
  },
  computed: {
    wrapperClass: function wrapperClass() {
      return {
        'k-item': true,
        'k-focus': this.$props.focused
      };
    },
    innerClass: function innerClass() {
      var dataItem = this.$props.dataItem;
      return {
        'k-link k-menu-link': true,
        'k-selected': dataItem.selected,
        'k-disabled': dataItem.disabled
      };
    }
  },
  methods: {
    onClick: function onClick(event) {
      this.$emit('click', event, this.$props.index);
    },
    onDown: function onDown(event) {
      this.$emit('down', event, this.$props.index);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      dataItem = _a.dataItem,
      id = _a.id,
      render = _a.render;
    var renderContent = function renderContent() {
      var _a = this.$props,
        textField = _a.textField,
        index = _a.index;
      var text = dataItem.text !== undefined ? dataItem.text : textField ? dataItem[textField] : dataItem;
      var itemContent = h("span", {
        tabindex: -1,
        attrs: this.v3 ? undefined : {
          tabindex: -1
        },
        "class": this.innerClass,
        key: "icon"
      }, [dataItem.icon || dataItem.svgIcon ? h(Icon, {
        name: dataItem.icon,
        attrs: this.v3 ? undefined : {
          name: dataItem.icon,
          icon: dataItem.svgIcon
        },
        icon: dataItem.svgIcon,
        "class": dataItem.iconClass
      }) : dataItem.iconClass && h("span", {
        "class": dataItem.iconClass,
        role: "presentation",
        attrs: this.v3 ? undefined : {
          role: "presentation"
        }
      }), dataItem.imageUrl && h("img", {
        "class": "k-icon",
        alt: "",
        attrs: this.v3 ? undefined : {
          alt: "",
          src: dataItem.imageUrl,
          role: "presentation"
        },
        src: dataItem.imageUrl,
        role: "presentation",
        key: "image"
      }), text && h("span", {
        "class": "k-menu-link-text"
      }, [text])]);
      return getTemplate.call(this, {
        h: h,
        template: this.$props.dataItem.render || render,
        defaultRendering: itemContent,
        additionalProps: {
          item: dataItem,
          itemIndex: index,
          innerClass: this.innerClass,
          focused: this.focused
        }
      });
    };
    var item = h("li", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        role: "menuitem",
        "aria-disabled": dataItem.disabled || undefined
      },
      "class": this.wrapperClass,
      onClick: this.onClick,
      on: this.v3 ? undefined : {
        "click": this.onClick,
        "mousedown": this.onDown,
        "pointerdown": this.onDown
      },
      onMousedown: this.onDown,
      onPointerdown: this.onDown,
      role: "menuitem",
      "aria-disabled": dataItem.disabled || undefined
    }, [renderContent.call(this)]);
    return item;
  }
};
/**
 * @hidden
 */
var ButtonItem = ButtonItemVue2;
export { ButtonItem, ButtonItemVue2 };