import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { ButtonInterface } from './ButtonInterface';
/**
 * Represents the props of the [Kendo UI for Vue Button component]({% slug overview_button %}).
 * Extends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).
 */
export interface ButtonProps extends ButtonInterface {
    /**
     * Configures the `size` of the Button.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * Configures the `shape` of the Button.
     *
     * The available options are:
     * - rectangle
     * - square
     * - null&mdash;Does not set a shape `class`.
     *
     */
    shape?: null | 'rectangle' | 'square' | string;
    /**
     * Configures the `roundness` of the Button.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - circle
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
    /**
     * Configures the `fillMode` of the Button.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - link
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline' | 'flat' | 'link' | string;
    /**
     * Configures the `themeColor` of the Button.
     *
     * The available options are:
     * - base
     * - primary
     * - secondary
     * - tertiary
     * - info
     * - success
     * - warning
     * - dark
     * - light
     * - inverse
     * - null&mdash;Does not set a themeColor `className`.
     *
     * @default `base`
     */
    themeColor?: null | 'base' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'dark' | 'light' | 'inverse' | string;
}
/**
 * @hidden
 */
export interface ButtonState {
    _activeTemp?: boolean;
}
/**
 * @hidden
 */
export interface ButtonComputed {
    [key: string]: any;
    buttonClasses: object;
}
/**
 * @hidden
 */
export interface ButtonMethods {
    [key: string]: any;
    focus: (e: any) => void;
    toggleIfApplicable: () => void;
    handleClick: (event: any) => void;
}
/**
 * @hidden
 */
export interface ButtonData {
    currentActive: boolean;
}
/**
 * @hidden
 */
export interface ButtonAll extends Vue2type, ButtonMethods, ButtonData, ButtonComputed, ButtonState {
}
/**
 * @hidden
 */
declare let ButtonVue2: ComponentOptions<ButtonAll, DefaultData<ButtonData>, DefaultMethods<ButtonAll>, ButtonComputed, RecordPropsDefinition<ButtonProps>>;
/**
 * @hidden
 */
export declare type ButtonType = DefineComponent<ButtonProps, any, ButtonData, ButtonComputed, ButtonMethods, {}, {}, {}, string, ButtonProps, ButtonProps, {}>;
/**
 * @hidden
 */
declare const Button: ButtonType;
export { Button, ButtonVue2 };
