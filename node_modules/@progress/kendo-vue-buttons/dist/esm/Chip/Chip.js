// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { classNames, getTabIndex, Keys, noop, validatePackage, kendoThemeMaps, setRef, getRef, templateRendering, getListeners, getTemplate, Icon, getIconName } from '@progress/kendo-vue-common';
import { checkIcon, xCircleIcon } from '@progress/kendo-svg-icons';
import { FOCUS_ACTION } from './focus-reducer.js';
import { DATA_ACTION } from './data-reducer.js';
import { SELECTION_ACTION } from './selection-reducer.js';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var ChipVue2 = {
  name: 'KendoVueChip',
  props: {
    id: String,
    text: String,
    avatar: {
      type: [String, Function, Object],
      default: function _default() {
        return undefined;
      }
    },
    value: [String, Object],
    dir: {
      type: String,
      default: function _default() {
        return 'ltr';
      }
    },
    removable: {
      type: Boolean,
      default: false
    },
    removeIcon: {
      type: String,
      default: function _default() {
        return 'x-circle';
      }
    },
    removeSvgIcon: {
      type: Object,
      default: function _default() {
        return xCircleIcon;
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    icon: String,
    svgIcon: Object,
    selectedIcon: {
      type: String,
      default: function _default() {
        return 'check';
      }
    },
    selectedSvgIcon: {
      type: Object,
      default: function _default() {
        return checkIcon;
      }
    },
    look: {
      type: String,
      default: function _default() {
        return 'solid';
      }
    },
    size: {
      type: String,
      default: 'medium'
    },
    rounded: {
      type: String,
      default: 'medium'
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return [null, 'flat', 'outline', 'solid'].includes(value);
      }
    },
    // eslint-disable-next-line max-len
    themeColor: {
      type: String,
      default: 'base',
      validator: function validator(value) {
        return [null, 'base', 'error', 'info', 'success', 'warning'].includes(value);
      }
    },
    dataItem: Object,
    selected: Boolean,
    ariaDescribedBy: String,
    role: {
      type: String,
      default: 'button'
    }
  },
  // @ts-ignore
  emits: {
    'click': null,
    'keydown': null,
    'blur': null,
    'focus': null,
    'remove': null
  },
  inject: {
    kendoSelection: {
      default: {
        value: null
      }
    },
    kendoFocused: {
      default: {
        value: null
      }
    },
    kendoDataItems: {
      default: null
    },
    handleDispatchDataItems: {
      default: noop
    },
    handleDispatchSelection: {
      default: noop
    },
    handleDispatchFocus: {
      default: noop
    }
  },
  created: function created() {
    this.currentDir = undefined;
    validatePackage(packageMetadata);
  },
  mounted: function mounted() {
    this.chip = getRef(this, 'chip');
    this.currentDir = this.$props.dir !== undefined ? this.$props.dir === 'rtl' : this.$el && getComputedStyle(this.$el).direction === 'rtl' || false;
  },
  updated: function updated() {
    if (this.kendoFocused.value === this.$props.value && this.$el) {
      this.$el.focus();
    }
  },
  computed: {
    currentSelected: function currentSelected() {
      var _this = this;
      return this.$props.selected || (Array.isArray(this.kendoSelection.value) ? this.kendoSelection.value.some(function (i) {
        return i === _this.$props.value;
      }) : this.kendoSelection.value === this.$props.value);
    },
    chipLabelClass: function chipLabelClass() {
      return {
        'k-chip-label': true,
        'k-text-ellipsis': true
      };
    }
  },
  methods: {
    computedFocused: function computedFocused() {
      return this.kendoFocused.value === this.$props.value;
    },
    handleClick: function handleClick(event) {
      if (this.handleDispatchSelection) {
        this.handleDispatchSelection({
          type: SELECTION_ACTION.toggle,
          payload: this.$props.value,
          event: event
        });
      }
      this.$emit('click', {
        target: this.target,
        event: event
      });
    },
    handleRemove: function handleRemove(event) {
      event.stopPropagation();
      if (!this.$props.removable) {
        return;
      }
      if (this.handleDispatchFocus) {
        this.handleDispatchDataItems({
          type: DATA_ACTION.remove,
          payload: this.$props.value,
          event: event
        });
        this.handleDispatchFocus({
          type: FOCUS_ACTION.reset,
          payload: this.$props.value,
          event: event
        });
        this.handleDispatchSelection({
          type: SELECTION_ACTION.remove,
          payload: this.$props.value,
          event: event
        });
      }
      this.$emit('remove', {
        target: this.target,
        event: event
      });
    },
    handleKeyDown: function handleKeyDown(event) {
      switch (event.keyCode) {
        case Keys.left:
          if (this.handleDispatchFocus) {
            this.handleDispatchFocus({
              type: FOCUS_ACTION.prev,
              payload: this.$props.value,
              event: event
            });
          }
          break;
        case Keys.right:
          if (this.handleDispatchFocus) {
            this.handleDispatchFocus({
              type: FOCUS_ACTION.next,
              payload: this.$props.value,
              event: event
            });
          }
          break;
        case Keys.enter:
          if (this.handleDispatchFocus) {
            this.handleDispatchSelection({
              type: SELECTION_ACTION.toggle,
              payload: this.$props.value,
              event: event
            });
          }
          break;
        case Keys.delete:
          this.handleRemove(event);
          break;
        default:
          break;
      }
      this.$emit('keydown', {
        target: this.target,
        event: event
      });
    },
    handleFocus: function handleFocus(event) {
      if (this.handleDispatchFocus) {
        this.handleDispatchFocus({
          payload: this.$props.value,
          type: FOCUS_ACTION.current,
          event: event
        });
      }
      this.$emit('focus', {
        target: this.target,
        event: event
      });
    },
    handleBlur: function handleBlur(event) {
      this.$emit('blur', {
        target: this.target,
        event: event
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var chipRef = ref(null);
    return {
      v3: v3,
      chipRef: chipRef
    };
  },
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var _b = this.$props,
      size = _b.size,
      rounded = _b.rounded,
      themeColor = _b.themeColor,
      fillMode = _b.fillMode,
      look = _b.look,
      avatar = _b.avatar,
      icon = _b.icon,
      svgIcon = _b.svgIcon,
      selectedIcon = _b.selectedIcon,
      selectedSvgIcon = _b.selectedSvgIcon,
      removeIcon = _b.removeIcon,
      removeSvgIcon = _b.removeSvgIcon;
    var avatarTemplate = templateRendering.call(this, avatar, getListeners.call(this));
    var avatarDefaultRendering = avatar ? h("div", {
      "class": "k-chip-avatar k-avatar k-rounded-".concat(avatar.rounded || 'medium', " k-avatar-").concat(kendoThemeMaps.sizeMap[size] || size, " k-avatar-solid k-avatar-solid-primary"),
      style: avatar.style
    }, [h("span", {
      "class": "k-avatar-image"
    }, [h("img", {
      src: avatar.imageUrl,
      attrs: this.v3 ? undefined : {
        src: avatar.imageUrl,
        alt: avatar.imageAlt
      },
      alt: avatar.imageAlt
    })])]) : null;
    var avatarRender = getTemplate.call(this, {
      h: h,
      template: avatarTemplate
    });
    return h("div", {
      role: this.$props.role,
      attrs: this.v3 ? undefined : {
        role: this.$props.role,
        id: this.$props.value,
        dir: this.currentDir,
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
        "aria-pressed": this.$props.role === 'button' ? this.currentSelected : undefined,
        "aria-selected": this.$props.role === 'option' ? this.currentSelected : undefined,
        "aria-disabled": this.$props.disabled,
        "aria-describedby": this.$props.ariaDescribedBy
      },
      id: this.$props.value,
      ref: setRef(this, 'chip'),
      dir: this.currentDir,
      tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
      "class": classNames('k-chip', (_a = {
        'k-rtl': this.currentDir === 'rtl',
        'k-disabled': this.$props.disabled,
        'k-selected': this.currentSelected,
        'k-focus': this.computedFocused()
      }, _a["k-chip-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a["k-chip-".concat(fillMode)] = fillMode, _a["k-chip-".concat(fillMode, "-").concat(themeColor)] = Boolean(fillMode && themeColor), _a['k-chip-outline'] = look === 'outline' || look === 'outlined', _a['k-chip-solid'] = look === 'solid' || look === 'filled', _a)),
      "aria-pressed": this.$props.role === 'button' ? this.currentSelected : undefined,
      "aria-selected": this.$props.role === 'option' ? this.currentSelected : undefined,
      "aria-disabled": this.$props.disabled,
      "aria-describedby": this.$props.ariaDescribedBy,
      onFocus: this.handleFocus,
      on: this.v3 ? undefined : {
        "focus": this.handleFocus,
        "blur": this.handleBlur,
        "click": this.handleClick,
        "keydown": this.handleKeyDown
      },
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      onKeydown: this.handleKeyDown
    }, [this.currentSelected && (selectedIcon || selectedSvgIcon) && h(Icon, {
      name: getIconName(selectedIcon),
      attrs: this.v3 ? undefined : {
        name: getIconName(selectedIcon),
        icon: selectedSvgIcon,
        size: 'small'
      },
      icon: selectedSvgIcon,
      size: 'small'
    }), (icon || svgIcon) && h(Icon, {
      name: getIconName(icon),
      attrs: this.v3 ? undefined : {
        name: getIconName(icon),
        icon: svgIcon,
        size: 'small'
      },
      icon: svgIcon,
      size: 'small'
    }), avatar ? avatar.imageUrl ? avatarDefaultRendering : avatarRender : null, h("span", {
      "class": 'k-chip-content'
    }, [this.$props.text && h("span", {
      "aria-label": this.$props.text,
      attrs: this.v3 ? undefined : {
        "aria-label": this.$props.text
      },
      "class": this.chipLabelClass
    }, [this.$props.text])]), this.$props.removable && h("span", {
      "class": "k-chip-actions"
    }, [h("span", {
      "class": "k-chip-action k-chip-remove-action"
    }, [h(Icon, {
      name: getIconName(removeIcon),
      attrs: this.v3 ? undefined : {
        name: getIconName(removeIcon),
        icon: removeSvgIcon,
        size: 'small'
      },
      icon: removeSvgIcon,
      size: 'small',
      onClick: this.handleRemove,
      on: this.v3 ? undefined : {
        "click": this.handleRemove
      }
    })])])]);
  }
};
/**
 * @hidden
 */
var Chip = ChipVue2;
export { Chip, ChipVue2 };