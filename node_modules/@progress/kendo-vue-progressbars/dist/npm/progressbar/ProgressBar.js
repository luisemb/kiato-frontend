"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressBarVue2 = exports.ProgressBar = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_animation_1 = require("@progress/kendo-vue-animation");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var utils_1 = require("../common/utils");
var constants_1 = require("../common/constants");
var kendo_vue_common_2 = require("@progress/kendo-vue-common");
var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */
var ProgressBarVue2 = {
  name: 'KendoProgressBar',
  props: {
    animation: {
      type: [Boolean, Object],
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    reverse: {
      type: Boolean,
      default: false
    },
    label: String,
    labelRender: [String, Object, Function],
    labelVisible: {
      type: Boolean,
      default: true
    },
    labelPlacement: {
      type: String,
      default: undefined,
      validator: function validator(value) {
        return ['start', 'center', 'end'].includes(value);
      }
    },
    dir: {
      type: String,
      default: undefined
    },
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    value: {
      type: Number,
      default: 0
    },
    orientation: {
      type: String,
      default: 'horizontal',
      validator: function validator(value) {
        return ['horizontal', 'vertical'].includes(value);
      }
    },
    tabIndex: Number,
    emptyStyle: Object,
    emptyClassName: String,
    progressStyle: Object,
    progressClassName: String,
    ariaLabel: String
  },
  created: function created() {
    (0, kendo_vue_common_2.validatePackage)(package_metadata_1.packageMetadata);
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted() {
    this._progressStatus = (0, kendo_vue_common_1.getRef)(this, 'progressStatus');
    this._progressStatusWrap = (0, kendo_vue_common_1.getRef)(this, 'progressStatusWrap');
    this.currentDir = this.$props.dir !== undefined ? this.$props.dir : (0, kendo_vue_common_1.isRtl)(this.$el) ? 'rtl' : 'ltr';
    this.animationFrame = (0, kendo_vue_animation_1.animate)({
      duration: this.animationDuration,
      onStart: this.handleStart,
      onUpdate: this.handleUpdate,
      onEnd: this.handleEnd
    });
  },
  destroyed: !!isV3 ? undefined : function () {
    (0, kendo_vue_animation_1.cancelAnimation)(this.animationFrame);
  },
  // @ts-ignore
  unmounted: function unmounted() {
    (0, kendo_vue_animation_1.cancelAnimation)(this.animationFrame);
  },
  data: function data() {
    return {
      currentDir: undefined
    };
  },
  watch: {
    value: function value(_newValue, oldValue) {
      this.prevValue = oldValue;
      this.animationFrame = (0, kendo_vue_animation_1.animate)({
        duration: this.animationDuration,
        onStart: this.handleStart,
        onUpdate: this.handleUpdate,
        onEnd: this.handleEnd
      });
    }
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a = this.$props,
        disabled = _a.disabled,
        reverse = _a.reverse,
        orientation = _a.orientation,
        value = _a.value;
      var isVertical = orientation === 'vertical';
      var indeterminateProp = value === null;
      return {
        'k-progressbar': true,
        'k-progressbar-horizontal': !isVertical,
        'k-progressbar-vertical': isVertical,
        'k-progressbar-reverse': reverse,
        'k-progressbar-indeterminate': indeterminateProp,
        'k-disabled': disabled
      };
    },
    isVertical: function isVertical() {
      return this.orientation === 'vertical';
    },
    animationDuration: function animationDuration() {
      var animation = this.$props.animation;
      return typeof animation !== 'boolean' && animation !== undefined ? animation.duration : animation ? constants_1.DEFAULT_ANIMATION_DURATION : constants_1.NO_ANIMATION;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      disabled = _a.disabled,
      labelVisible = _a.labelVisible,
      labelPlacement = _a.labelPlacement,
      max = _a.max,
      min = _a.min,
      tabIndex = _a.tabIndex,
      emptyStyle = _a.emptyStyle,
      emptyClassName = _a.emptyClassName,
      progressStyle = _a.progressStyle,
      progressClassName = _a.progressClassName;
    var value = this.$props.value || 0;
    var indeterminateProp = this.$props.value === null;
    var formattedLabel = (0, utils_1.truncateNumber)(value);
    var labelProps = {
      value: value
    };
    var label = this.$props.labelRender ? kendo_vue_common_1.templateRendering.call(this, this.$props.labelRender, kendo_vue_common_1.getListeners.call(this)) : undefined;
    var labelDefaultRendering = h('span', {
      'class': 'k-progress-status'
    }, formattedLabel);
    var toggleButtonRendering = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: label,
      defaultRendering: labelDefaultRendering,
      additionalProps: labelProps
    });
    var renderLabel = labelVisible ? this.$props.label ? h("span", {
      "class": 'k-progress-status'
    }, [this.$props.label]) : toggleButtonRendering : undefined;
    var positionClasses = (0, kendo_vue_common_1.classNames)('k-progress-status-wrap', {
      'k-progress-start': labelPlacement === 'start',
      'k-progress-center': labelPlacement === 'center',
      'k-progress-end': labelPlacement === 'end' || labelPlacement === undefined
    });
    return h("div", {
      "class": this.wrapperClass,
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir,
        tabindex: (0, kendo_vue_common_1.getTabIndex)(tabIndex, disabled),
        role: 'progressbar',
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": indeterminateProp ? undefined : value,
        "aria-disabled": disabled,
        "aria-label": this.$props.ariaLabel
      },
      tabindex: (0, kendo_vue_common_1.getTabIndex)(tabIndex, disabled),
      role: 'progressbar',
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": indeterminateProp ? undefined : value,
      "aria-disabled": disabled,
      "aria-label": this.$props.ariaLabel
    }, [h("span", {
      "class": positionClasses + (emptyClassName ? ' ' + emptyClassName : ''),
      style: emptyStyle
    }, [renderLabel]), h("div", {
      "class": 'k-progressbar-value k-selected',
      style: progressStyle,
      ref: (0, kendo_vue_common_1.setRef)(this, 'progressStatus')
    }, [h("span", {
      "class": positionClasses + (progressClassName ? ' ' + progressClassName : ''),
      ref: (0, kendo_vue_common_1.setRef)(this, 'progressStatusWrap')
    }, [renderLabel])])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    progressStatusElement: function progressStatusElement() {
      return this._progressStatus;
    },
    progressStatusWrapElement: function progressStatusWrapElement() {
      return this._progressStatusWrap;
    },
    handleStart: function handleStart() {
      var percentage = (0, utils_1.calculatePercentage)(this.min, this.max, this.prevValue);
      (0, utils_1.updateProgress)(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    },
    handleUpdate: function handleUpdate(progress) {
      var percentage = (0, utils_1.calculatePercentage)(this.min, this.max, this.prevValue + (this.value - this.prevValue) * progress);
      (0, utils_1.updateProgress)(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    },
    handleEnd: function handleEnd() {
      var percentage = (0, utils_1.calculatePercentage)(this.min, this.max, this.value);
      (0, utils_1.updateProgress)(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    }
  }
};
exports.ProgressBarVue2 = ProgressBarVue2;
/**
 * @hidden
 */
var ProgressBar = ProgressBarVue2;
exports.ProgressBar = ProgressBar;