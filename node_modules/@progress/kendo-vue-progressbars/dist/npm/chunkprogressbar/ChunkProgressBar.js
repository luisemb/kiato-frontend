"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChunkProgressBarVue2 = exports.ChunkProgressBar = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var utils_1 = require("../common/utils");
var kendo_vue_common_2 = require("@progress/kendo-vue-common");
var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */
var ChunkProgressBarVue2 = {
  name: 'KendoChunkProgressBar',
  props: {
    chunkCount: {
      type: Number,
      default: 5
    },
    ariaLabel: String,
    disabled: Boolean,
    reverse: {
      type: Boolean,
      default: false
    },
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    value: {
      type: Number,
      default: 0
    },
    tabIndex: Number,
    emptyStyle: Object,
    emptyClassName: String,
    progressStyle: Object,
    progressClassName: String,
    orientation: {
      type: String,
      default: 'horizontal',
      validator: function validator(value) {
        return ['horizontal', 'vertical'].includes(value);
      }
    }
  },
  created: function created() {
    (0, kendo_vue_common_2.validatePackage)(package_metadata_1.packageMetadata);
  },
  data: function data() {
    return {
      currentDir: undefined
    };
  },
  mounted: function mounted() {
    this.currentDir = (0, kendo_vue_common_1.getDir)(this.$el, this.$props.dir);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      chunkCount = _a.chunkCount,
      disabled = _a.disabled,
      orientation = _a.orientation,
      min = _a.min,
      max = _a.max,
      reverse = _a.reverse,
      tabIndex = _a.tabIndex,
      emptyStyle = _a.emptyStyle,
      emptyClassName = _a.emptyClassName,
      progressStyle = _a.progressStyle,
      progressClassName = _a.progressClassName;
    var value = this.$props.value;
    var indeterminateProp = this.$props.value === null;
    var isVertical = orientation === 'vertical';
    var renderChunks = function renderChunks(count) {
      var chunks = [];
      var chunkSizePercentage = 100 / count + '%';
      var progressRatio = (0, utils_1.calculateRatio)(min, max, value);
      var completedChunksCount = Math.floor(progressRatio * count);
      var completedChunks = Array(count).fill(false);
      var reverseCompletedChunks = isVertical && !reverse || !isVertical && reverse;
      for (var i = 0; i < completedChunksCount; i++) {
        completedChunks[i] = true;
      }
      for (var i = 0; i < count; ++i) {
        var isComplete = completedChunks[i];
        var classes = isComplete ? progressClassName : emptyClassName;
        var layoutStyles = {
          width: !isVertical ? chunkSizePercentage : undefined,
          height: isVertical ? chunkSizePercentage : undefined
        };
        var styles = isComplete ? progressStyle : emptyStyle;
        var mergedStyles = __assign(__assign({}, layoutStyles), styles);
        chunks.push(h("li", {
          key: i,
          "class": (0, kendo_vue_common_1.classNames)('k-progressbar-chunk', {
            'k-first': i === 0,
            'k-last': i === count - 1,
            'k-selected': isComplete
          }, classes),
          style: mergedStyles
        }));
      }
      return chunks;
    };
    return h("div", {
      "class": (0, kendo_vue_common_1.classNames)('k-progressbar', 'k-chunk-progressbar', {
        'k-progressbar-horizontal': !isVertical,
        'k-progressbar-vertical': isVertical,
        'k-progressbar-reverse': reverse,
        'k-progressbar-indeterminate': indeterminateProp,
        'k-disabled': disabled
      }),
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir,
        tabIndex: (0, kendo_vue_common_1.getTabIndex)(tabIndex, disabled),
        role: 'progressbar',
        "aria-label": this.$props.ariaLabel,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": indeterminateProp ? undefined : value,
        "aria-disabled": disabled
      },
      tabIndex: (0, kendo_vue_common_1.getTabIndex)(tabIndex, disabled),
      role: 'progressbar',
      "aria-label": this.$props.ariaLabel,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": indeterminateProp ? undefined : value,
      "aria-disabled": disabled
    }, [h("ul", {
      "class": 'k-progressbar-chunks k-reset'
    }, [renderChunks.call(this, chunkCount)])]);
  },
  methods: {
    focusElement: function focusElement() {
      if (this.$el) {
        this.$el.focus();
      }
    }
  }
};
exports.ChunkProgressBarVue2 = ChunkProgressBarVue2;
/**
 * @hidden
 */
var ChunkProgressBar = ChunkProgressBarVue2;
exports.ChunkProgressBar = ChunkProgressBar;