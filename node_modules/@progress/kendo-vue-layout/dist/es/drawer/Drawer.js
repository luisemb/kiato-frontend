// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { DrawerNavigation } from './DrawerNavigation';
import { getDir, validatePackage, shouldShowValidationUI, getDefaultSlots, templateRendering, getListeners } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata';
/**
 * @hidden
 */
var DrawerVue2 = {
  name: 'KendoDrawer',
  // @ts-ignore
  emits: {
    select: null,
    overlayclick: null
  },
  props: {
    animation: {
      type: [Object, Boolean],
      default: true
    },
    expanded: {
      type: Boolean,
      default: false
    },
    dir: {
      type: String,
      default: 'ltr'
    },
    item: [String, Object, Function],
    mode: {
      type: String,
      default: 'overlay',
      validator: function validator(value) {
        return ['overlay', 'push'].includes(value);
      }
    },
    position: {
      type: String,
      default: 'start',
      validator: function validator(value) {
        return ['start', 'end'].includes(value);
      }
    },
    items: Array,
    mini: {
      type: Boolean,
      default: false
    },
    tabIndex: Number,
    width: {
      type: Number,
      default: 240
    },
    miniWidth: {
      type: Number,
      default: 50
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.showLicenseWatermark = shouldShowValidationUI(packageMetadata);
  },
  data: function data() {
    var _a = this.$props,
      expanded = _a.expanded,
      mode = _a.mode,
      position = _a.position,
      animation = _a.animation,
      mini = _a.mini,
      width = _a.width,
      miniWidth = _a.miniWidth,
      items = _a.items,
      item = _a.item;
    var itemRender = item ? templateRendering.call(this, item, getListeners.call(this)) : undefined;
    return {
      currentDir: 'ltr',
      drawer: {
        expanded: expanded,
        mode: mode,
        dir: this.currentDir,
        position: position,
        animation: animation,
        mini: mini,
        width: width,
        miniWidth: miniWidth,
        items: items,
        item: itemRender
      },
      showLicenseWatermark: false
    };
  },
  mounted: function mounted() {
    this.currentDir = getDir(this.$el, this.$props.dir);
  },
  updated: function updated() {
    var _a = this.$props,
      expanded = _a.expanded,
      mode = _a.mode,
      position = _a.position,
      animation = _a.animation,
      mini = _a.mini,
      width = _a.width,
      miniWidth = _a.miniWidth,
      items = _a.items,
      item = _a.item;
    var itemRender = item ? templateRendering.call(this, item, getListeners.call(this)) : undefined;
    this.drawer.expanded = expanded;
    this.drawer.mode = mode;
    this.drawer.dir = this.currentDir;
    this.drawer.position = position;
    this.drawer.animation = animation;
    this.drawer.mini = mini;
    this.drawer.width = width;
    this.drawer.miniWidth = miniWidth;
    this.drawer.items = items;
    this.drawer.item = itemRender;
  },
  provide: function provide() {
    return {
      kendoDrawer: this.drawer
    };
  },
  computed: {
    drawerClassNames: function drawerClassNames() {
      var _a = this.$props,
        expanded = _a.expanded,
        mode = _a.mode,
        mini = _a.mini;
      return {
        'k-drawer-container': true,
        'k-drawer-expanded': expanded,
        'k-drawer-overlay': mode === 'overlay',
        'k-drawer-push': mode === 'push',
        'k-drawer-mini': mini
      };
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
      items = _a.items,
      tabIndex = _a.tabIndex,
      mode = _a.mode,
      expanded = _a.expanded,
      item = _a.item;
    var itemRender = item ? templateRendering.call(this, item, getListeners.call(this)) : undefined;
    return h("div", {
      "class": this.drawerClassNames,
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir,
        tabindex: tabIndex
      },
      tabindex: tabIndex
    }, [mode === 'overlay' && expanded && h("div", {
      "class": "k-overlay",
      onClick: this.onOverlayClick,
      on: this.v3 ? undefined : {
        "click": this.onOverlayClick
      }
    }), items &&
    // @ts-ignore
    h(DrawerNavigation, {
      onSelect: this.handleSelect,
      on: this.v3 ? undefined : {
        "select": this.handleSelect
      },
      item: itemRender,
      attrs: this.v3 ? undefined : {
        item: itemRender,
        showLicenseWatermark: this.showLicenseWatermark
      },
      showLicenseWatermark: this.showLicenseWatermark
    }), defaultSlot]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    handleSelect: function handleSelect(itemTarget, itemIndex) {
      if (this.$props.items) {
        this.$emit('select', {
          itemTarget: itemTarget,
          itemIndex: itemIndex,
          component: this
        });
      }
    },
    onOverlayClick: function onOverlayClick(e) {
      this.$emit('overlayclick', e);
    }
  }
};
/**
 * @hidden
 */
var Drawer = DrawerVue2;
export { Drawer, DrawerVue2 };