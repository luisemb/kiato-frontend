var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { classNames, getTemplate, Icon } from '@progress/kendo-vue-common';
import { chevronUpIcon, chevronDownIcon } from '@progress/kendo-svg-icons';
import { PanelBarGroup } from './PanelBarGroup';
/**
 * @hidden
 */
var PanelBarItemVue2 = {
  name: 'KendoPanelBarItem',
  props: {
    item: Object,
    items: Array,
    animation: Boolean,
    expanded: Boolean,
    disabled: Boolean,
    selected: Boolean,
    level: Number,
    title: {
      type: [String, Object, Function],
      default: function _default() {
        return 'Untitled';
      }
    },
    id: [String, Number],
    focused: Boolean,
    keepItemsMounted: Boolean,
    uniquePrivateKey: [String, Number],
    parentUniquePrivateKey: Array,
    parentExpanded: Boolean,
    headerClassName: String,
    iconClass: String,
    imageUrl: String,
    icon: String,
    svgIcon: Object,
    content: Object,
    header: Object
  },
  inject: {
    dispatchItemSelect: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var _b = this.$props,
      id = _b.id,
      item = _b.item,
      icon = _b.icon,
      svgIcon = _b.svgIcon,
      items = _b.items,
      content = _b.content,
      title = _b.title,
      uniquePrivateKey = _b.uniquePrivateKey,
      disabled = _b.disabled,
      selected = _b.selected,
      focused = _b.focused,
      expanded = _b.expanded,
      className = _b.className,
      level = _b.level,
      headerClassName = _b.headerClassName,
      animation = _b.animation,
      keepItemsMounted = _b.keepItemsMounted;
    var hasContent = !!items || content;
    var panelBarItemClassName = classNames('k-panelbar-item', {
      'k-panelbar-header': level === 0,
      'k-panelbar-item': level !== 0,
      'k-expanded': expanded && hasContent,
      'k-disabled': disabled
    }, "k-level-".concat(level), className);
    var panelBarLinkClassName = classNames('k-link', {
      'k-selected': !disabled && selected,
      'k-focus': focused
    }, headerClassName);
    var panelBarItemArrowClassName = classNames('k-panelbar-toggle', (_a = {}, _a['k-panelbar-collapse'] = expanded && hasContent, _a['k-panelbar-expand'] = !expanded && hasContent, _a));
    var itemIconName = expanded ? 'chevron-up' : 'chevron-down';
    var itemIconSVG = expanded ? chevronUpIcon : chevronDownIcon;
    var iconElement = function iconElement() {
      if (this.imageUrl) {
        return h("img", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation",
            src: this.imageUrl
          },
          "class": 'k-panelbar-item-icon k-image',
          src: this.imageUrl
        });
      } else if (icon || svgIcon) {
        return h(Icon, {
          name: icon,
          attrs: this.v3 ? undefined : {
            name: icon,
            icon: svgIcon
          },
          "class": 'k-panelbar-item-icon',
          icon: svgIcon
        });
      } else if (this.iconClass) {
        return h(Icon, {
          "class": 'k-panelbar-item-icon ' + this.iconClass
        });
      }
      return null;
    };
    var iconRender = iconElement.call(this);
    var arrow = !disabled && (items || content) ? h(Icon, {
      name: itemIconName,
      attrs: this.v3 ? undefined : {
        name: itemIconName,
        icon: itemIconSVG
      },
      icon: itemIconSVG,
      "class": panelBarItemArrowClassName
    }) : null;
    var group = items || content ? h(PanelBarGroup, {
      items: items,
      attrs: this.v3 ? undefined : {
        items: items,
        item: item,
        content: content,
        uniquePrivateKey: uniquePrivateKey,
        disabled: disabled,
        expanded: expanded,
        animation: animation,
        keepItemsMounted: keepItemsMounted
      },
      item: item,
      content: content,
      uniquePrivateKey: uniquePrivateKey,
      disabled: disabled,
      expanded: expanded,
      animation: animation,
      keepItemsMounted: keepItemsMounted
    }) : null;
    var header = getTemplate.call(this, {
      h: h,
      template: this.$props.header,
      defaultRendering: null,
      additionalProps: __assign({}, this.$props)
    });
    return h("li", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        role: 'treeitem',
        "aria-disabled": disabled,
        "aria-hidden": !disabled && !expanded,
        "aria-selected": !disabled && selected,
        "aria-expanded": !disabled && expanded && hasContent
      },
      "class": panelBarItemClassName,
      role: 'treeitem',
      "aria-disabled": disabled,
      "aria-hidden": !disabled && !expanded,
      "aria-selected": !disabled && selected,
      "aria-expanded": !disabled && expanded && hasContent
    }, [h("span", {
      "class": panelBarLinkClassName,
      onClick: this.handleItemClick,
      on: this.v3 ? undefined : {
        "click": this.handleItemClick
      }
    }, [iconRender, this.$props.header ? header : h("span", {
      "class": 'k-panelbar-item-text'
    }, [title]), arrow]), group]);
  },
  methods: {
    handleItemClick: function handleItemClick() {
      var _a = this.$props,
        disabled = _a.disabled,
        id = _a.id;
      if (!disabled) {
        this.dispatchItemSelect({
          uniquePrivateKey: this.$props.uniquePrivateKey,
          id: id,
          target: this
        });
      }
    },
    childFactory: function childFactory(child) {
      return child;
    }
  }
};
/**
 * @hidden
 */
var PanelBarItem = PanelBarItemVue2;
export { PanelBarItem, PanelBarItemVue2 };