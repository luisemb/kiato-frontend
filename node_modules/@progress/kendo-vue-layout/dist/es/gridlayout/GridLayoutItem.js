// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { packageMetadata } from '../package-metadata';
import { getTemplate, guid, validatePackage } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var GridLayoutItemVue2 = {
  name: 'KendoGridLayoutItem',
  props: {
    content: [String, Function, Object],
    id: String,
    col: Number,
    colSpan: Number,
    row: Number,
    rowSpan: Number
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.itemId = guid();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  computed: {
    gridLayoutItemStyles: function gridLayoutItemStyles() {
      var _a = this.$props,
        row = _a.row,
        col = _a.col,
        rowSpan = _a.rowSpan,
        colSpan = _a.colSpan;
      return {
        gridArea: "".concat(row || 'auto', " / ").concat(col || 'auto', " / ").concat(rowSpan ? 'span ' + rowSpan : 'auto', " / ").concat(colSpan ? 'span ' + colSpan : 'auto')
      };
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      id = _a.id,
      content = _a.content;
    var contentToRender = getTemplate.call(this, {
      h: h,
      template: content
    });
    return h("div", {
      style: this.gridLayoutItemStyles,
      id: id || this.itemId,
      attrs: this.v3 ? undefined : {
        id: id || this.itemId
      }
    }, [contentToRender]);
  }
};
/**
 * @hidden
 */
var GridLayoutItem = GridLayoutItemVue2;
export { GridLayoutItem, GridLayoutItemVue2 };