// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { packageMetadata } from '../package-metadata';
import { getListeners, guid, templateRendering, validatePackage } from '@progress/kendo-vue-common';
import { GridLayoutItem } from './GridLayoutItem';
/**
 * @hidden
 */
var GridLayoutVue2 = {
  name: 'KendoGridLayout',
  props: {
    id: String,
    gap: {
      type: Object
    },
    align: {
      type: Object,
      validator: function validator(value) {
        return ['top', 'middle', 'bottom', 'stretch', undefined].includes(value.vertical) && ['start', 'center', 'end', 'stretch', undefined].includes(value.horizontal);
      }
    },
    rows: Array,
    cols: Array,
    items: Array
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.layoutId = guid();
  },
  computed: {
    hAlign: function hAlign() {
      return this.$props.align && this.$props.align.horizontal ? this.$props.align.horizontal : 'stretch';
    },
    vAlign: function vAlign() {
      return this.$props.align && this.$props.align.vertical ? this.$props.align.vertical : 'stretch';
    },
    gridLayoutClasses: function gridLayoutClasses() {
      return {
        'k-grid-layout': true,
        'k-justify-items-start': this.hAlign === 'start',
        'k-justify-items-center': this.hAlign === 'center',
        'k-justify-items-end': this.hAlign === 'end',
        'k-justify-items-stretch': this.hAlign === 'stretch',
        'k-align-items-start': this.vAlign === 'top',
        'k-align-items-center': this.vAlign === 'middle',
        'k-align-items-end': this.vAlign === 'bottom',
        'k-align-items-stretch': this.vAlign === 'stretch'
      };
    },
    gapStyle: function gapStyle() {
      return this.gap ? "".concat(typeof this.gap.rows === 'number' ? this.gap.rows + 'px' : this.gap.rows) + ' ' + "".concat(typeof this.gap.cols === 'number' ? this.gap.cols + 'px' : this.gap.cols) : undefined;
    },
    gridTemplateRowsStyle: function gridTemplateRowsStyle() {
      return this.$props.rows && this.$props.rows.map(function (row) {
        return "".concat(typeof row.height === 'number' ? row.height + 'px' : row.height);
      }).join(' ');
    },
    gridTemplateColumnsStyle: function gridTemplateColumnsStyle() {
      return this.$props.cols && this.$props.cols.map(function (col) {
        return "".concat(typeof col.width === 'number' ? col.width + 'px' : col.width);
      }).join(' ');
    },
    gridLayoutStyles: function gridLayoutStyles() {
      return {
        gap: this.gapStyle,
        gridTemplateColumns: this.gridTemplateColumnsStyle,
        gridTemplateRows: this.gridTemplateRowsStyle
      };
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      id = _a.id,
      items = _a.items;
    return h("div", {
      "class": this.gridLayoutClasses,
      style: this.gridLayoutStyles,
      id: id || this.layoutId,
      attrs: this.v3 ? undefined : {
        id: id || this.layoutId
      }
    }, [items.map(function (item) {
      var contentTemplate = templateRendering.call(this, item.content, getListeners.call(this));
      return (
        // @ts-ignore
        h(GridLayoutItem, {
          content: contentTemplate,
          attrs: this.v3 ? undefined : {
            content: contentTemplate,
            id: item.id,
            col: item.col,
            colSpan: item.colSpan,
            row: item.row,
            rowSpan: item.rowSpan
          },
          "class": item.class,
          style: item.style,
          id: item.id,
          col: item.col,
          colSpan: item.colSpan,
          row: item.row,
          rowSpan: item.rowSpan
        })
      );
    }, this)]);
  }
};
/**
 * Represents the Object which is passed to
 * callback of the GridLayout component.
 */
var GridLayout = GridLayoutVue2;
export { GridLayout, GridLayoutVue2 };