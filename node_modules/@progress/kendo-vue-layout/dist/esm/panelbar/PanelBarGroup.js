var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Reveal } from '@progress/kendo-vue-animation';
import { getTemplate } from '@progress/kendo-vue-common';
import { PanelBarItem } from './PanelBarItem.js';
/**
 * @hidden
 */
var PanelBarGroupVue2 = {
  name: 'KendoPanelBarGroup',
  props: {
    item: Object,
    items: Array,
    animation: Boolean,
    expanded: Boolean,
    disabled: Boolean,
    keepItemsMounted: Boolean,
    uniquePrivateKey: [String, Number],
    content: Object
  },
  data: function data() {
    return {
      show: this.$props.expanded
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      item = _a.item,
      items = _a.items,
      uniquePrivateKey = _a.uniquePrivateKey,
      disabled = _a.disabled,
      expanded = _a.expanded,
      animation = _a.animation,
      keepItemsMounted = _a.keepItemsMounted;
    var animationStyle = {
      display: 'block'
    };
    var content = getTemplate.call(this, {
      h: h,
      template: this.$props.content,
      defaultRendering: null,
      additionalProps: __assign(__assign({}, this.$props), {
        show: this.show
      })
    });
    var opened = !disabled && expanded;
    var itemContent = opened || keepItemsMounted ? items ? h("ul", {
      role: "group",
      attrs: this.v3 ? undefined : {
        role: "group"
      },
      "class": "k-panelbar-group k-panel k-group",
      style: {
        display: keepItemsMounted ? this.$data.show ? 'block' : 'none' : 'block'
      }
    }, [items.map(function (currentItem) {
      return h(PanelBarItem, __assign(__assign({
        props: this.v3 ? undefined : __assign(__assign({}, currentItem), {
          item: item
        })
      }, currentItem), {
        item: item
      }));
    }, this)]) : this.$props.content ? h("div", {
      "class": "k-panelbar-content k-content"
    }, [content]) : null : null;
    return (animation !== undefined ? animation : true) && !disabled ?
    // @ts-ignore  function children
    h(Reveal, {
      appear: opened,
      attrs: this.v3 ? undefined : {
        appear: opened,
        transitionEnterDuration: 200,
        transitionExitDuration: 200,
        //   childFactory={keepItemsMounted && this.childFactory}
        unmountOnExit: !keepItemsMounted
      },
      transitionEnterDuration: 200,
      transitionExitDuration: 200,
      key: uniquePrivateKey + '_animation',
      style: animationStyle,
      unmountOnExit: !keepItemsMounted,
      onEntering: this.handleEntering,
      on: this.v3 ? undefined : {
        "entering": this.handleEntering,
        "exited": this.handleExited
      },
      onExited: this.handleExited
    }, this.v3 ? function () {
      return [itemContent];
    } : [itemContent]) : itemContent;
  },
  methods: {
    handleEntering: function handleEntering() {
      if (this.keepItemsMounted) {
        this.show = true;
      }
    },
    handleExited: function handleExited() {
      if (this.keepItemsMounted) {
        this.show = false;
      }
    }
  }
};
/**
 * @hidden
 */
var PanelBarGroup = PanelBarGroupVue2;
export { PanelBarGroup, PanelBarGroupVue2 };