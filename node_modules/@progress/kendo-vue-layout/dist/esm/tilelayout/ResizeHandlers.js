var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Draggable } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var ResizeHandlersVue2 = {
  name: 'KendoResizeHandlers',
  props: {
    direction: String,
    rtl: Boolean
  },
  computed: {
    handleClass: function handleClass() {
      return 'k-resize-handle k-cursor-' + this.direction + '-resize';
    },
    dirStyles: function dirStyles() {
      var direction = this.$props.direction;
      switch (direction) {
        case 'ew':
          return this.rtl ? {
            top: 0,
            width: '9px',
            left: 0,
            right: ''
          } : {
            top: 0,
            width: '9px',
            right: 0,
            left: ''
          };
        case 'ns':
          return {
            left: 0,
            height: '9px'
          };
        case 'nesw':
        case 'nwse':
          return this.rtl ? {
            width: '9px',
            height: '9px',
            right: '',
            left: 0
          } : {
            width: '9px',
            height: '9px',
            right: 0,
            left: ''
          };
        default:
          return {};
      }
    },
    handleStyle: function handleStyle() {
      return __assign({
        bottom: 0,
        right: 0
      }, this.dirStyles);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh || createElement;
    var direction = this.$props.direction;
    return (
      // @ts-ignore function children
      h(Draggable, {
        onPress: this.handlePress,
        on: this.v3 ? undefined : {
          "press": this.handlePress,
          "drag": function drag(event) {
            _this.handleResize(event, false, direction);
          },
          "release": function release(event) {
            _this.handleResize(event, true, direction);
          }
        },
        onDrag: function drag(event) {
          _this.handleResize(event, false, direction);
        },
        onRelease: function release(event) {
          _this.handleResize(event, true, direction);
        }
      }, this.v3 ? function () {
        return [h("div", {
          "class": _this2.handleClass,
          style: _this2.handleStyle
        })];
      } : [h("div", {
        "class": _this2.handleClass,
        style: _this2.handleStyle
      })])
    );
  },
  methods: {
    handleResize: function handleResize(event, isEnd, direction) {
      event.originalEvent.preventDefault();
      this.$emit('resize', event, {
        end: isEnd,
        direction: direction
      });
    },
    handlePress: function handlePress(event) {
      this.$emit('press', event);
    }
  }
};
/**
 * @hidden
 */
var ResizeHandlers = ResizeHandlersVue2;
export { ResizeHandlers, ResizeHandlersVue2 };