// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getTabIndex, validatePackage, Keys, getDefaultSlots, templateRendering, getListeners, getTemplate, Icon, getIconName } from '@progress/kendo-vue-common';
import { chevronUpIcon, chevronDownIcon } from '@progress/kendo-svg-icons';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var ExpansionPanelVue2 = {
  name: 'KendoExpansionPanel',
  props: {
    dir: String,
    id: String,
    tabIndex: Number,
    title: String,
    subtitle: String,
    titleRender: [String, Object, Function],
    subtitleRender: [String, Object, Function],
    expandIcon: String,
    expandSvgIcon: Object,
    collapseIcon: String,
    collapseSvgIcon: Object,
    expanded: Boolean,
    disabled: Boolean
  },
  created: function created() {
    validatePackage(packageMetadata);
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a = this.$props,
        expanded = _a.expanded,
        disabled = _a.disabled;
      return {
        'k-expander': true,
        'k-expanded': expanded,
        'k-focus': this.focused && !disabled,
        'k-disabled': disabled
      };
    },
    expandIconName: function expandIconName() {
      var _a = this.$props,
        expanded = _a.expanded,
        expandIcon = _a.expandIcon,
        collapseIcon = _a.collapseIcon;
      return expanded ? expandIcon ? getIconName(expandIcon) : 'chevron-up' : collapseIcon ? getIconName(collapseIcon) : 'chevron-down';
    },
    expandSVGIcon: function expandSVGIcon() {
      var _a = this.$props,
        expanded = _a.expanded,
        expandSvgIcon = _a.expandSvgIcon,
        collapseSvgIcon = _a.collapseSvgIcon;
      return expanded ? expandSvgIcon || chevronUpIcon : collapseSvgIcon || chevronDownIcon;
    }
  },
  data: function data() {
    return {
      focused: false
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var _a = this.$props,
      _b = _a.expanded,
      expanded = _b === void 0 ? false : _b,
      disabled = _a.disabled,
      title = _a.title,
      titleRender = _a.titleRender,
      subtitle = _a.subtitle,
      subtitleRender = _a.subtitleRender,
      ariaControls = _a.ariaControls,
      tabIndex = _a.tabIndex,
      id = _a.id;
    var titleTemplate = templateRendering.call(this, titleRender, getListeners.call(this));
    var titleToRender = getTemplate.call(this, {
      h: h,
      template: titleTemplate,
      defaultRendering: h("div", {
        "class": "k-expander-title"
      }, [title])
    });
    var subtitleTemplate = templateRendering.call(this, subtitleRender, getListeners.call(this));
    var subtitleToRender = getTemplate.call(this, {
      h: h,
      template: subtitleTemplate,
      defaultRendering: h("div", {
        "class": "k-expander-sub-title"
      }, [subtitle])
    });
    return h("div", {
      "class": this.wrapperClass,
      onFocusin: this.handleFocus,
      on: this.v3 ? undefined : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur,
        "keydown": this.onKeyDown
      },
      onFocusout: this.handleBlur,
      id: id
      // dir={useRtl(elementRef, dir)}
      ,
      attrs: this.v3 ? undefined : {
        id: id
      },
      onKeydown: this.onKeyDown
    }, [h("div", {
      role: 'button',
      attrs: this.v3 ? undefined : {
        role: 'button',
        "aria-controls": ariaControls,
        "aria-expanded": expanded,
        "aria-disabled": disabled,
        tabIndex: getTabIndex(tabIndex, disabled)
      },
      ref: 'header',
      "aria-controls": ariaControls,
      "aria-expanded": expanded,
      "aria-disabled": disabled,
      tabIndex: getTabIndex(tabIndex, disabled),
      "class": "k-expander-header",
      onClick: this.onClick,
      on: this.v3 ? undefined : {
        "click": this.onClick
      }
    }, [titleToRender, h("span", {
      "class": "k-spacer"
    }), subtitleToRender, h("span", {
      "class": "k-expander-indicator"
    }, [h(Icon, {
      name: this.expandIconName,
      attrs: this.v3 ? undefined : {
        name: this.expandIconName,
        icon: this.expandSVGIcon
      },
      icon: this.expandSVGIcon
    })])]), defaultSlots]);
  },
  methods: {
    onClick: function onClick(event) {
      if (this.$props.disabled) {
        return;
      }
      this.$emit('action', {
        event: event,
        expanded: this.expanded
      });
    },
    onKeyDown: function onKeyDown(event) {
      if (this.$props.disabled) {
        return;
      }
      if ((event.keyCode === Keys.enter || event.keyCode === Keys.space) && event.target === this.$refs.header) {
        event.preventDefault();
        this.$emit('action', {
          event: event,
          expanded: this.expanded
        });
      }
    },
    handleFocus: function handleFocus() {
      if (this.$props.disabled) {
        return;
      }
      this.focused = true;
    },
    handleBlur: function handleBlur() {
      if (this.$props.disabled) {
        return;
      }
      this.focused = false;
    }
  }
};
/**
 * @hidden
 */
var ExpansionPanel = ExpansionPanelVue2;
export { ExpansionPanel, ExpansionPanelVue2 };