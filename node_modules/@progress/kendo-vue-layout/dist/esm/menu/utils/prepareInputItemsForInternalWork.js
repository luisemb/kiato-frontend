import { templateRendering, getListeners } from '@progress/kendo-vue-common';
import { createId, ZERO_LEVEL_ZERO_ITEM_ID } from './itemsIdsUtils.js';
/**
 * @hidden
 */
export function prepareInputItemsForInternalWork(models) {
    if (models && models.length > 0) {
        return {
            items: convertInputModelsToInternalOnesHelper.call(this, models),
            inputItems: models
        };
    }
    else {
        return { items: [], inputItems: [] };
    }
}
function copyInputItemWithoutChildren(inputModel) {
    var result = {};
    var text = inputModel.text, url = inputModel.url, icon = inputModel.icon, svgIcon = inputModel.svgIcon, disabled = inputModel.disabled, cssClass = inputModel.cssClass, popupClass = inputModel.popupClass, cssStyle = inputModel.cssStyle, render = inputModel.render, linkRender = inputModel.linkRender, contentRender = inputModel.contentRender, data = inputModel.data;
    if (text !== undefined) {
        result.text = text;
    }
    if (url !== undefined) {
        result.url = url;
    }
    if (icon !== undefined) {
        result.icon = icon;
    }
    if (svgIcon !== undefined) {
        result.svgIcon = svgIcon;
    }
    if (disabled !== undefined) {
        result.disabled = disabled;
    }
    if (cssClass !== undefined) {
        result.cssClass = cssClass;
    }
    if (popupClass !== undefined) {
        result.popupClass = popupClass;
    }
    if (cssStyle !== undefined) {
        result.cssStyle = cssStyle;
    }
    if (render !== undefined) {
        result.render = templateRendering.call(this, render, getListeners.call(this));
    }
    if (linkRender !== undefined) {
        result.linkRender = templateRendering.call(this, linkRender, getListeners.call(this));
    }
    if (contentRender !== undefined) {
        result.contentRender = templateRendering.call(this, contentRender, getListeners.call(this));
    }
    if (data !== undefined) {
        result.data = data;
    }
    return result;
}
function convertInputModelsToInternalOnesHelper(inputModels, parentId) {
    var result = [];
    for (var index = 0; index < inputModels.length; index++) {
        var inputModel = inputModels[index];
        var internalModel = copyInputItemWithoutChildren.call(this, inputModel);
        internalModel.id = createId(index.toString(), parentId);
        internalModel.isLastFromSiblings = index === inputModels.length - 1;
        internalModel.items = copyOrCreateModelChildren.call(this, inputModel, internalModel);
        result.push(internalModel);
    }
    return result;
}
function copyOrCreateModelChildren(inputModel, internalModel) {
    if (inputModel.contentRender) {
        return [{
                contentParentItemId: internalModel.id,
                id: createId(ZERO_LEVEL_ZERO_ITEM_ID, internalModel.id),
                isLastFromSiblings: true,
                contentRender: templateRendering.call(this, inputModel.contentRender, getListeners.call(this)),
                items: []
            }];
    }
    else if (inputModel.items) {
        return convertInputModelsToInternalOnesHelper.call(this, inputModel.items, internalModel.id);
    }
    else {
        return [];
    }
}
