// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { focusFirstFocusableChild, getDefaultSlots, guid, validatePackage } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var AppBarVue2 = {
  name: 'KendoAppBar',
  props: {
    id: String,
    themeColor: {
      type: String,
      default: 'light'
    },
    position: {
      type: String,
      default: 'top',
      validator: function validator(value) {
        return ['top', 'bottom'].includes(value);
      }
    },
    positionMode: {
      type: String,
      default: 'static',
      validator: function validator(value) {
        return ['static', 'sticky', 'fixed'].includes(value);
      }
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.calculatedId = guid();
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a = this.$props,
        position = _a.position,
        positionMode = _a.positionMode,
        themeColor = _a.themeColor;
      return {
        'k-appbar': true,
        'k-appbar-top': position === 'top',
        'k-appbar-bottom': position === 'bottom',
        'k-appbar-static': positionMode === 'static',
        'k-appbar-sticky': positionMode === 'sticky',
        'k-appbar-fixed': positionMode === 'fixed',
        'k-appbar-light': themeColor === 'light',
        'k-appbar-dark': themeColor === 'dark',
        'k-appbar-inherit': themeColor === 'inherit'
      };
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var id = this.$props.id;
    return h("div", {
      "class": this.wrapperClass,
      id: id || this.calculatedId,
      attrs: this.v3 ? undefined : {
        id: id || this.calculatedId
      }
    }, [defaultSlot]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        focusFirstFocusableChild(this.$el);
      }
    }
  }
};
/**
 * @hidden
 */
var AppBar = AppBarVue2;
export { AppBar, AppBarVue2 };