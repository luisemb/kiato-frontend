var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { DrawerItem } from './DrawerItem.js';
import { getDefaultSlots, templateRendering, getListeners, getTemplate, WatermarkOverlay } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var DEFAULT_EXPANDED_WIDTH = 240;
/**
 * @hidden
 */
var DEFAULT_MINI_WIDTH = 50;
/**
 * @hidden
 */
var DEFAULT_ANIMATION = {
  type: 'slide',
  duration: 200
};
/**
 * @hidden
 */
var NO_ANIMATION = {
  type: 'slide',
  duration: 0
};
/**
 * @hidden
 */
var DrawerNavigationVue2 = {
  name: 'KendoDrawerNavigation',
  props: {
    item: [Object],
    tabIndex: Number,
    showLicenseWatermark: Boolean
  },
  inject: {
    kendoDrawer: {
      default: null
    }
  },
  computed: {
    navigationClassNames: function navigationClassNames() {
      var position = this.kendoDrawer.position;
      return {
        'k-widget k-drawer': true,
        'k-drawer-start': position === 'start',
        'k-drawer-end': position === 'end'
      };
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.kendoDrawer,
      animation = _a.animation,
      expanded = _a.expanded,
      mode = _a.mode,
      position = _a.position,
      mini = _a.mini,
      dir = _a.dir,
      width = _a.width,
      miniWidth = _a.miniWidth,
      items = _a.items;
    var customSettings = typeof animation !== 'boolean' ? animation : animation === false ? NO_ANIMATION : DEFAULT_ANIMATION;
    var navWidth = width ? width : DEFAULT_EXPANDED_WIDTH;
    var navMiniWidth = miniWidth ? miniWidth : DEFAULT_MINI_WIDTH;
    var expandPush = {
      opacity: 1,
      flexBasis: navWidth + 'px',
      WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',
      transition: 'all ' + (customSettings && customSettings.duration) + 'ms'
    };
    var expandOverlay = {
      opacity: 1,
      transform: 'translateX(0px)',
      WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',
      transition: 'all ' + (customSettings && customSettings.duration) + 'ms'
    };
    var collapsePush = {
      opacity: !mini ? 0 : 1,
      flexBasis: !mini ? 0 : navMiniWidth + 'px',
      WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',
      transition: 'all ' + (customSettings && customSettings.duration) + 'ms'
    };
    var collapseOverlay = {
      opacity: 0,
      transform: 'translateX(-100%)',
      WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',
      transition: 'all ' + (customSettings && customSettings.duration) + 'ms'
    };
    var collapseOverlayRtl = {
      opacity: 0,
      transform: 'translateX(100%)',
      WebkitTransition: 'all ' + (customSettings && customSettings.duration) + 'ms',
      transition: 'all ' + (customSettings && customSettings.duration) + 'ms'
    };
    var collapseOverlayMini = {
      transform: 'translateX(0%)',
      WebkitTransitionDuration: (customSettings && customSettings.duration) + 'ms',
      transitionDuration: (customSettings && customSettings.duration) + 'ms'
    };
    var watermark = this.showLicenseWatermark ? h(WatermarkOverlay) : null;
    var drawerAnimation = expanded ? mode === 'push' ? expandPush : expandOverlay : mode === 'push' ? collapsePush : dir === 'ltr' && position === 'start' || dir === 'rtl' && position === 'end' ? mini ? collapseOverlayMini : collapseOverlay : mini ? collapseOverlayMini : collapseOverlayRtl;
    var drawerItems = items && h("ul", {
      "class": 'k-drawer-items',
      role: "menubar",
      attrs: this.v3 ? undefined : {
        role: "menubar",
        "aria-orientation": "vertical",
        "aria-expanded": expanded
      },
      "aria-orientation": "vertical",
      "aria-expanded": expanded
    }, [items.map(function (element, index) {
      var item = this.$props.item;
      if (item && !item.type && !item.render) {
        item = templateRendering.call(this, this.$props.item, getListeners.call(this));
      }
      var itemDefaultRendering =
      // @ts-ignore
      h(DrawerItem, {
        key: index,
        index: index,
        attrs: this.v3 ? undefined : {
          index: index,
          text: element.text,
          icon: element.icon,
          svgIcon: element.svgIcon,
          separator: element.separator,
          selected: element.selected,
          targetItem: element.targetItem
        },
        onClick: this.onSelect,
        on: this.v3 ? undefined : {
          "click": this.onSelect
        },
        text: element.text,
        icon: element.icon,
        svgIcon: element.svgIcon,
        separator: element.separator,
        selected: element.selected,
        targetItem: element.targetItem
      });
      var itemRendering = getTemplate.call(this, {
        h: h,
        template: item,
        defaultRendering: itemDefaultRendering,
        additionalProps: __assign(__assign({}, element), {
          index: index
        }),
        additionalListeners: {
          click: this.onSelect
        }
      });
      return itemRendering;
    }, this), watermark]);
    var drawerNavigation = h("div", {
      style: drawerAnimation,
      "class": this.navigationClassNames
    }, [h("div", {
      "class": 'k-drawer-wrapper',
      style: !expanded && mini && mode === 'overlay' ? {
        width: navMiniWidth + 'px'
      } : {
        width: navWidth + 'px'
      }
    }, [drawerItems || defaultSlot])]);
    return drawerNavigation;
  },
  methods: {
    focus: function focus(e) {
      if (this.$el) {
        this.$el.focus(e);
      }
    },
    onSelect: function onSelect(e, index) {
      this.$emit('select', e, index);
    }
  }
};
/**
 * @hidden
 */
var DrawerNavigation = DrawerNavigationVue2;
export { DrawerNavigation, DrawerNavigationVue2 };