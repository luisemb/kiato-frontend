var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { TabStripNavigation } from './TabStripNavigation.js';
import { TabStripContent } from './TabStripContent.js';
import { Keys, classNames, getDefaultSlots, validatePackage, shouldShowValidationUI, WatermarkOverlay, templateRendering, getListeners } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var TabStripVue2 = {
  name: 'KendoTabStrip',
  // @ts-ignore
  emits: {
    select: null
  },
  props: {
    animation: {
      type: Boolean,
      default: true
    },
    selected: Number,
    tabContentStyle: Object,
    tabPosition: {
      type: String,
      default: 'top'
    },
    tabs: {
      type: Array,
      default: undefined
    },
    tabIndex: Number,
    dir: String
  },
  data: function data() {
    return {
      currentShowAll: true,
      currentTabs: [],
      showLicenseWatermark: false
    };
  },
  computed: {
    compTabs: function compTabs() {
      return this.tabs !== undefined ? this.tabs.map(function (tab) {
        var content = templateRendering.call(this, tab.content, getListeners.call(this));
        var titleRender = templateRendering.call(this, tab.titleRender, getListeners.call(this));
        return __assign(__assign({}, tab), {
          content: content,
          titleRender: titleRender
        });
      }, this) : this.currentTabs;
    }
  },
  provide: function provide() {
    return {
      addRenderTitle: this.addRenderTitle,
      addTab: this.addTab,
      removeTab: this.removeTab
    };
  },
  created: function created() {
    var _a;
    var _this = this;
    this.keyBinding = (_a = {}, _a[Keys.left] = function () {
      return _this.prevNavigatableTab();
    }, _a[Keys.right] = function () {
      return _this.nextNavigatableTab();
    }, _a[Keys.down] = function () {
      return _this.nextNavigatableTab();
    }, _a[Keys.up] = function () {
      return _this.prevNavigatableTab();
    }, _a[Keys.home] = function () {
      return 0;
    }, _a[Keys.end] = function () {
      return _this.compTabs.length - 1;
    }, _a);
    validatePackage(packageMetadata);
    this.showLicenseWatermark = shouldShowValidationUI(packageMetadata);
  },
  watch: {
    selected: function selected(_prevIndex, _nextIndex) {
      if (this.$props.animation) {
        this.currentShowAll = false;
        this.$nextTick(function () {
          this.currentShowAll = true;
        });
      }
    }
  },
  methods: {
    addRenderTitle: function addRenderTitle(currentId, titleTemplate) {
      var indexToUpdate = this.compTabs.findIndex(function (e) {
        return e.tabId === currentId;
      });
      if (this.v3) {
        this.compTabs[indexToUpdate].titleRender = titleTemplate;
      } else {
        this.compTabs[indexToUpdate] = __assign(__assign({}, this.compTabs[indexToUpdate]), {
          titleRender: titleTemplate
        });
      }
    },
    addTab: function addTab(newTab) {
      this.currentTabs.push(newTab);
    },
    removeTab: function removeTab(currentId) {
      var indexToRemove = this.currentTabs.findIndex(function (e) {
        return e.tabId === currentId;
      });
      this.currentTabs.splice(indexToRemove, 1);
    },
    onSelect: function onSelect(index) {
      if (this.$props.selected !== index) {
        this.$emit('select', {
          selected: index
        });
      }
    },
    onKeyDown: function onKeyDown(event) {
      var handler;
      switch (event.keyCode) {
        case Keys.left:
          handler = this.keyBinding[this.invertKeys(Keys.left, Keys.right)];
          break;
        case Keys.right:
          handler = this.keyBinding[this.invertKeys(Keys.right, Keys.left)];
          break;
        case Keys.up:
          handler = this.keyBinding[Keys.up];
          break;
        case Keys.down:
          handler = this.keyBinding[Keys.down];
          break;
        case Keys.home:
          handler = this.keyBinding[Keys.home];
          break;
        case Keys.end:
          handler = this.keyBinding[Keys.end];
          break;
        default:
          break;
      }
      if (handler) {
        event.preventDefault();
        this.onSelect(handler());
      }
    },
    invertKeys: function invertKeys(original, inverted) {
      var rtl = this.$el && getComputedStyle(this.$el).direction === 'rtl' || false;
      return rtl ? inverted : original;
    },
    firstNavigatableTab: function firstNavigatableTab() {
      var length = this.compTabs.length;
      if (length) {
        for (var i = 0; i < length; i++) {
          if (!this.compTabs[i].disabled) {
            return i;
          }
        }
      }
    },
    lastNavigatableTab: function lastNavigatableTab() {
      var length = this.compTabs.length;
      if (length) {
        for (var i = length - 1; i > 0; i--) {
          if (!this.compTabs[i].disabled) {
            return i;
          }
        }
      }
    },
    prevNavigatableTab: function prevNavigatableTab() {
      var length = this.compTabs.length;
      var selected = this.$props.selected;
      var index = selected ? selected - 1 : -1;
      if (index < 0) {
        return this.lastNavigatableTab();
      }
      if (length) {
        for (var i = index; i > -1; i--) {
          if (!this.compTabs[i].disabled) {
            return i;
          }
          if (i === 0) {
            return this.lastNavigatableTab();
          }
        }
      }
    },
    nextNavigatableTab: function nextNavigatableTab() {
      var length = this.compTabs.length;
      var selected = this.$props.selected;
      var index = selected ? selected + 1 : 1;
      if (index >= length) {
        return this.firstNavigatableTab();
      }
      if (length) {
        for (var i = index; i < length; i++) {
          if (!this.compTabs[i].disabled) {
            return i;
          }
          if (i + 1 === length) {
            return this.firstNavigatableTab();
          }
        }
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var _b = this.$props,
      tabPosition = _b.tabPosition,
      _c = _b.tabIndex,
      tabIndex = _c === void 0 ? 0 : _c;
    var bottom = tabPosition === 'bottom';
    var componentClasses = classNames('k-widget', 'k-pos-relative', 'k-tabstrip', (_a = {}, _a['k-tabstrip-left'] = tabPosition === 'left', _a['k-tabstrip-right'] = tabPosition === 'right', _a['k-tabstrip-bottom'] = tabPosition === 'bottom', _a['k-tabstrip-top'] = tabPosition === 'top', _a));
    var watermark = this.showLicenseWatermark ? h(WatermarkOverlay) : null;
    var renderContent = function renderContent(currentTabProps) {
      var selected = currentTabProps.selected,
        tabContentStyle = currentTabProps.tabContentStyle;
      var defaultSlots = getDefaultSlots(this);
      var tabContentProps = {
        index: selected,
        animation: this.$props.animation,
        tabs: this.compTabs,
        hasTabs: this.tabs !== undefined,
        selected: selected,
        tabContentStyle: tabContentStyle,
        showAll: this.currentShowAll
      };
      return h(TabStripContent, __assign(__assign({}, tabContentProps), {
        attrs: this.v3 ? undefined : __assign({}, tabContentProps)
      }), this.v3 ? function () {
        return defaultSlots;
      } : [defaultSlots]);
    };
    return h("div", {
      dir: this.$props.dir,
      attrs: this.v3 ? undefined : {
        dir: this.$props.dir
      },
      "class": componentClasses
    }, [!bottom &&
    // @ts-ignore function children
    h(TabStripNavigation, {
      tabs: this.compTabs,
      attrs: this.v3 ? undefined : {
        tabs: this.compTabs,
        selected: this.$props.selected,
        tabContentStyle: this.$props.tabContentStyle,
        tabIndex: tabIndex
      },
      selected: this.$props.selected,
      tabContentStyle: this.$props.tabContentStyle,
      onSelect: this.onSelect,
      on: this.v3 ? undefined : {
        "select": this.onSelect,
        "keydown": this.onKeyDown
      },
      onKeydown: this.onKeyDown,
      tabIndex: tabIndex
    }), renderContent.call(this, this.$props), bottom &&
    // @ts-ignore function children
    h(TabStripNavigation, {
      tabs: this.compTabs,
      attrs: this.v3 ? undefined : {
        tabs: this.compTabs,
        selected: this.$props.selected,
        tabContentStyle: this.$props.tabContentStyle,
        tabIndex: tabIndex
      },
      selected: this.$props.selected,
      tabContentStyle: this.$props.tabContentStyle,
      onSelect: this.onSelect,
      on: this.v3 ? undefined : {
        "select": this.onSelect,
        "keydown": this.onKeyDown
      },
      onKeydown: this.onKeyDown,
      tabIndex: tabIndex
    }), watermark]);
  }
};
/**
 * @hidden
 */
var TabStrip = TabStripVue2;
export { TabStrip, TabStripVue2 };