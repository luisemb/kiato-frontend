var __spreadArray = this && this.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Slide } from '@progress/kendo-vue-animation';
import { validatePackage, Navigation, FOCUSABLE_ELEMENTS, classNames, getRef, setRef, templateRendering, getListeners, getTemplate, guid } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata.js';
import { ActionSheetItem } from './ActionSheetItem.js';
import { ActionSheetHeader } from './ActionSheetHeader.js';
import { ActionSheetFooter } from './ActionSheetFooter.js';
import { ActionSheetContent } from './ActionSheetContent.js';
var DEFAULT_DURATION = 300;
/**
 * @hidden
 */
var ActionSheetVue2 = {
  name: 'KendoActionSheet',
  props: {
    expand: Boolean,
    animation: {
      type: Boolean,
      default: true
    },
    animationDuration: {
      type: Number,
      default: DEFAULT_DURATION
    },
    animationStyles: Object,
    tabIndex: Number,
    items: Array,
    subTitle: String,
    title: String,
    className: String,
    headerClassName: {
      type: String,
      default: undefined
    },
    contentClassName: {
      type: String,
      default: undefined
    },
    headerStyle: {
      type: String,
      default: undefined
    },
    footerClassName: {
      type: String,
      default: undefined
    },
    header: [String, Object, Function],
    content: [String, Object, Function],
    footer: [String, Object, Function],
    item: [String, Object, Function],
    navigatable: {
      type: Boolean,
      default: true
    },
    navigatableElements: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  created: function created() {
    this.bottomPosition = {
      bottom: '0px',
      width: '100%'
    };
    this.guidId = guid();
    validatePackage(packageMetadata);
  },
  mounted: function mounted() {
    this.element = getRef(this, 'actionSheet');
    if (this.$props.expand && !this.show) {
      this.show = true;
    }
  },
  updated: function updated() {
    this.element = getRef(this, 'actionSheet');
    if (this.$props.expand && !this.show) {
      this.show = true;
    }
    if (this.element && !this.$props.className) {
      this.element.style.setProperty('--kendo-actionsheet-height', 'auto');
      this.element.style.setProperty('--kendo-actionsheet-max-height', 'none');
    }
    if (this.element) {
      if (this.$props.navigatable) {
        var navigatableElements_1 = this.$props.navigatableElements;
        var innerElements = ['.k-actionsheet-footer', '.k-actionsheet-content', '.k-actionsheet-titlebar'].map(function (selector) {
          return FOCUSABLE_ELEMENTS.concat(navigatableElements_1).map(function (focusableSelector) {
            return "".concat(selector, " ").concat(focusableSelector);
          });
        });
        var selectors = __spreadArray(['.k-actionsheet-item'], innerElements.flat(), true);
        this.navigation = new Navigation({
          tabIndex: this.$props.tabIndex || 0,
          root: this.element,
          rovingTabIndex: false,
          selectors: selectors,
          keyboardEvents: {
            keydown: {
              'Tab': this.onTab,
              'Enter': this.onEnter,
              'Escape': this.onEscape
            }
          }
        });
        navigatableElements_1.length !== 0 ? this.navigation.focusElement(this.element.querySelector(navigatableElements_1[0]), null)
        // The above line focuses the first element of the $props.navigatableElements 
        // if the props is defined. Otherwise, the released logic will be executed 
        : this.navigation.focusElement(this.navigation.first, null);
      }
    }
  },
  data: function data() {
    return {
      show: false,
      slide: false
    };
  },
  computed: {
    topGroupItems: function topGroupItems() {
      var _a;
      return (_a = this.items) === null || _a === void 0 ? void 0 : _a.filter(function (item) {
        return !item.group || item.group === 'top';
      });
    },
    bottomGroupItems: function bottomGroupItems() {
      var _a;
      return (_a = this.items) === null || _a === void 0 ? void 0 : _a.filter(function (item) {
        return item.group === 'bottom';
      });
    },
    shouldRenderSeparator: function shouldRenderSeparator() {
      return this.topGroupItems && this.topGroupItems.length > 0 && this.bottomGroupItems && this.bottomGroupItems.length > 0;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      title = _a.title,
      subTitle = _a.subTitle,
      animationStyles = _a.animationStyles,
      animation = _a.animation,
      expand = _a.expand,
      tabIndex = _a.tabIndex,
      className = _a.className,
      animationDuration = _a.animationDuration,
      headerClassName = _a.headerClassName,
      contentClassName = _a.contentClassName,
      footerClassName = _a.footerClassName;
    var header = templateRendering.call(this, this.$props.header, getListeners.call(this));
    var headerContent = getTemplate.call(this, {
      h: h,
      template: header,
      defaultRendering: null
    });
    var content = templateRendering.call(this, this.$props.content, getListeners.call(this));
    var contentTemplate = getTemplate.call(this, {
      h: h,
      template: content,
      defaultRendering: null
    });
    var footer = templateRendering.call(this, this.$props.footer, getListeners.call(this));
    var footerContent = getTemplate.call(this, {
      h: h,
      template: footer,
      defaultRendering: null
    });
    var actionSheetPanel = h("div", {
      "class": classNames('k-actionsheet', className, {
        'k-actionsheet-bottom': !className
      }),
      role: "dialog",
      attrs: this.v3 ? undefined : {
        role: "dialog",
        "aria-modal": "true",
        "aria-hidden": false,
        "aria-labelledby": this.guidId
      },
      "aria-modal": "true",
      "aria-hidden": false,
      "aria-labelledby": this.guidId,
      ref: setRef(this, 'actionSheet'),
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown
      }
    }, [this.$props.header && !title && !subTitle &&
    // @ts-ignore function children
    h(ActionSheetHeader, {
      headerClassName: headerClassName,
      attrs: this.v3 ? undefined : {
        headerClassName: headerClassName
      }
    }, this.v3 ? function () {
      return [headerContent];
    } : [headerContent]), (title || subTitle) && h("div", {
      "class": "k-actionsheet-titlebar k-text-center"
    }, [h("div", {
      "class": "k-actionsheet-titlebar-group k-hbox"
    }, [h("div", {
      "class": 'k-actionsheet-title',
      id: this.guidId,
      attrs: this.v3 ? undefined : {
        id: this.guidId
      }
    }, [title && h("div", [title]), subTitle && h("div", {
      "class": "k-actionsheet-subtitle"
    }, [subTitle])])])]), !this.$props.content ? h("div", {
      "class": "k-actionsheet-content"
    }, [h("div", {
      "class": "k-list-ul",
      role: "group",
      attrs: this.v3 ? undefined : {
        role: "group"
      }
    }, [this.topGroupItems && this.topGroupItems.map(function (item, idx) {
      var itemContent = templateRendering.call(this, this.$props.item || item.content, getListeners.call(this));
      return h(ActionSheetItem, {
        style: item.style,
        "class": item.class,
        title: item.title,
        attrs: this.v3 ? undefined : {
          title: item.title,
          description: item.description,
          disabled: item.disabled,
          id: idx,
          item: item,
          icon: item.icon,
          svgIcon: item.svgIcon,
          iconSize: item.iconSize,
          iconColor: item.iconColor,
          tabIndex: tabIndex || 0,
          content: itemContent
        },
        description: item.description,
        disabled: item.disabled,
        id: idx,
        key: idx,
        item: item,
        icon: item.icon,
        svgIcon: item.svgIcon,
        iconSize: item.iconSize,
        iconColor: item.iconColor,
        tabIndex: tabIndex || 0,
        content: itemContent,
        onClick: this.handleItemClick,
        on: this.v3 ? undefined : {
          "click": this.handleItemClick
        }
      });
    }, this)]), this.shouldRenderSeparator && h("hr", {
      "class": "k-hr"
    }), h("div", {
      "class": "k-list-ul",
      role: "group",
      attrs: this.v3 ? undefined : {
        role: "group"
      }
    }, [this.bottomGroupItems && this.bottomGroupItems.map(function (item, idx) {
      var _a;
      return h(ActionSheetItem, {
        style: item.style,
        "class": item.class,
        id: idx + (((_a = this.topGroupItems) === null || _a === void 0 ? void 0 : _a.length) || 0),
        attrs: this.v3 ? undefined : {
          id: idx + (((_a = this.topGroupItems) === null || _a === void 0 ? void 0 : _a.length) || 0),
          item: item,
          title: item.title,
          description: item.description,
          disabled: item.disabled,
          icon: item.icon,
          svgIcon: item.svgIcon,
          iconSize: item.iconSize,
          iconColor: item.iconColor,
          tabIndex: tabIndex || 0
        },
        key: idx,
        item: item,
        title: item.title,
        description: item.description,
        disabled: item.disabled,
        icon: item.icon,
        svgIcon: item.svgIcon,
        iconSize: item.iconSize,
        iconColor: item.iconColor,
        tabIndex: tabIndex || 0,
        onClick: this.handleItemClick,
        on: this.v3 ? undefined : {
          "click": this.handleItemClick
        }
      });
    }, this)])]) :
    // @ts-ignore function children
    h(ActionSheetContent, {
      contentClassName: contentClassName,
      attrs: this.v3 ? undefined : {
        contentClassName: contentClassName
      }
    }, this.v3 ? function () {
      return [contentTemplate];
    } : [contentTemplate]), this.$props.footer &&
    // @ts-ignore function children
    h(ActionSheetFooter, {
      footerClassName: footerClassName,
      attrs: this.v3 ? undefined : {
        footerClassName: footerClassName
      }
    }, this.v3 ? function () {
      return [footerContent];
    } : [footerContent])]);
    return this.show && h("div", {
      "class": "k-actionsheet-container"
    }, [h("div", {
      "class": "k-overlay",
      onClick: this.handleOverlayClick,
      on: this.v3 ? undefined : {
        "click": this.handleOverlayClick
      }
    }), animation ?
    // @ts-ignore function children
    h(Slide, {
      onExited: this.hideActionSheet,
      on: this.v3 ? undefined : {
        "exited": this.hideActionSheet
      },
      direction: 'up',
      attrs: this.v3 ? undefined : {
        direction: 'up',
        componentChildStyle: animationStyles || this.bottomPosition,
        transitionEnterDuration: animationDuration,
        transitionExitDuration: animationDuration,
        appear: expand
      },
      componentChildStyle: animationStyles || this.bottomPosition,
      transitionEnterDuration: animationDuration,
      transitionExitDuration: animationDuration,
      appear: expand
    }, this.v3 ? function () {
      return [expand ? actionSheetPanel : null];
    } : [expand ? actionSheetPanel : null]) : actionSheetPanel]);
  },
  methods: {
    handleKeyDown: function handleKeyDown(e) {
      if (this.$props.navigatable) {
        this.navigation.triggerKeyboardEvent(e);
      }
    },
    onTab: function onTab(target, nav, ev) {
      ev.preventDefault();
      if (ev.shiftKey) {
        nav.focusPrevious(target);
      } else {
        nav.focusNext(target);
      }
    },
    handleOverlayClick: function handleOverlayClick(ev) {
      this.$emit('close', ev);
      if (!this.$props.animation) {
        this.hideActionSheet();
      }
    },
    handleItemClick: function handleItemClick(ev) {
      this.$emit('itemselect', ev);
      if (!this.$props.animation) {
        this.hideActionSheet();
      }
    },
    onEnter: function onEnter(target, nav, ev) {
      if (target.ariaDisabled) {
        return;
      }
      var isItem = target.className && target.className.indexOf('k-actionsheet-item') !== -1;
      var allItems = nav.elements.filter(function (e) {
        return e.className.indexOf('k-actionsheet-item') !== -1;
      });
      if (isItem) {
        ev.preventDefault();
        var item = this.$props.items[allItems.indexOf(target)];
        this.$emit('itemselect', {
          syntheticEvent: ev,
          item: item,
          title: item && item.title
        });
      }
      if (!this.$props.animation) {
        this.hideActionSheet();
      }
    },
    onEscape: function onEscape(_target, _nav, ev) {
      ev.preventDefault();
      this.$emit('close', ev);
      if (!this.$props.animation) {
        this.hideActionSheet();
      }
    },
    hideActionSheet: function hideActionSheet() {
      this.show = false;
    }
  }
};
/**
 * @hidden
 */
var ActionSheet = ActionSheetVue2;
export { ActionSheet, ActionSheetVue2 };