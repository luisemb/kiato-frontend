"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArrayEqual = exports.isPresent = exports.flatVisibleChildren = exports.flatChildren = exports.flatVisibleItems = exports.getInitialState = exports.getFirstId = exports.renderChildren = void 0;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var renderChildren = function renderChildren(items, _a) {
  var _b = _a.animation,
    animation = _b === void 0 ? true : _b,
    _c = _a.keepItemsMounted,
    keepItemsMounted = _c === void 0 ? false : _c,
    state = _a.state,
    expanded = _a.expanded,
    handleSelect = _a.handleSelect,
    _d = _a.parentExpanded,
    parentExpanded = _d === void 0 ? true : _d,
    _e = _a.level,
    level = _e === void 0 ? 0 : _e,
    _f = _a.parentPrivateKey,
    parentPrivateKey = _f === void 0 ? [] : _f;
  return items.map(function (child, idx) {
    var nestedChildren;
    var privateKey = getId(child, parentPrivateKey, idx);
    var content = kendo_vue_common_1.templateRendering.call(this, child.content, kendo_vue_common_1.getListeners.call(this));
    var header = kendo_vue_common_1.templateRendering.call(this, child.header, kendo_vue_common_1.getListeners.call(this));
    if (child.items) {
      var renderState = {
        animation: animation,
        keepItemsMounted: keepItemsMounted,
        state: state,
        expanded: expanded,
        handleSelect: handleSelect,
        parentExpanded: (expanded || []).indexOf(privateKey) > -1,
        level: level + 1,
        parentPrivateKey: __spreadArray(__spreadArray([], parentPrivateKey, true), [privateKey], false)
      };
      nestedChildren = exports.renderChildren.call(this, child.items, renderState);
    }
    return __assign(__assign({}, child), {
      animation: child.animation !== undefined ? child.animation : animation,
      keepItemsMounted: keepItemsMounted,
      id: child.id || "k-panelbar-item-default-".concat(privateKey),
      uniquePrivateKey: privateKey,
      parentUniquePrivateKey: parentPrivateKey,
      parentExpanded: parentExpanded,
      level: level,
      expanded: (expanded || []).indexOf(privateKey) > -1,
      focused: state.currentFocused === privateKey && state.wrapperFocused,
      selected: state.currentSelected === privateKey,
      items: nestedChildren,
      content: content,
      header: header
    });
  }, this);
};
exports.renderChildren = renderChildren;
/**
 * @hidden
 */
var getFirstId = function getFirstId(props) {
  var firstItem = props.items[0];
  if (firstItem) {
    return getId(firstItem, [], 0);
  }
  return '';
};
exports.getFirstId = getFirstId;
/**
 * @hidden
 */
var getInitialState = function getInitialState(props, expandMode, result, parentExpanded, parentPrivateKey) {
  if (result === void 0) {
    result = {
      currentExpanded: props.expanded || [],
      currentSelected: props.selected || '',
      currentFocused: props.focused || '',
      wrapperFocused: false
    };
  }
  if (parentExpanded === void 0) {
    parentExpanded = true;
  }
  if (parentPrivateKey === void 0) {
    parentPrivateKey = [];
  }
  props.items.forEach(function (item, idx) {
    var privateKey = getId(item, parentPrivateKey, idx);
    if (!item.disabled && parentExpanded) {
      if (item.selected) {
        result.currentSelected = privateKey;
      }
      if (item.focused) {
        result.currentFocused = privateKey;
      }
      if (item.expanded) {
        if (expandMode === 'multiple') {
          result.currentExpanded.push(privateKey);
        } else if (expandMode === 'single') {
          result.currentExpanded = [privateKey];
        }
      }
      if (item.items) {
        result = (0, exports.getInitialState)(item, expandMode, result, !!item.expanded, __spreadArray(__spreadArray([], parentPrivateKey, true), [privateKey], false));
      }
    }
  });
  return result;
};
exports.getInitialState = getInitialState;
/**
 * @hidden
 */
var getId = function getId(child, parentPrivateKey, idx) {
  return child && child && child.id ? child.id : parentPrivateKey.length ? parentPrivateKey[parentPrivateKey.length - 1] + ".".concat(idx) : ".".concat(idx);
};
/**
 * @hidden
 */
function flatVisibleItems(data, flattedItems) {
  if (flattedItems === void 0) {
    flattedItems = [];
  }
  (data || []).forEach(function (item) {
    if (!item.disabled) {
      flattedItems.push(item);
      if (item.expanded && item.children) {
        flatVisibleItems(item.children, flattedItems);
      }
    }
  });
  return flattedItems;
}
exports.flatVisibleItems = flatVisibleItems;
/**
 * @hidden
 */
function flatChildren(children, flattenChildren) {
  if (flattenChildren === void 0) {
    flattenChildren = [];
  }
  children.forEach(function (child) {
    if (child && child && !child.disabled) {
      flattenChildren.push(child);
      if (child.items) {
        flatChildren(child.items, flattenChildren);
      }
    }
  });
  return flattenChildren;
}
exports.flatChildren = flatChildren;
/**
 * @hidden
 */
function flatVisibleChildren(children, flattenVisibleChildren) {
  if (flattenVisibleChildren === void 0) {
    flattenVisibleChildren = [];
  }
  children.forEach(function (child) {
    if (child && (child.expanded || child.parentExpanded)) {
      flattenVisibleChildren.push(child);
      if (child.items) {
        flatVisibleChildren(child.items, flattenVisibleChildren);
      }
    }
  });
  return flattenVisibleChildren;
}
exports.flatVisibleChildren = flatVisibleChildren;
/**
 * @hidden
 */
var isPresent = function isPresent(value) {
  return value !== null && value !== undefined;
};
exports.isPresent = isPresent;
/**
 * @hidden
 */
var isArrayEqual = function isArrayEqual(firstArray, secondArray) {
  if (firstArray.length !== secondArray.length) {
    return false;
  }
  return firstArray.every(function (ex, i) {
    return ex === secondArray[i];
  });
};
exports.isArrayEqual = isArrayEqual;