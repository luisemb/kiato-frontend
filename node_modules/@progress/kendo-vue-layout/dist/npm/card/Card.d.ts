import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { CardProps } from './interfaces/CardProps';
/**
 * @hidden
 */
interface CardState {
}
/**
 * @hidden
 */
interface CardData {
}
/**
 * @hidden
 */
export interface CardMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface CardComputed {
    [key: string]: any;
    wrapperClass: object;
}
/**
 * @hidden
 */
export interface CardAll extends CardMethods, CardState, CardData, CardComputed, Vue2type {
}
/**
 * @hidden
 */
declare const CardVue2: ComponentOptions<Vue2type, DefaultData<CardData>, DefaultMethods<CardAll>, CardComputed, RecordPropsDefinition<CardProps>>;
/**
 * @hidden
 */
declare let Card: DefineComponent<CardProps, any, CardData, CardComputed, CardMethods, {}, {}, {}, string, CardProps, CardProps, {}>;
export { Card, CardVue2 };
