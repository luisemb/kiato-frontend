"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BottomNavigationVue2 = exports.BottomNavigation = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var package_metadata_1 = require("../package-metadata");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var utils_1 = require("./models/utils");
var BottomNavigationItem_1 = require("./BottomNavigationItem");
/**
 * @hidden
 */
var BottomNavigationVue2 = {
  name: 'KendoBottomNavigation',
  // @ts-ignore
  emits: {
    'keydown': null,
    'select': null
  },
  props: {
    dir: String,
    themeColor: {
      type: String,
      default: 'primary',
      validator: function validator(value) {
        return ['primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse'].includes(value);
      }
    },
    fill: {
      type: String,
      default: 'flat',
      validator: function validator(value) {
        return ['solid', 'flat'].includes(value);
      }
    },
    fillMode: {
      type: String,
      default: 'flat',
      validator: function validator(value) {
        return ['solid', 'flat'].includes(value);
      }
    },
    item: [String, Object, Function],
    items: Array,
    itemFlow: {
      type: String,
      default: 'vertical',
      validator: function validator(value) {
        return ['vertical', 'horizontal'].includes(value);
      }
    },
    positionMode: {
      type: String,
      default: 'fixed',
      validator: function validator(value) {
        return ['sticky', 'fixed'].includes(value);
      }
    },
    border: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
    selected: Number
  },
  created: function created() {
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
    this.navId = (0, kendo_vue_common_1.guid)();
  },
  computed: {
    navClasses: function navClasses() {
      var _a;
      var _b = this.$props,
        themeColor = _b.themeColor,
        fillMode = _b.fillMode,
        positionMode = _b.positionMode,
        itemFlow = _b.itemFlow,
        border = _b.border,
        disabled = _b.disabled;
      var fill = fillMode !== undefined ? fillMode : this.$props.fill;
      return _a = {
        'k-bottom-nav': true
      }, _a[utils_1.POSITION_MODE_CLASSES[positionMode]] = true, _a[utils_1.THEME_COLOR_CLASSES[themeColor]] = true, _a[utils_1.FILL_CLASSES[fill]] = true, _a[utils_1.ITEM_FLOW_CLASSES[itemFlow]] = true, _a['k-bottom-nav-border'] = border, _a['k-disabled'] = disabled, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      id = _a.id,
      items = _a.items,
      item = _a.item,
      disabled = _a.disabled;
    //    const dir = useDir(elementRef, props.dir);
    return h("nav", {
      "class": this.navClasses,
      id: id || this.navId,
      attrs: this.v3 ? undefined : {
        id: id || this.navId
      }
    }, [items && items.map(function (element, index) {
      var content = kendo_vue_common_1.templateRendering.call(this, element.item || item, kendo_vue_common_1.getListeners.call(this));
      return (
        // @ts-ignore 
        h(BottomNavigationItem_1.BottomNavigationItem, {
          key: index,
          index: index,
          attrs: this.v3 ? undefined : {
            index: index,
            id: "".concat(id || this.navId, "-").concat(index),
            disabled: disabled || element.disabled,
            selected: this.selected === index || element.selected,
            dataItem: element,
            item: content
          },
          style: element.style,
          "class": element.class,
          id: "".concat(id || this.navId, "-").concat(index),
          disabled: disabled || element.disabled,
          selected: this.selected === index || element.selected,
          dataItem: element,
          item: content,
          onSelect: this.handleSelect,
          on: this.v3 ? undefined : {
            "select": this.handleSelect,
            "keydown": this.handleKeyDown
          },
          onKeydown: this.handleKeyDown
        })
      );
    }, this)]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        (0, kendo_vue_common_1.focusFirstFocusableChild)(this.$el);
      }
    },
    dispatchSelectEvent: function dispatchSelectEvent(dispatchedEvent, index) {
      if (!this.items) {
        return;
      }
      if (!this.items[index].disabled) {
        this.$emit('select', {
          event: dispatchedEvent,
          itemTarget: this.items[index],
          itemIndex: index
        });
      }
    },
    handleSelect: function handleSelect(event, clickedItemIndex) {
      this.dispatchSelectEvent(event, clickedItemIndex);
    },
    handleKeyDown: function handleKeyDown(event, clickedItemIndex) {
      switch (event.keyCode) {
        case kendo_vue_common_1.Keys.enter:
        case kendo_vue_common_1.Keys.space:
          this.dispatchSelectEvent(event, clickedItemIndex);
          event.preventDefault();
          break;
        default:
          break;
      }
      this.$emit('keydown', {
        event: event,
        itemTarget: this.items[clickedItemIndex],
        itemIndex: clickedItemIndex
      });
    }
  }
};
exports.BottomNavigationVue2 = BottomNavigationVue2;
/**
 * @hidden
 */
var BottomNavigation = BottomNavigationVue2;
exports.BottomNavigation = BottomNavigation;