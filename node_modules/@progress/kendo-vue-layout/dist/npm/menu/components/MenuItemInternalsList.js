"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuItemInternalsListVue2 = exports.MenuItemInternalsList = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var MenuItemInternal_1 = require("./MenuItemInternal");
var misc_1 = require("./../utils/misc");
/**
 * @hidden
 */
var MenuItemInternalsListVue2 = {
  name: 'KendoMenuItemInternalsList',
  // @ts-ignore
  emits: {
    'keydown': null,
    'mouseover': null,
    'mouseleave': null,
    'blur': null,
    'focus': null,
    'click': null,
    'mousedown': null
  },
  props: {
    items: Array,
    parentItemId: {
      type: String,
      default: undefined
    },
    focusedItemId: String,
    lastItemIdToBeOpened: String,
    tabbableItemId: String,
    itemRender: [String, Object, Function],
    linkRender: [String, Object, Function],
    isMenuVertical: Boolean,
    isDirectionRightToLeft: Boolean,
    menuGuid: String,
    originalItemNeeded: Function
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var parentItemId = this.$props.parentItemId;
    var renderChildItems = function renderChildItems() {
      return this.$props.items.length > 0 ? this.$props.items.map(function (item, index) {
        return (
          // @ts-ignore
          h(MenuItemInternal_1.MenuItemInternal, {
            item: item,
            attrs: this.v3 ? undefined : {
              item: item,
              isMenuVertical: this.$props.isMenuVertical,
              isDirectionRightToLeft: this.$props.isDirectionRightToLeft,
              focusedItemId: this.$props.focusedItemId,
              lastItemIdToBeOpened: this.$props.lastItemIdToBeOpened,
              tabbableItemId: this.$props.tabbableItemId,
              itemRender: this.$props.itemRender,
              linkRender: this.$props.linkRender,
              menuGuid: this.$props.menuGuid,
              originalItemNeeded: this.handleOriginalItemNeeded
            },
            isMenuVertical: this.$props.isMenuVertical,
            isDirectionRightToLeft: this.$props.isDirectionRightToLeft,
            focusedItemId: this.$props.focusedItemId,
            lastItemIdToBeOpened: this.$props.lastItemIdToBeOpened,
            tabbableItemId: this.$props.tabbableItemId,
            itemRender: this.$props.itemRender,
            linkRender: this.$props.linkRender,
            menuGuid: this.$props.menuGuid,
            onMouseover: this.handleItemMouseOver,
            on: this.v3 ? undefined : {
              "mouseover": this.handleItemMouseOver,
              "mouseleave": this.handleItemMouseLeave,
              "mousedown": this.handleItemMouseDown,
              "keydown": this.handleKeyDown,
              "blur": this.handleItemMouseBlur,
              "focus": this.handleItemMouseFocus,
              "click": this.handleItemMouseClick
            },
            onMouseleave: this.handleItemMouseLeave,
            onMousedown: this.handleItemMouseDown,
            onKeydown: this.handleKeyDown,
            onBlur: this.handleItemMouseBlur,
            onFocus: this.handleItemMouseFocus,
            onClick: this.handleItemMouseClick,
            originalItemNeeded: this.handleOriginalItemNeeded,
            key: index
          })
        );
      }, this) : null;
    };
    return h("ul", {
      role: parentItemId !== undefined ? 'menu' : 'menubar',
      attrs: this.v3 ? undefined : {
        role: parentItemId !== undefined ? 'menu' : 'menubar',
        id: parentItemId !== undefined ? (0, misc_1.getDOMElementId)(this.$props.menuGuid, parentItemId) : undefined
      },
      id: parentItemId !== undefined ? (0, misc_1.getDOMElementId)(this.$props.menuGuid, parentItemId) : undefined
    }, [renderChildItems.call(this)]);
  },
  methods: {
    handleKeyDown: function handleKeyDown(event) {
      this.$emit('keydown', event);
    },
    handleOriginalItemNeeded: function handleOriginalItemNeeded(event) {
      return this.$props.originalItemNeeded(event);
    },
    handleItemMouseOver: function handleItemMouseOver(event) {
      this.$emit('mouseover', event);
    },
    handleItemMouseLeave: function handleItemMouseLeave(event) {
      this.$emit('mouseleave', event);
    },
    handleItemMouseDown: function handleItemMouseDown(event) {
      this.$emit('mousedown', event);
    },
    handleItemMouseBlur: function handleItemMouseBlur(event) {
      this.$emit('blur', event);
    },
    handleItemMouseFocus: function handleItemMouseFocus(event) {
      this.$emit('focus', event);
    },
    handleItemMouseClick: function handleItemMouseClick(event, itemId) {
      this.$emit('click', event, itemId);
    },
    onMouseOver: function onMouseOver(event) {
      if (this.$props.parentItemId !== undefined) {
        this.$emit('mouseover', this.$props.parentItemId);
        event.stopPropagation();
      }
    },
    onMouseLeave: function onMouseLeave(event) {
      if (this.$props.parentItemId !== undefined) {
        this.$emit('mouseleave', this.$props.parentItemId);
        event.stopPropagation();
      }
    }
  }
};
exports.MenuItemInternalsListVue2 = MenuItemInternalsListVue2;
/**
 * @hidden
 */
var MenuItemInternalsList = MenuItemInternalsListVue2;
exports.MenuItemInternalsList = MenuItemInternalsList;