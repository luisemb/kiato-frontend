"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackLayoutVue2 = exports.StackLayout = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var package_metadata_1 = require("../package-metadata");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var StackLayoutVue2 = {
  name: 'KendoStackLayout',
  props: {
    id: String,
    orientation: {
      type: String,
      default: 'horizontal',
      validator: function validator(value) {
        return ['horizontal', 'vertical'].includes(value);
      }
    },
    gap: {
      type: [String, Number]
    },
    align: {
      type: Object,
      validator: function validator(value) {
        return ['top', 'middle', 'bottom', 'stretch', undefined].includes(value.vertical) && ['start', 'center', 'end', 'stretch', undefined].includes(value.horizontal);
      }
    }
  },
  created: function created() {
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
    this.layoutId = (0, kendo_vue_common_1.guid)();
  },
  computed: {
    hAlign: function hAlign() {
      return this.$props.align && this.$props.align.horizontal ? this.$props.align.horizontal : 'stretch';
    },
    vAlign: function vAlign() {
      return this.$props.align && this.$props.align.vertical ? this.$props.align.vertical : 'stretch';
    },
    stackLayoutClasses: function stackLayoutClasses() {
      var orientation = this.$props.orientation;
      var isHorizontal = orientation === 'horizontal';
      return {
        'k-stack-layout': true,
        'k-hstack': orientation === 'horizontal',
        'k-vstack': orientation === 'vertical',
        'k-justify-content-start': isHorizontal && this.hAlign === 'start' || !isHorizontal && this.vAlign === 'top',
        'k-justify-content-center': isHorizontal && this.hAlign === 'center' || !isHorizontal && this.vAlign === 'middle',
        'k-justify-content-end': isHorizontal && this.hAlign === 'end' || !isHorizontal && this.vAlign === 'bottom',
        'k-justify-content-stretch': isHorizontal && this.hAlign === 'stretch' || !isHorizontal && this.vAlign === 'stretch',
        'k-align-items-start': !isHorizontal && this.hAlign === 'start' || isHorizontal && this.vAlign === 'top',
        'k-align-items-center': !isHorizontal && this.hAlign === 'center' || isHorizontal && this.vAlign === 'middle',
        'k-align-items-end': !isHorizontal && this.hAlign === 'end' || isHorizontal && this.vAlign === 'bottom',
        'k-align-items-stretch': !isHorizontal && this.hAlign === 'stretch' || isHorizontal && this.vAlign === 'stretch'
      };
    },
    stackLayoutStyles: function stackLayoutStyles() {
      return {
        gap: "".concat(typeof this.$props.gap === 'number' ? this.$props.gap + 'px' : this.$props.gap)
      };
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    var id = this.$props.id;
    return h("div", {
      "class": this.stackLayoutClasses,
      style: this.stackLayoutStyles,
      id: id || this.layoutId,
      attrs: this.v3 ? undefined : {
        id: id || this.layoutId
      }
    }, [defaultSlot]);
  }
};
exports.StackLayoutVue2 = StackLayoutVue2;
/**
 * Represents the [Kendo UI for Vue StackLayout component]({% slug overview_stacklayout %}).
 * Arranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.
 */
var StackLayout = StackLayoutVue2;
exports.StackLayout = StackLayout;