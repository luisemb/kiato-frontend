import { DefineComponent } from '../additionalTypes';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { LoaderProps } from './LoaderProps';
/**
 * @hidden
 */
export interface LoaderHandle {
    /**
     * The Loader element.
     */
    element: HTMLSpanElement | null;
    /**
     * Focus the Loader.
     */
    focus: () => void;
}
/**
 * @hidden
 */
export interface LoaderState {
}
/**
 * @hidden
 */
export interface LoaderComputed {
    [key: string]: any;
    loaderClasses: object;
}
/**
 * @hidden
 */
export interface LoaderMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface LoaderData {
}
/**
 * @hidden
 */
export interface LoaderAll extends Vue, LoaderMethods, LoaderData, LoaderComputed, LoaderState {
}
/**
 * @hidden
 */
declare let LoaderVue2: ComponentOptions<LoaderAll, DefaultData<LoaderData>, DefaultMethods<LoaderAll>, LoaderComputed, RecordPropsDefinition<LoaderProps>>;
/**
 * @hidden
 */
declare const Loader: DefineComponent<LoaderProps, any, LoaderData, LoaderComputed, LoaderMethods, {}, {}, {}, string, LoaderProps, LoaderProps, {}>;
export { Loader, LoaderVue2 };
