// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getDefaultSlots, getDir, getListeners, getTemplate, kendoThemeMaps, templateRendering } from '@progress/kendo-vue-common';
import { validatePackage } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var BadgeContainerVue2 = {
  name: 'KendoBadgeContainer',
  props: {
    dir: String,
    align: {
      type: Object,
      default: function _default() {
        return {
          vertical: 'top',
          horizontal: 'end'
        };
      }
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large'].includes(value);
      }
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return ['solid', 'outline'].includes(value);
      }
    },
    themeColor: {
      type: String,
      default: 'primary',
      validator: function validator(value) {
        return ['primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse'].includes(value);
      }
    },
    rounded: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large', 'full'].includes(value);
      }
    },
    position: {
      type: String,
      default: 'edge',
      validator: function validator(value) {
        return ['edge', 'outside', 'inside'].includes(value);
      }
    },
    cutoutBorder: Boolean,
    content: [String, Function, Object]
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.currentDir = undefined;
  },
  mounted: function mounted() {
    this.currentDir = getDir(this.$el, this.$props.dir);
  },
  computed: {
    badgeContainerClasses: function badgeContainerClasses() {
      return {
        'k-badge-container': true
      };
    },
    badgeClasses: function badgeClasses() {
      var _a;
      var _b = this.$props,
        size = _b.size,
        fillMode = _b.fillMode,
        cutoutBorder = _b.cutoutBorder,
        position = _b.position,
        align = _b.align,
        themeColor = _b.themeColor,
        rounded = _b.rounded;
      return _a = {
        'k-badge': true,
        'k-badge-sm': size === 'small',
        'k-badge-md': size === 'medium',
        'k-badge-lg': size === 'large'
      }, _a["k-badge-".concat(fillMode)] = fillMode, _a["k-badge-".concat(fillMode, "-").concat(themeColor)] = Boolean(fillMode && themeColor), _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-badge-border-cutout'] = cutoutBorder, _a["k-badge-".concat(position)] = position, _a['k-top-start'] = align.vertical === 'top' && align.horizontal === 'start', _a['k-top-end'] = align.vertical === 'top' && align.horizontal === 'end', _a['k-bottom-start'] = align.vertical === 'bottom' && align.horizontal === 'start', _a['k-bottom-end'] = align.vertical === 'bottom' && align.horizontal === 'end', _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var content = templateRendering.call(this, this.content, getListeners.call(this));
    var contentElement = getTemplate.call(this, {
      h: h,
      template: content,
      additionalProps: this.$props
    });
    return h("span", {
      "class": this.badgeContainerClasses,
      style: {
        display: 'inline-block'
      },
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir
      }
    }, [defaultSlot, h("span", {
      "class": this.badgeClasses,
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir
      }
    }, [contentElement])]);
  },
  methods: {
    focusElement: function focusElement() {
      if (this.$el) {
        this.$el.focus();
      }
    }
  }
};
/**
 * Represents the [Kendo UI for Vue BadgeContainer component]({% slug api_indicators_badgeprops %}).
 *
 * @example
 * ```jsx
 *     <BadgeContainer>99+</BadgeContainer>
 * ```
 */
var BadgeContainer = BadgeContainerVue2;
export { BadgeContainer, BadgeContainerVue2 };