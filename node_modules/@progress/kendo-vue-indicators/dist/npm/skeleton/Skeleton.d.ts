import { DefineComponent } from '../additionalTypes';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { SkeletonProps } from './SkeletonProps';
/**
 * @hidden
 */
export interface SkeletonHandle {
    /**
     * The Skeleton element.
     */
    element: HTMLSpanElement | null;
    /**
     * Focus the Skeleton.
     */
    focus: () => void;
}
/**
 * @hidden
 */
export interface SkeletonState {
}
/**
 * @hidden
 */
export interface SkeletonComputed {
    [key: string]: any;
    skeletonClasses: object;
}
/**
 * @hidden
 */
export interface SkeletonMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface SkeletonData {
}
/**
 * @hidden
 */
export interface SkeletonAll extends Vue, SkeletonMethods, SkeletonData, SkeletonComputed, SkeletonState {
}
/**
 * @hidden
 */
declare let SkeletonVue2: ComponentOptions<SkeletonAll, DefaultData<SkeletonData>, DefaultMethods<SkeletonAll>, SkeletonComputed, RecordPropsDefinition<SkeletonProps>>;
/**
 * @hidden
 */
declare const Skeleton: DefineComponent<SkeletonProps, any, SkeletonData, SkeletonComputed, SkeletonMethods, {}, {}, {}, string, SkeletonProps, SkeletonProps, {}>;
export { Skeleton, SkeletonVue2 };
