"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadListVue2 = exports.UploadList = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var UploadListGroup_1 = require("./UploadListGroup");
/**
 * @hidden
 */
var UploadListVue2 = {
  name: 'KendoVueUploadList',
  props: {
    groupedFiles: Object,
    async: Object,
    disabled: Boolean,
    navigationIndex: {
      type: Number,
      default: undefined
    },
    list: [String, Function, Object]
  },
  // @ts-ignore
  emits: {
    'cancel': null,
    'click': null,
    'retry': null,
    'remove': null
  },
  methods: {
    onClick: function onClick(navIndex) {
      this.$emit('click', navIndex);
    },
    onRetry: function onRetry(uid) {
      this.$emit('retry', uid);
    },
    onRemove: function onRemove(uid) {
      this.$emit('remove', uid);
    },
    onCancel: function onCancel(uid) {
      this.$emit('cancel', uid);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      groupedFiles = _a.groupedFiles,
      navigationIndex = _a.navigationIndex,
      async = _a.async,
      disabled = _a.disabled,
      list = _a.list;
    var ulClassName = (0, kendo_vue_common_1.classNames)('k-upload-files', 'k-reset');
    return h("ul", {
      "class": ulClassName
    }, [Object.keys(groupedFiles).map(function (key, index) {
      var files = groupedFiles[key];
      return (
        // @ts-ignore  function children
        h(UploadListGroup_1.UploadListGroup, {
          key: key,
          files: files,
          attrs: this.v3 ? undefined : {
            files: files,
            index: index,
            navigationIndex: navigationIndex,
            async: async,
            disabled: disabled,
            list: list
          },
          index: index,
          navigationIndex: navigationIndex,
          async: async,
          disabled: disabled,
          list: list,
          onCancel: this.onCancel,
          on: this.v3 ? undefined : {
            "cancel": this.onCancel,
            "click": this.onClick,
            "remove": this.onRemove,
            "retry": this.onRetry
          },
          onClick: this.onClick,
          onRemove: this.onRemove,
          onRetry: this.onRetry
        })
      );
    }, this)]);
  }
};
exports.UploadListVue2 = UploadListVue2;
/**
 * @hidden
 */
var UploadList = UploadListVue2;
exports.UploadList = UploadList;