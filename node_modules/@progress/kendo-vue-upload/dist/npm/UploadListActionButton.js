"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadListActionButtonVue2 = exports.UploadListActionButton = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var UploadFileStatus_1 = require("./interfaces/UploadFileStatus");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("./messages/main");
/**
 * @hidden
 */
var UploadListActionButtonVue2 = {
  name: 'KendoVueUploadListActionButton',
  props: {
    progress: Number,
    uid: String,
    status: Number,
    async: Object,
    disabled: Boolean,
    files: Array
  },
  // @ts-ignore
  emits: {
    'cancel': null,
    'retry': null,
    'remove': null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      retryFocused: false,
      actionFocused: false
    };
  },
  methods: {
    actionButtonTitle: function actionButtonTitle(status, localizationService) {
      if (status === UploadFileStatus_1.UploadFileStatus.Uploading) {
        return localizationService.toLanguageString(main_1.cancel, main_1.messages[main_1.cancel]);
      }
      return localizationService.toLanguageString(main_1.remove, main_1.messages[main_1.remove]);
    },
    retryButtonTitle: function retryButtonTitle(localizationService) {
      return localizationService.toLanguageString(main_1.retry, main_1.messages[main_1.retry]);
    },
    buttonClassNames: function buttonClassNames(type) {
      return (0, kendo_vue_common_1.classNames)(this.actionFocused && type === 'action' || this.retryFocused && type === 'retry' ? 'k-focus' : '');
    },
    onRetryFocus: function onRetryFocus() {
      this.retryFocused = true;
    },
    onRetryBlur: function onRetryBlur() {
      this.retryFocused = false;
    },
    onActionFocus: function onActionFocus() {
      this.actionFocused = true;
    },
    onActionBlur: function onActionBlur() {
      this.actionFocused = false;
    },
    onActionClick: function onActionClick() {
      var _a = this.$props,
        status = _a.status,
        uid = _a.uid,
        disabled = _a.disabled;
      if (disabled || status === UploadFileStatus_1.UploadFileStatus.Removing) {
        return;
      }
      if (status === UploadFileStatus_1.UploadFileStatus.Uploading) {
        this.$emit('cancel', uid);
      } else {
        this.$emit('remove', uid);
      }
    },
    onRetryClick: function onRetryClick() {
      var _a = this.$props,
        uid = _a.uid,
        disabled = _a.disabled;
      if (disabled) {
        return;
      }
      this.$emit('retry', uid);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      status = _a.status,
      progress = _a.progress;
    var isRetryVisible = status === UploadFileStatus_1.UploadFileStatus.UploadFailed;
    var isProgressVisible = status === UploadFileStatus_1.UploadFileStatus.Uploading;
    var isActionHidden = (status === UploadFileStatus_1.UploadFileStatus.Uploaded || status === UploadFileStatus_1.UploadFileStatus.Initial) && !this.$props.async.removeUrl;
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var percent = '%';
    return h("div", {
      "class": 'k-upload-actions'
    }, [isProgressVisible ? h("span", {
      "class": 'k-upload-pct'
    }, [progress, percent]) : undefined, isRetryVisible ?
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        tabindex: -1,
        disabled: this.disabled,
        icon: 'arrow-rotate-cw-small'
        //  svgIcon={isProgressVisible ? denyIcon : xIcon}
        ,
        iconClass: 'k-retry',
        ariaLabel: this.retryButtonTitle(localizationService),
        title: this.retryButtonTitle(localizationService)
      },
      tabindex: -1,
      disabled: this.disabled,
      "class": this.buttonClassNames('retry'),
      icon: 'arrow-rotate-cw-small',
      iconClass: 'k-retry',
      ariaLabel: this.retryButtonTitle(localizationService),
      title: this.retryButtonTitle(localizationService),
      onFocus: this.onRetryFocus,
      on: this.v3 ? undefined : {
        "focus": this.onRetryFocus,
        "blur": this.onRetryBlur,
        "click": this.onRetryClick
      },
      onBlur: this.onRetryBlur,
      onClick: this.onRetryClick
    }) : undefined, !isActionHidden ?
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        fillMode: 'flat',
        tabindex: -1,
        disabled: this.disabled,
        icon: isProgressVisible ? 'deny' : 'x'
        // svgIcon={isProgressVisible ? denyIcon : xIcon}
        ,
        ariaLabel: this.actionButtonTitle(status, localizationService),
        title: this.actionButtonTitle(status, localizationService)
      },
      fillMode: 'flat',
      tabindex: -1,
      disabled: this.disabled,
      "class": this.buttonClassNames('action'),
      onFocus: this.onActionFocus,
      on: this.v3 ? undefined : {
        "focus": this.onActionFocus,
        "blur": this.onActionBlur,
        "click": this.onActionClick
      },
      onBlur: this.onActionBlur,
      onClick: this.onActionClick,
      icon: isProgressVisible ? 'deny' : 'x',
      ariaLabel: this.actionButtonTitle(status, localizationService),
      title: this.actionButtonTitle(status, localizationService)
    }) : undefined]);
  }
};
exports.UploadListActionButtonVue2 = UploadListActionButtonVue2;
/**
 * @hidden
 */
var UploadListActionButton = UploadListActionButtonVue2;
exports.UploadListActionButton = UploadListActionButton;