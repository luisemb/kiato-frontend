"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExternalDropZoneVue2 = exports.ExternalDropZone = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var main_1 = require("./messages/main");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var package_metadata_1 = require("./package-metadata");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
/**
 * @hidden
 */
var TIME_TO_CHECK_DRAG = 100;
/**
 * @hidden
 */
var ExternalDropZoneVue2 = {
  name: 'KendoVueExternalDropZone',
  props: {
    id: String,
    tabIndex: Number,
    innerStyle: Object,
    uploadRef: [String, Function, Object],
    disabled: Boolean,
    customHint: [String, Function, Object],
    customNote: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
    this.elementInterval = null;
    this.elementActive = false;
    this.lastElementDragOverRef = null;
  },
  data: function data() {
    return {
      overDropZone: false
    };
  },
  mounted: function mounted() {
    this.externalDropZone = this.v3 ? this.externalDropZoneRef : this.$refs.externalDropZone;
  },
  methods: {
    focus: function focus() {
      if (this.externalDropZone && this.externalDropZone.focus) {
        this.externalDropZone.focus();
      }
    },
    isDragOver: function isDragOver(prevDate) {
      return new Date().getTime() - (prevDate || new Date()).getTime() > TIME_TO_CHECK_DRAG;
    },
    handleOnDrop: function handleOnDrop(event) {
      event.preventDefault();
      var droppedFiles = event.dataTransfer.files;
      var refToUpload = this.$parent.$refs[this.$props.uploadRef];
      if (droppedFiles.length > 0 && !this.$props.disabled && refToUpload) {
        if (refToUpload.onAdd) {
          event.preventDefault();
          refToUpload.onAdd(droppedFiles);
        }
      }
    },
    handleOnElementDragEnter: function handleOnElementDragEnter() {
      var _this = this;
      this.elementActive = true;
      var locElementInterval = function locElementInterval() {
        if (_this.isDragOver(_this.lastElementDragOver)) {
          _this.overDropZone = false;
          _this.elementActive = false;
          clearInterval(_this.elementInterval);
          _this.elementInterval = null;
          _this.lastElementDragOver = null;
        }
      };
      this.elementInterval = setInterval(locElementInterval, TIME_TO_CHECK_DRAG);
    },
    handleOnElementDragOver: function handleOnElementDragOver(event) {
      event.preventDefault();
      this.lastElementDragOver = new Date();
      this.overDropZone = true;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var externalDropZoneRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      externalDropZoneRef: externalDropZoneRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      customNote = _a.customNote,
      customHint = _a.customHint;
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var localizedHint = localizationService.toLanguageString(main_1.dropZoneHint, main_1.messages[main_1.dropZoneHint]);
    var localizedNote = localizationService.toLanguageString(main_1.dropZoneNote, main_1.messages[main_1.dropZoneNote]);
    var hintTemplate = kendo_vue_common_1.templateRendering.call(this, customHint, kendo_vue_common_1.getListeners.call(this));
    var noteTemplate = kendo_vue_common_1.templateRendering.call(this, customNote, kendo_vue_common_1.getListeners.call(this));
    var hintElement;
    var hintElementDefaultRendering = h("span", [localizedHint]);
    hintElement = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: hintTemplate,
      defaultRendering: hintElementDefaultRendering
    });
    var noteElement;
    var noteElementDefaultRendering = h("span", [localizedNote]);
    noteElement = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: noteTemplate,
      defaultRendering: noteElementDefaultRendering
    });
    return h("div", {
      ref: (0, kendo_vue_common_1.setRef)(this, 'externalDropZone'),
      id: this.$props.id,
      attrs: this.v3 ? undefined : {
        id: this.$props.id,
        tabindex: (0, kendo_vue_common_1.getTabIndex)(this.$props.tabIndex, this.$props.disabled, undefined)
      },
      "class": (0, kendo_vue_common_1.classNames)('k-external-dropzone', {
        'k-external-dropzone-hover': this.overDropZone,
        'k-disabled': this.$props.disabled
      }, this.$props.className),
      tabindex: (0, kendo_vue_common_1.getTabIndex)(this.$props.tabIndex, this.$props.disabled, undefined),
      onDrop: this.handleOnDrop,
      on: this.v3 ? undefined : {
        "drop": this.handleOnDrop,
        "dragenter": this.handleOnElementDragEnter,
        "dragover": this.handleOnElementDragOver
      },
      onDragenter: this.handleOnElementDragEnter,
      onDragover: this.handleOnElementDragOver
    }, [h("div", {
      style: this.$props.innerStyle,
      "class": 'k-dropzone-inner'
    }, [h(kendo_vue_common_1.Icon, {
      name: 'upload',
      attrs: this.v3 ? undefined : {
        name: 'upload',
        icon: kendo_svg_icons_1.uploadIcon,
        size: 'xxxlarge'
      },
      icon: kendo_svg_icons_1.uploadIcon,
      "class": 'k-dropzone-icon',
      size: 'xxxlarge'
    }), h("span", {
      "class": 'k-dropzone-hint'
    }, [hintElement]), h("span", {
      "class": 'k-dropzone-note'
    }, [noteElement])]), h("div", {
      "class": 'k-upload'
    })]);
  }
};
exports.ExternalDropZoneVue2 = ExternalDropZoneVue2;
/**
 * @hidden
 */
var ExternalDropZone = ExternalDropZoneVue2;
exports.ExternalDropZone = ExternalDropZone;