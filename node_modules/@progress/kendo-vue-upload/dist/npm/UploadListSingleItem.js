"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadListSingleItemVue2 = exports.UploadListSingleItem = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var kendo_vue_progressbars_1 = require("@progress/kendo-vue-progressbars");
var main_1 = require("./messages/main");
var utils_1 = require("./utils/utils");
var UploadListActionButton_1 = require("./UploadListActionButton");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var UploadListSingleItemVue2 = {
  name: 'KendoVueUploadListSingleItem',
  props: {
    files: Array,
    disabled: Boolean,
    async: Object
  },
  // @ts-ignore
  emits: {
    'cancel': null,
    'retry': null,
    'remove': null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onRetry: function onRetry(uid) {
      this.$emit('retry', uid);
    },
    onRemove: function onRemove(uid) {
      this.$emit('remove', uid);
    },
    onCancel: function onCancel(uid) {
      this.$emit('cancel', uid);
    },
    getFileExtension: function getFileExtension(file) {
      return file.extension ? file.extension.substring(1) : '';
    },
    getFileValidationMessage: function getFileValidationMessage(file, isUploadFailed) {
      var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
      var validationMessage = '';
      if (isUploadFailed) {
        validationMessage = localizationService.toLanguageString(main_1.statusUploadFailed, main_1.messages[main_1.statusUploadFailed]);
      } else if (file.validationErrors && file.validationErrors.length > 0) {
        var messageKey = "upload.".concat(file.validationErrors[0]);
        validationMessage = localizationService.toLanguageString(messageKey, main_1.messages[messageKey]);
      }
      return validationMessage;
    },
    getFileExtensionName: function getFileExtensionName(file) {
      switch (file.extension) {
        case '.png':
        case '.jpg':
        case '.jpeg':
        case '.tiff':
        case '.bmp':
        case '.gif':
          return 'file-image';
        case '.mp3':
        case '.mp4':
        case '.wav':
          return 'file-audio';
        case '.mkv':
        case '.webm':
        case '.flv':
        case '.gifv':
        case '.avi':
        case '.wmv':
          return 'file-video';
        case '.txt':
          return 'file-txt';
        case '.pdf':
          return 'file-pdf';
        case '.ppt':
        case '.pptx':
          return 'file-presentation';
        case '.csv':
        case '.xls':
        case '.xlsx':
          return 'file-data';
        case '.html':
        case '.css':
        case '.js':
        case '.ts':
          return 'file-programming';
        case '.exe':
          return 'file-config';
        case '.zip':
        case '.rar':
          return 'file-zip';
        default:
          return 'file';
      }
    },
    getFileExtensionSVG: function getFileExtensionSVG(file) {
      switch (file.extension) {
        case '.png':
        case '.jpg':
        case '.jpeg':
        case '.tiff':
        case '.bmp':
        case '.gif':
          return kendo_svg_icons_1.fileImageIcon;
        case '.mp3':
        case '.mp4':
        case '.wav':
          return kendo_svg_icons_1.fileAudioIcon;
        case '.mkv':
        case '.webm':
        case '.flv':
        case '.gifv':
        case '.avi':
        case '.wmv':
          return kendo_svg_icons_1.fileVideoIcon;
        case '.txt':
          return kendo_svg_icons_1.fileTxtIcon;
        case '.pdf':
          return kendo_svg_icons_1.filePdfIcon;
        case '.ppt':
        case '.pptx':
          return kendo_svg_icons_1.filePresentationIcon;
        case '.csv':
        case '.xls':
        case '.xlsx':
          return kendo_svg_icons_1.fileDataIcon;
        case '.html':
        case '.css':
        case '.js':
        case '.ts':
          return kendo_svg_icons_1.fileProgrammingIcon;
        case '.exe':
          return kendo_svg_icons_1.fileConfigIcon;
        case '.zip':
        case '.rar':
          return kendo_svg_icons_1.fileZipIcon;
        default:
          return kendo_svg_icons_1.fileIcon;
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      files = _a.files,
      disabled = _a.disabled,
      async = _a.async;
    var file = files[0];
    var itemClassName = (0, kendo_vue_common_1.classNames)('k-file-single');
    var _b = utils_1.default.getFileStatus([file]),
      isUploaded = _b[1],
      isUploadFailed = _b[2],
      isUploadValidationFailed = _b[3];
    var showProgressBar = !isUploadValidationFailed && !isUploaded && !isUploadFailed;
    var renderValidationError = function renderValidationError(currentFile, isCurrentUploadFailed) {
      return h("span", {
        "class": 'k-file-info',
        key: '2'
      }, [h("span", {
        "class": 'k-file-name',
        title: currentFile.name,
        attrs: this.v3 ? undefined : {
          title: currentFile.name
        }
      }, [currentFile.name]), h("span", {
        "class": 'k-file-validation-message'
      }, [this.getFileValidationMessage(currentFile, isCurrentUploadFailed)])]);
    };
    var renderFileDetails = function renderFileDetails(currentFile) {
      var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
      var successMessage = localizationService.toLanguageString(main_1.statusUploaded, main_1.messages[main_1.statusUploaded]);
      return h("span", {
        "class": 'k-file-info',
        key: '2'
      }, [h("span", {
        "class": 'k-file-name',
        title: currentFile.name,
        attrs: this.v3 ? undefined : {
          title: currentFile.name
        }
      }, [currentFile.name]), currentFile.progress !== 100 ? h("span", {
        "class": 'k-file-size'
      }, [utils_1.default.getTotalFilesSizeMessage([currentFile])]) : h("span", {
        "class": 'k-file-validation-message'
      }, [successMessage])]);
    };
    return h("div", {
      "class": itemClassName
    }, [showProgressBar && h(kendo_vue_progressbars_1.ProgressBar, {
      value: file.progress || 0,
      attrs: this.v3 ? undefined : {
        value: file.progress || 0,
        labelVisible: false
      },
      labelVisible: false
    }), h("span", {
      "class": 'k-file-icon-wrapper',
      key: '1'
    }, [h(kendo_vue_common_1.Icon, {
      name: this.getFileExtensionName(file),
      attrs: this.v3 ? undefined : {
        name: this.getFileExtensionName(file),
        icon: this.getFileExtensionSVG(file),
        size: 'xxxlarge'
      },
      icon: this.getFileExtensionSVG(file),
      size: 'xxxlarge',
      "class": 'k-file-icon'
    }), h("span", {
      "class": 'k-file-state'
    })]), isUploadValidationFailed || isUploadFailed ? renderValidationError.call(this, file, isUploadFailed) : renderFileDetails.call(this, file),
    // @ts-ignore  function children
    h(UploadListActionButton_1.UploadListActionButton, {
      uid: file.uid,
      attrs: this.v3 ? undefined : {
        uid: file.uid,
        status: file.status,
        progress: file.progress,
        files: files,
        disabled: disabled,
        async: async
      },
      status: file.status,
      progress: file.progress,
      files: files,
      disabled: disabled,
      async: async,
      onCancel: this.onCancel,
      on: this.v3 ? undefined : {
        "cancel": this.onCancel,
        "remove": this.onRemove,
        "retry": this.onRetry
      },
      onRemove: this.onRemove,
      onRetry: this.onRetry
    })]);
  }
};
exports.UploadListSingleItemVue2 = UploadListSingleItemVue2;
/**
 * @hidden
 */
var UploadListSingleItem = UploadListSingleItemVue2;
exports.UploadListSingleItem = UploadListSingleItem;