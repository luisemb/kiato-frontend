"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadAddButtonVue2 = exports.UploadAddButton = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("./messages/main");
var UploadInput_1 = require("./UploadInput");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
/**
 * @hidden
 */
var UploadAddButtonVue2 = {
  name: 'KendoVueUploadAddButton',
  props: {
    addButtonIndex: Number,
    navigationIndex: Number,
    notFocusedIndex: Number,
    tabIndex: Number,
    async: Object,
    multiple: Boolean,
    disabled: Boolean,
    accept: String,
    id: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  emits: {
    'add': null,
    'click': null
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var elementRef = ref(null);
    var uploadInputRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      elementRef: elementRef,
      uploadInputRef: uploadInputRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  created: function created() {
    this.uploadInputId = (0, kendo_vue_common_1.guid)();
  },
  mounted: function mounted() {
    this.element = this.v3 ? this.elementRef : this.$refs.element;
    this.uploadInput = this.v3 ? this.uploadInputRef : this.$refs.uploadInput;
  },
  watch: {
    navigationIndex: function navigationIndex(_newNavigationIndex, oldNavigationIndex) {
      this._prevNavigationIndex = oldNavigationIndex;
    }
  },
  updated: function updated() {
    var _a = this.$props,
      navigationIndex = _a.navigationIndex,
      addButtonIndex = _a.addButtonIndex,
      notFocusedIndex = _a.notFocusedIndex;
    if (navigationIndex !== this._prevNavigationIndex && this._prevNavigationIndex !== notFocusedIndex && navigationIndex === addButtonIndex && this.element) {
      this.element.focus();
    }
  },
  methods: {
    focus: function focus() {
      if (this.element) {
        this.element.focus();
      }
    },
    onClick: function onClick() {
      if (this.actionElement()) {
        this.actionElement().click();
      }
      this.$emit('click', this.$props.addButtonIndex);
    },
    onAdd: function onAdd(files) {
      this.$emit('add', files);
    },
    onInputMouseDown: function onInputMouseDown(e) {
      if (this.element) {
        e.preventDefault();
        this.element.focus();
      }
    },
    actionElement: function actionElement() {
      if (this.uploadInput) {
        return this.uploadInput.actionElement();
      }
    }
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      navigationIndex = _a.navigationIndex,
      addButtonIndex = _a.addButtonIndex,
      tabIndex = _a.tabIndex,
      id = _a.id,
      async = _a.async,
      multiple = _a.multiple,
      disabled = _a.disabled,
      accept = _a.accept;
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var selectMessage = localizationService.toLanguageString(main_1.select, main_1.messages[main_1.select]);
    var buttonClassName = (0, kendo_vue_common_1.classNames)('k-upload-button', navigationIndex === addButtonIndex ? 'k-focus' : '');
    return h("div", {
      "class": "k-upload-button-wrap"
    }, [
    // @ts-ignore  function children
    h(kendo_vue_buttons_1.Button, {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        role: 'button',
        type: "button",
        disabled: disabled,
        ariaLabel: selectMessage,
        tabindex: tabIndex
      },
      ref: (0, kendo_vue_common_1.setRef)(this, 'element'),
      role: 'button',
      type: "button",
      disabled: disabled,
      ariaLabel: selectMessage,
      "class": buttonClassName,
      tabindex: tabIndex,
      onClick: this.onClick,
      on: this.v3 ? undefined : {
        "click": this.onClick
      }
    }, this.v3 ? function () {
      return [selectMessage];
    } : [selectMessage]),
    // @ts-ignore  function children
    h(UploadInput_1.UploadInput, {
      id: this.uploadInputId,
      attrs: this.v3 ? undefined : {
        id: this.uploadInputId,
        async: async,
        multiple: multiple,
        disabled: disabled,
        accept: accept
      },
      async: async,
      multiple: multiple,
      disabled: disabled,
      accept: accept,
      onMousedown: this.onInputMouseDown,
      on: this.v3 ? undefined : {
        "mousedown": this.onInputMouseDown,
        "add": this.onAdd
      },
      onAdd: this.onAdd,
      ref: this.v3 ? function (el) {
        _this.uploadInputRef = el;
      } : 'uploadInput'
    })]);
  }
};
exports.UploadAddButtonVue2 = UploadAddButtonVue2;
/**
 * @hidden
 */
var UploadAddButton = UploadAddButtonVue2;
exports.UploadAddButton = UploadAddButton;