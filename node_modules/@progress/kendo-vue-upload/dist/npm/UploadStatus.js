"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadStatusVue2 = exports.UploadStatus = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("./messages/main");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var UploadStatusVue2 = {
  props: {
    isUploading: Boolean,
    isUploaded: Boolean,
    isUploadFailed: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      isUploading = _a.isUploading,
      isUploaded = _a.isUploaded,
      isUploadFailed = _a.isUploadFailed;
    var statusText = '';
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    if (isUploading) {
      statusText = localizationService.toLanguageString(main_1.headerStatusUploading, main_1.messages[main_1.headerStatusUploading]);
    } else if (isUploaded || isUploadFailed) {
      statusText = localizationService.toLanguageString(main_1.headerStatusUploaded, main_1.messages[main_1.headerStatusUploaded]);
    }
    return h("div", {
      "class": (0, kendo_vue_common_1.classNames)('k-upload-status')
    }, [h(kendo_vue_common_1.Icon, {
      name: !isUploading && !isUploadFailed && isUploaded ? 'check' : !isUploading && isUploadFailed ? 'exclamation-circle' : isUploading ? 'upload' : '',
      attrs: this.v3 ? undefined : {
        name: !isUploading && !isUploadFailed && isUploaded ? 'check' : !isUploading && isUploadFailed ? 'exclamation-circle' : isUploading ? 'upload' : '',
        icon: !isUploading && !isUploadFailed && isUploaded ? kendo_svg_icons_1.checkIcon : !isUploading && isUploadFailed ? kendo_svg_icons_1.exclamationCircleIcon : isUploading ? kendo_svg_icons_1.uploadIcon : {}
      },
      icon: !isUploading && !isUploadFailed && isUploaded ? kendo_svg_icons_1.checkIcon : !isUploading && isUploadFailed ? kendo_svg_icons_1.exclamationCircleIcon : isUploading ? kendo_svg_icons_1.uploadIcon : {}
    }), statusText]);
  }
};
exports.UploadStatusVue2 = UploadStatusVue2;
/**
 * @hidden
 */
var UploadStatus = UploadStatusVue2;
exports.UploadStatus = UploadStatus;