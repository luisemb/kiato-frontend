"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadListMultiItemVue2 = exports.UploadListMultiItem = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var utils_1 = require("./utils/utils");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("./messages/main");
var UploadListActionButton_1 = require("./UploadListActionButton");
var kendo_vue_progressbars_1 = require("@progress/kendo-vue-progressbars");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var UploadListMultiItemVue2 = {
  name: 'KendoVueUploadListMultiItem',
  props: {
    files: Array,
    disabled: Boolean,
    async: Object
  },
  // @ts-ignore
  emits: {
    'cancel': null,
    'retry': null,
    'remove': null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onRetry: function onRetry(uid) {
      this.$emit('retry', uid);
    },
    onRemove: function onRemove(uid) {
      this.$emit('remove', uid);
    },
    onCancel: function onCancel(uid) {
      this.$emit('cancel', uid);
    },
    getFileValidationMessage: function getFileValidationMessage(file) {
      var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
      var validationMessage = '';
      if (file.validationErrors && file.validationErrors.length > 0) {
        var messageKey = "upload.".concat(file.validationErrors[0]);
        validationMessage = localizationService.toLanguageString(messageKey, main_1.messages[messageKey]);
      }
      return validationMessage;
    },
    progress: function progress() {
      var files = this.$props.files;
      var sum = 0;
      files.forEach(function (file) {
        sum += file.progress || 0;
      });
      return sum / files.length;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      files = _a.files,
      disabled = _a.disabled,
      async = _a.async;
    var itemClassName = (0, kendo_vue_common_1.classNames)('k-file-multiple');
    var _b = utils_1.default.getFileStatus(files),
      isUploaded = _b[1],
      isUploadFailed = _b[2],
      isUploadValidationFailed = _b[3];
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var totalMessage = localizationService.toLanguageString(main_1.total, main_1.messages[main_1.total]);
    var filesMessage = localizationService.toLanguageString(main_1.files, main_1.messages[main_1.files]);
    var uploadFailedMessage = localizationService.toLanguageString(main_1.statusUploadFailed, main_1.messages[main_1.statusUploadFailed]);
    var successMessage = localizationService.toLanguageString(main_1.statusUploaded, main_1.messages[main_1.statusUploaded]);
    var progress = this.progress();
    var showProgressBar = !isUploadValidationFailed && !isUploaded && !isUploadFailed;
    var mapFiles = function mapFiles() {
      return files.map(function (file) {
        return h("span", {
          key: file.name,
          "class": 'k-file-info'
        }, [h("span", {
          "class": 'k-file-name',
          title: file.name,
          attrs: this.v3 ? undefined : {
            title: file.name
          }
        }, [file.name]), utils_1.default.fileHasValidationErrors(file) ? h("span", {
          "class": 'k-file-validation-message'
        }, [this.getFileValidationMessage(file)]) : h("span", {
          key: "".concat(file.name, "-size"),
          "class": 'k-file-size'
        }, [utils_1.default.getTotalFilesSizeMessage([file])])]);
      }, this);
    };
    return h("div", {
      "class": itemClassName
    }, [showProgressBar && h(kendo_vue_progressbars_1.ProgressBar, {
      value: progress || 0,
      attrs: this.v3 ? undefined : {
        value: progress || 0,
        labelVisible: false
      },
      labelVisible: false
    }), h("span", {
      "class": 'k-file-icon-wrapper'
    }, [h(kendo_vue_common_1.Icon, {
      name: 'copy',
      attrs: this.v3 ? undefined : {
        name: 'copy',
        icon: kendo_svg_icons_1.copyIcon,
        size: 'xxxlarge'
      },
      icon: kendo_svg_icons_1.copyIcon,
      size: 'xxxlarge',
      "class": 'k-file-icon'
    })]), h("span", {
      "class": "k-multiple-files-wrapper"
    }, [mapFiles.call(this), !isUploadFailed ? progress !== 100 ? h("span", {
      "class": 'k-file-summary'
    }, ["".concat(totalMessage, ": ").concat(files.length, " ").concat(filesMessage, ", ").concat(utils_1.default.getTotalFilesSizeMessage(files))]) : h("span", {
      "class": 'k-file-summary k-text-success'
    }, ["".concat(files.length, " ").concat(successMessage)]) : h("span", {
      "class": 'k-file-validation-message'
    }, ["".concat(files.length, " ").concat(uploadFailedMessage)])]),
    // @ts-ignore  function children
    h(UploadListActionButton_1.UploadListActionButton, {
      uid: files[0].uid,
      attrs: this.v3 ? undefined : {
        uid: files[0].uid,
        status: files[0].status,
        progress: progress,
        files: files,
        disabled: disabled,
        async: async
      },
      status: files[0].status,
      progress: progress,
      files: files,
      disabled: disabled,
      async: async,
      onCancel: this.onCancel,
      on: this.v3 ? undefined : {
        "cancel": this.onCancel,
        "remove": this.onRemove,
        "retry": this.onRetry
      },
      onRemove: this.onRemove,
      onRetry: this.onRetry
    })]);
  }
};
exports.UploadListMultiItemVue2 = UploadListMultiItemVue2;
/**
 * @hidden
 */
var UploadListMultiItem = UploadListMultiItemVue2;
exports.UploadListMultiItem = UploadListMultiItem;