// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { Keys, canUseDOM } from '@progress/kendo-vue-common';
import { UploadUI } from './UploadUI';
/**
 * @hidden
 */
var NOT_FOCUSED_INDEX = -2;
/**
 * @hidden
 */
var DEFAULT_INDEX = -1;
/**
 * @hidden
 */
var UploadNavigationVue2 = {
  name: 'KendoVueUploadNavigation',
  props: {
    async: Object,
    className: String,
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: Boolean,
    showActionButtons: Boolean,
    actionsLayout: {
      type: String,
      default: function _default() {
        return 'end';
      }
    },
    tabIndex: Number,
    accept: String,
    groupedFiles: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    notFocusedIndex: Number,
    list: [String, Function, Object],
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  // @ts-ignore
  emits: {
    'add': null,
    'cancel': null,
    'clear': null,
    'upload': null,
    'retry': null,
    'remove': null
  },
  data: function data() {
    return {
      currentNavIndex: NOT_FOCUSED_INDEX
    };
  },
  updated: function updated() {
    // const prevGroupLength = Object.keys(prevProps.groupedFiles).length;
    // const groupLength = Object.keys(this.$props.groupedFiles).length;
    // if (prevGroupLength > groupLength && this.navIndex > DEFAULT_INDEX) {
    //     this.navIndex = this.navIndex - (prevGroupLength - groupLength);
    // }
  },
  methods: {
    actionElement: function actionElement() {
      if (this._uploadUI) {
        return this._uploadUI.actionElement();
      }
    },
    navIndex: function navIndex(_navIndex) {
      if (_navIndex === undefined) {
        return this.currentNavIndex;
      }
      var prevNavIndex = this.navIndex;
      this.currentNavIndex = _navIndex;
      if (_navIndex !== prevNavIndex) {
        this.$forceUpdate();
      }
    },
    focus: function focus() {
      if (this._uploadUI) {
        this._uploadUI.focus();
      }
    },
    onKeyDown: function onKeyDown(event, isRtl) {
      var _a;
      var navIndex = this.navIndex();
      var groupKeys = Object.keys(this.$props.groupedFiles);
      var maxFileIndex = groupKeys.length - 1;
      var maxNavIndex = this.$props.autoUpload || groupKeys.length === 0 ? maxFileIndex : maxFileIndex + 1;
      var cancelButtonIndex = maxFileIndex + 1;
      var uploadButtonIndex = cancelButtonIndex + 1;
      var prevIndex = navIndex === NOT_FOCUSED_INDEX ? DEFAULT_INDEX : navIndex;
      var nextIndex = navIndex;
      switch (event.keyCode) {
        case Keys.up:
          event.preventDefault();
          if (navIndex > -1) {
            nextIndex = prevIndex - 1;
          }
          break;
        case Keys.down:
          event.preventDefault();
          if (navIndex < maxNavIndex) {
            nextIndex = prevIndex + 1;
          }
          break;
        case Keys.left:
          event.preventDefault();
          if (isRtl) {
            if (navIndex === cancelButtonIndex) {
              nextIndex = prevIndex + 1;
            }
          } else {
            if (navIndex === uploadButtonIndex) {
              nextIndex = prevIndex - 1;
            }
          }
          break;
        case Keys.right:
          event.preventDefault();
          if (isRtl) {
            if (navIndex === uploadButtonIndex) {
              nextIndex = prevIndex - 1;
            }
          } else {
            if (navIndex === cancelButtonIndex) {
              nextIndex = prevIndex + 1;
            }
          }
          break;
        case Keys.enter:
          if (navIndex === DEFAULT_INDEX || navIndex === NOT_FOCUSED_INDEX) {
            if (this.actionElement()) {
              if (canUseDOM && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.className.indexOf('k-upload-button')) === -1) {
                this.actionElement().$el.click();
              }
            }
          }
          if (navIndex >= 0 && navIndex <= maxFileIndex) {
            this.onRetry(groupKeys[navIndex]);
          }
          break;
        case Keys.space:
          event.preventDefault();
          if (navIndex === DEFAULT_INDEX || navIndex === NOT_FOCUSED_INDEX) {
            if (this.actionElement()) {
              this.actionElement().$el.click();
            }
          }
          break;
        case Keys.tab:
          nextIndex = NOT_FOCUSED_INDEX;
          break;
        case Keys.delete:
          if (navIndex >= 0 && navIndex <= maxFileIndex) {
            nextIndex = prevIndex - 1;
            this.onRemove(groupKeys[navIndex]);
          }
          break;
        case Keys.esc:
          if (navIndex >= 0 && navIndex <= maxFileIndex) {
            nextIndex = prevIndex - 1;
            this.onCancel(groupKeys[navIndex]);
          }
          break;
        default:
      }
      this.navIndex(nextIndex);
    },
    onCancel: function onCancel(uid) {
      this.$emit('cancel', uid);
    },
    onClear: function onClear() {
      this.navIndex(DEFAULT_INDEX);
      this.$emit('clear');
    },
    onUpload: function onUpload() {
      this.navIndex(DEFAULT_INDEX);
      this.$emit('upload');
    },
    onRetry: function onRetry(uid) {
      this.$emit('retry', uid);
    },
    onRemove: function onRemove(uid) {
      this.navIndex(this.navIndex() > DEFAULT_INDEX ? this.navIndex() - 1 : DEFAULT_INDEX);
      this.$emit('remove', uid);
    },
    onAdd: function onAdd(files) {
      this.navIndex(DEFAULT_INDEX);
      this.$emit('add', files);
    },
    onClick: function onClick(navIndex) {
      this.navIndex(navIndex);
    },
    onFocus: function onFocus() {
      if (this._blurTimeout) {
        clearTimeout(this._blurTimeout);
        this._blurTimeout = undefined;
      }
    },
    onBlurTimeout: function onBlurTimeout() {
      this.navIndex(NOT_FOCUSED_INDEX);
      this._blurTimeout = undefined;
    },
    onBlur: function onBlur() {
      clearTimeout(this._blurTimeout);
      this._blurTimeout = window.setTimeout(this.onBlurTimeout);
    }
  },
  mounted: function mounted() {
    this._uploadUI = this.v3 ? this.uploadUIRef : this.$refs.uploadUI;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var uploadUIRef = ref(null);
    return {
      v3: v3,
      uploadUIRef: uploadUIRef
    };
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      multiple = _a.multiple,
      disabled = _a.disabled,
      showFileList = _a.showFileList,
      showActionButtons = _a.showActionButtons,
      actionsLayout = _a.actionsLayout,
      tabIndex = _a.tabIndex,
      accept = _a.accept,
      groupedFiles = _a.groupedFiles,
      list = _a.list,
      id = _a.id,
      ariaLabelledBy = _a.ariaLabelledBy,
      ariaDescribedBy = _a.ariaDescribedBy,
      async = _a.async;
    return (
      // @ts-ignore  function children
      h(UploadUI, {
        ref: this.v3 ? function (el) {
          _this.uploadUIRef = el;
        } : 'uploadUI',
        "class": this.$props.className,
        onKeydown: this.onKeyDown,
        on: this.v3 ? undefined : {
          "keydown": this.onKeyDown,
          "add": this.onAdd,
          "clear": this.onClear,
          "upload": this.onUpload,
          "remove": this.onRemove,
          "retry": this.onRetry,
          "cancel": this.onCancel,
          "click": this.onClick,
          "focus": this.onFocus,
          "blur": this.onBlur
        },
        navigationIndex: this.currentNavIndex,
        attrs: this.v3 ? undefined : {
          navigationIndex: this.currentNavIndex,
          notFocusedIndex: NOT_FOCUSED_INDEX,
          multiple: multiple,
          disabled: disabled,
          showFileList: showFileList,
          showActionButtons: showActionButtons,
          actionsLayout: actionsLayout,
          tabIndex: tabIndex,
          accept: accept,
          groupedFiles: groupedFiles,
          list: list,
          id: id,
          ariaLabelledBy: ariaLabelledBy,
          ariaDescribedBy: ariaDescribedBy,
          async: async
        },
        notFocusedIndex: NOT_FOCUSED_INDEX,
        onAdd: this.onAdd,
        onClear: this.onClear,
        onUpload: this.onUpload,
        onRemove: this.onRemove,
        onRetry: this.onRetry,
        onCancel: this.onCancel,
        onClick: this.onClick,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        multiple: multiple,
        disabled: disabled,
        showFileList: showFileList,
        showActionButtons: showActionButtons,
        actionsLayout: actionsLayout,
        tabIndex: tabIndex,
        accept: accept,
        groupedFiles: groupedFiles,
        list: list,
        id: id,
        ariaLabelledBy: ariaLabelledBy,
        ariaDescribedBy: ariaDescribedBy,
        async: async
      })
    );
  }
};
/**
 * @hidden
 */
var UploadNavigation = UploadNavigationVue2;
export { UploadNavigation, UploadNavigationVue2 };