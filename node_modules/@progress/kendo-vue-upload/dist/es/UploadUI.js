// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { classNames, setRef } from '@progress/kendo-vue-common';
import { UploadList } from './UploadList';
import { UploadActionButtons } from './UploadActionButtons';
import { UploadDropZone } from './UploadDropZone';
var ADD_BUTTON_NAV_INDEX = -1;
/**
 * @hidden
 */
var UploadUIVue2 = {
  name: 'KendoVueUploadUI',
  props: {
    async: Object,
    className: String,
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: Boolean,
    showActionButtons: Boolean,
    actionsLayout: {
      type: String,
      default: function _default() {
        return 'end';
      }
    },
    tabIndex: Number,
    accept: String,
    groupedFiles: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    navigationIndex: Number,
    notFocusedIndex: Number,
    list: [String, Function, Object],
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  computed: {
    groupsCount: function groupsCount() {
      return Object.keys(this.$props.groupedFiles).length;
    },
    lastGroupIndex: function lastGroupIndex() {
      return this.groupsCount - 1;
    },
    addButtonIndex: function addButtonIndex() {
      return ADD_BUTTON_NAV_INDEX;
    },
    clearButtonIndex: function clearButtonIndex() {
      return this.lastGroupIndex + 1;
    },
    uploadButtonIndex: function uploadButtonIndex() {
      return this.lastGroupIndex + 2;
    },
    isRtl: function isRtl() {
      return this._container && getComputedStyle(this._container).direction === 'rtl' || false;
    }
  },
  methods: {
    actionElement: function actionElement() {
      if (this.uploadDropZone) {
        return this.uploadDropZone.actionElement();
      }
    },
    focus: function focus() {
      if (this.uploadDropZone) {
        return this.uploadDropZone.focus();
      }
    },
    onAdd: function onAdd(files) {
      this.$emit('add', files);
    },
    onRetry: function onRetry(uid) {
      this.$emit('retry', uid);
    },
    onCancel: function onCancel(uid) {
      this.$emit('cancel', uid);
    },
    onClear: function onClear() {
      this.$emit('clear');
    },
    onUpload: function onUpload() {
      this.$emit('upload');
    },
    onRemove: function onRemove(uid) {
      this.$emit('remove', uid);
    },
    onKeyDown: function onKeyDown(event) {
      this.$emit('keydown', event, this.isRtl);
    },
    onFocus: function onFocus(event) {
      this.$emit('focus', event);
    },
    onBlur: function onBlur(event) {
      this.$emit('blur', event);
    },
    onClick: function onClick(navIndex) {
      this.$emit('click', navIndex);
    }
  },
  // @ts-ignore
  emits: {
    'add': null,
    'retry': null,
    'cancel': null,
    'clear': null,
    'upload': null,
    'remove': null,
    'keydown': null,
    'click': null,
    'focus': null,
    'blur': null
  },
  mounted: function mounted() {
    this._container = this.v3 ? this.containerRef : this.$refs.container;
    this.uploadDropZone = this.v3 ? this.uploadDropZoneRef : this.$refs.uploadDropZone;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var containerRef = ref(null);
    var uploadDropZoneRef = ref(null);
    return {
      v3: v3,
      containerRef: containerRef,
      uploadDropZoneRef: uploadDropZoneRef
    };
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      multiple = _a.multiple,
      disabled = _a.disabled,
      tabIndex = _a.tabIndex,
      accept = _a.accept,
      showFileList = _a.showFileList,
      groupedFiles = _a.groupedFiles,
      navigationIndex = _a.navigationIndex,
      showActionButtons = _a.showActionButtons,
      actionsLayout = _a.actionsLayout,
      notFocusedIndex = _a.notFocusedIndex,
      list = _a.list,
      id = _a.id,
      ariaLabelledBy = _a.ariaLabelledBy,
      ariaDescribedBy = _a.ariaDescribedBy,
      async = _a.async;
    var className = classNames('k-upload', 'k-upload-async', this.$props.className, disabled ? 'k-disabled' : '');
    return h("div", {
      ref: setRef(this, 'container'),
      "class": className,
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown,
        "focus": this.onFocus,
        "blur": this.onBlur
      },
      onFocus: this.onFocus,
      onBlur: this.onBlur
    }, [
    // @ts-ignore  function children
    h(UploadDropZone, {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        ariaLabelledBy: ariaLabelledBy,
        ariaDescribedBy: ariaDescribedBy,
        accept: accept,
        async: async,
        addButtonIndex: this.addButtonIndex,
        navigationIndex: navigationIndex,
        notFocusedIndex: notFocusedIndex,
        tabIndex: tabIndex,
        multiple: multiple,
        fileGroup: groupedFiles,
        disabled: disabled
      },
      ariaLabelledBy: ariaLabelledBy,
      ariaDescribedBy: ariaDescribedBy,
      ref: this.v3 ? function (el) {
        _this.uploadDropZoneRef = el;
      } : 'uploadDropZone',
      accept: accept,
      async: async,
      addButtonIndex: this.addButtonIndex,
      navigationIndex: navigationIndex,
      notFocusedIndex: notFocusedIndex,
      tabIndex: tabIndex,
      multiple: multiple,
      onClick: this.onClick,
      on: this.v3 ? undefined : {
        "click": this.onClick,
        "add": this.onAdd
      },
      onAdd: this.onAdd,
      fileGroup: groupedFiles,
      disabled: disabled
    }), showFileList ?
    // @ts-ignore  function children
    h(UploadList, {
      groupedFiles: groupedFiles,
      attrs: this.v3 ? undefined : {
        groupedFiles: groupedFiles,
        disabled: disabled,
        async: async,
        navigationIndex: navigationIndex,
        list: list
      },
      disabled: disabled,
      async: async,
      navigationIndex: navigationIndex,
      list: list,
      onCancel: this.onCancel,
      on: this.v3 ? undefined : {
        "cancel": this.onCancel,
        "remove": this.onRemove,
        "retry": this.onRetry,
        "click": this.onClick
      },
      onRemove: this.onRemove,
      onRetry: this.onRetry,
      onClick: this.onClick
    }) : undefined, showActionButtons ?
    // @ts-ignore  function children
    h(UploadActionButtons, {
      disabled: disabled,
      attrs: this.v3 ? undefined : {
        disabled: disabled,
        navigationIndex: navigationIndex,
        clearButtonIndex: this.clearButtonIndex,
        uploadButtonIndex: this.uploadButtonIndex,
        actionsLayout: actionsLayout
      },
      navigationIndex: navigationIndex,
      clearButtonIndex: this.clearButtonIndex,
      uploadButtonIndex: this.uploadButtonIndex,
      actionsLayout: actionsLayout,
      onUpload: this.onUpload,
      on: this.v3 ? undefined : {
        "upload": this.onUpload,
        "clear": this.onClear,
        "click": this.onClick
      },
      onClear: this.onClear,
      onClick: this.onClick
    }) : undefined]);
  }
};
/**
 * @hidden
 */
var UploadUI = UploadUIVue2;
export { UploadUI, UploadUIVue2 };