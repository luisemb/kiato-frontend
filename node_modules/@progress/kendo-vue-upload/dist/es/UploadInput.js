// @ts-ignore
import { setRef } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { selectTitle, selectNoFilesTitle, select, messages } from './messages/main';
var CHROME_REGEX = /(chrome)[ \/]([\w.]+)/i;
var SAFARI_REGEX = /(webkit)[ \/]([\w.]+)/i;
/**
 * @hidden
 */
var UploadInputVue2 = {
  name: 'KendoVueUploadInput',
  props: {
    async: Object,
    id: String,
    multiple: {
      type: Boolean,
      default: undefined
    },
    disabled: {
      type: Boolean,
      default: undefined
    },
    accept: {
      type: String,
      default: undefined
    },
    hasFiles: {
      type: Boolean,
      default: false
    },
    ariaLabelledBy: {
      type: String,
      default: undefined
    },
    ariaDescribedBy: {
      type: String,
      default: undefined
    }
  },
  // @ts-ignore
  emits: {
    'mousedown': null,
    'add': null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  mounted: function mounted() {
    this._input = this.v3 ? this.inputRef : this.$refs.input;
  },
  methods: {
    onMouseDown: function onMouseDown(e) {
      this.$emit('mousedown', e);
    },
    onAdd: function onAdd() {
      var ua = navigator.userAgent;
      var input = this._input;
      if (input) {
        if (input.files) {
          this.$emit('add', input.files);
        }
        /*
            Chrome and Internet Explorer do not trigger a `change` event
            when a file with the same name is selected a number of consecutive times.
            As a workaround, clear the input value after handling the file.
        */
        if (!(!ua.match(CHROME_REGEX) && ua.match(SAFARI_REGEX))) {
          input.type = '';
          input.type = 'file';
        }
      }
    },
    actionElement: function actionElement() {
      return this._input;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    return {
      v3: v3,
      inputRef: inputRef
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      multiple = _a.multiple,
      async = _a.async,
      disabled = _a.disabled,
      accept = _a.accept,
      hasFiles = _a.hasFiles,
      ariaLabelledBy = _a.ariaLabelledBy,
      ariaDescribedBy = _a.ariaDescribedBy;
    var localizationService = provideLocalizationService(this);
    var message = hasFiles ? selectTitle : selectNoFilesTitle;
    var selectMessage = localizationService.toLanguageString(message, messages[message]);
    var selectLabel = localizationService.toLanguageString(select, messages[select]);
    return h("input", {
      ref: setRef(this, 'input'),
      id: this.id,
      attrs: this.v3 ? undefined : {
        id: this.id,
        autocomplete: 'off',
        name: async.saveField,
        accept: accept,
        type: 'file',
        tabindex: -1,
        multiple: multiple,
        disabled: disabled,
        title: selectMessage,
        "aria-label": ariaLabelledBy !== undefined ? undefined : selectLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy
      },
      "class": 'k-hidden',
      autocomplete: 'off',
      name: async.saveField,
      accept: accept,
      type: 'file',
      tabindex: -1,
      multiple: multiple,
      disabled: disabled,
      onChange: this.onAdd,
      on: this.v3 ? undefined : {
        "change": this.onAdd,
        "mousedown": this.onMouseDown
      },
      onMousedown: this.onMouseDown,
      title: selectMessage,
      "aria-label": ariaLabelledBy !== undefined ? undefined : selectLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy
    });
  }
};
/**
 * @hidden
 */
var UploadInput = UploadInputVue2;
export { UploadInput, UploadInputVue2 };