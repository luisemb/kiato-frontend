// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { classNames } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { Button } from '@progress/kendo-vue-buttons';
import { messages, clearSelectedFiles, uploadSelectedFiles } from './messages/main';
/**
 * @hidden
 */
var UploadActionButtonsVue2 = {
  name: 'KendoVueUploadActionButtons',
  props: {
    disabled: Boolean,
    navigationIndex: Number,
    clearButtonIndex: Number,
    uploadButtonIndex: Number,
    actionsLayout: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  emits: {
    'clear': null,
    'click': null,
    'upload': null
  },
  created: function created() {
    this._prevNavigationIndex = undefined;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var uploadElementRef = ref(null);
    var clearElementRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      uploadElementRef: uploadElementRef,
      clearElementRef: clearElementRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  mounted: function mounted() {
    this._clearElement = this.v3 ? this.clearElementRef : this.$refs.clearElement;
    this._uploadElement = this.v3 ? this.uploadElementRef : this.$refs.uploadElement;
  },
  watch: {
    navigationIndex: function navigationIndex(_newNavigationIndex, oldNavigationIndex) {
      this._prevNavigationIndex = oldNavigationIndex;
    }
  },
  updated: function updated() {
    var _a = this.$props,
      navigationIndex = _a.navigationIndex,
      clearButtonIndex = _a.clearButtonIndex,
      uploadButtonIndex = _a.uploadButtonIndex;
    if (navigationIndex !== this._prevNavigationIndex) {
      if (navigationIndex === clearButtonIndex && this._clearElement) {
        this._clearElement.focus();
      }
      if (navigationIndex === uploadButtonIndex && this._uploadElement) {
        this._uploadElement.focus();
      }
    }
  },
  methods: {
    onClearClick: function onClearClick() {
      if (this.$props.disabled) {
        return;
      }
      this.$emit('clear');
    },
    onUploadClick: function onUploadClick() {
      if (this.$props.disabled) {
        return;
      }
      this.$emit('click', this.$props.uploadButtonIndex);
      this.$emit('upload');
    }
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      disabled = _a.disabled,
      navigationIndex = _a.navigationIndex,
      clearButtonIndex = _a.clearButtonIndex,
      uploadButtonIndex = _a.uploadButtonIndex,
      actionsLayout = _a.actionsLayout;
    var localizationService = provideLocalizationService(this);
    var wrapperClasses = classNames('k-actions', {
      'k-actions-start': actionsLayout === 'start',
      'k-actions-center': actionsLayout === 'center',
      'k-actions-end': actionsLayout === 'end',
      'k-actions-stretched': actionsLayout === 'stretched'
    });
    var clearButtonClasses = classNames('k-clear-selected', navigationIndex === clearButtonIndex ? 'k-focus' : '');
    var uploadButtonClasses = classNames('k-upload-selected', navigationIndex === uploadButtonIndex ? 'k-focus' : '');
    return h("div", {
      "class": wrapperClasses
    }, [
    // @ts-ignore  function children
    h(Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        disabled: disabled,
        tabIndex: -1
      },
      ref: this.v3 ? function (el) {
        _this.clearElementRef = el;
      } : 'clearElement',
      disabled: disabled,
      "class": clearButtonClasses,
      tabIndex: -1,
      onClick: this.onClearClick,
      on: this.v3 ? undefined : {
        "click": this.onClearClick
      }
    }, this.v3 ? function () {
      return [localizationService.toLanguageString(clearSelectedFiles, messages[clearSelectedFiles])];
    } : [localizationService.toLanguageString(clearSelectedFiles, messages[clearSelectedFiles])]),
    // @ts-ignore  function children
    h(Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        disabled: disabled,
        themeColor: 'primary',
        tabIndex: -1
      },
      ref: this.v3 ? function (el) {
        _this.uploadElementRef = el;
      } : 'uploadElement',
      disabled: disabled,
      themeColor: 'primary',
      "class": uploadButtonClasses,
      tabIndex: -1,
      onClick: this.onUploadClick,
      on: this.v3 ? undefined : {
        "click": this.onUploadClick
      }
    }, this.v3 ? function () {
      return [localizationService.toLanguageString(uploadSelectedFiles, messages[uploadSelectedFiles])];
    } : [localizationService.toLanguageString(uploadSelectedFiles, messages[uploadSelectedFiles])])]);
  }
};
/**
 * @hidden
 */
var UploadActionButtons = UploadActionButtonsVue2;
export { UploadActionButtons, UploadActionButtonsVue2 };