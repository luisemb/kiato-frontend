// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { classNames, Icon } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, headerStatusUploading, headerStatusUploaded } from './messages/main';
import { checkIcon, exclamationCircleIcon, uploadIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var UploadStatusVue2 = {
  props: {
    isUploading: Boolean,
    isUploaded: Boolean,
    isUploadFailed: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      isUploading = _a.isUploading,
      isUploaded = _a.isUploaded,
      isUploadFailed = _a.isUploadFailed;
    var statusText = '';
    var localizationService = provideLocalizationService(this);
    if (isUploading) {
      statusText = localizationService.toLanguageString(headerStatusUploading, messages[headerStatusUploading]);
    } else if (isUploaded || isUploadFailed) {
      statusText = localizationService.toLanguageString(headerStatusUploaded, messages[headerStatusUploaded]);
    }
    return h("div", {
      "class": classNames('k-upload-status')
    }, [h(Icon, {
      name: !isUploading && !isUploadFailed && isUploaded ? 'check' : !isUploading && isUploadFailed ? 'exclamation-circle' : isUploading ? 'upload' : '',
      attrs: this.v3 ? undefined : {
        name: !isUploading && !isUploadFailed && isUploaded ? 'check' : !isUploading && isUploadFailed ? 'exclamation-circle' : isUploading ? 'upload' : '',
        icon: !isUploading && !isUploadFailed && isUploaded ? checkIcon : !isUploading && isUploadFailed ? exclamationCircleIcon : isUploading ? uploadIcon : {}
      },
      icon: !isUploading && !isUploadFailed && isUploaded ? checkIcon : !isUploading && isUploadFailed ? exclamationCircleIcon : isUploading ? uploadIcon : {}
    }), statusText]);
  }
};
/**
 * @hidden
 */
var UploadStatus = UploadStatusVue2;
export { UploadStatus, UploadStatusVue2 };