import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => UploadDropZoneData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { GroupedFiles } from './interfaces/FileGroup';
import { UploadUIProps } from './main';
/**
 * @hidden
 */
export interface UploadDropZoneProps extends UploadUIProps {
    async: Object;
    fileGroup: GroupedFiles;
    disabled: boolean | undefined;
}
/**
 * @hidden
 */
export interface UploadDropZoneMethods {
    [key: string]: any;
    focus: () => any;
    onClick: () => any;
    actionElement: () => any;
}
/**
 * @hidden
 */
export interface UploadDropZoneState {
    _documentInterval: any;
    _elementInterval: any;
    _lastDocumentDragOver: Date | null;
    _lastElementDragOver: Date | null;
    v3: boolean;
}
/**
 * @hidden
 */
export interface UploadDropZoneData {
    currentDocumentActive: boolean;
    currentElementActive: boolean;
}
/**
 * @hidden
 */
export interface UploadDropZoneComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface UploadDropZoneAll extends UploadDropZoneMethods, UploadDropZoneState, UploadDropZoneData, UploadDropZoneComputed, Vue2type {
}
/**
 * @hidden
 */
declare let UploadDropZoneVue2: ComponentOptions<Vue2type, DefaultData<UploadDropZoneData>, DefaultMethods<UploadDropZoneAll>, UploadDropZoneComputed, RecordPropsDefinition<UploadDropZoneProps>>;
/**
 * @hidden
 */
declare const UploadDropZone: DefineComponent<UploadDropZoneProps, any, UploadDropZoneData, UploadDropZoneComputed, UploadDropZoneMethods, {}, {}, {}, string, UploadDropZoneProps, UploadDropZoneProps, {}>;
export { UploadDropZone, UploadDropZoneVue2 };
