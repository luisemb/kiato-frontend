// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { classNames } from '@progress/kendo-vue-common';
import { UploadAddButton } from './UploadAddButton.js';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, dropFilesHere } from './messages/main.js';
import utils from './utils/utils.js';
import { UploadStatus } from './UploadStatus.js';
/**
 * @hidden
 */
var TIME_TO_CHECK_DRAG = 100;
/**
 * @hidden
 */
var UploadDropZoneVue2 = {
  name: 'KendoVueUploadDropZone',
  props: {
    addButtonIndex: Number,
    async: Object,
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: Boolean,
    showActionButtons: Boolean,
    actionsLayout: {
      type: String,
      default: function _default() {
        return 'end';
      }
    },
    tabIndex: Number,
    accept: String,
    groupedFiles: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    navigationIndex: Number,
    notFocusedIndex: Number,
    list: [String, Function, Object],
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    fileGroup: Object
  },
  // @ts-ignore
  emits: {
    'add': null,
    'click': null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentDocumentActive: false,
      currentElementActive: false
    };
  },
  created: function created() {
    this.currentElementActive = false;
  },
  mounted: function mounted() {
    this.uploadAddButton = this.v3 ? this.uploadAddButtonRef : this.$refs.uploadAddButton;
    document.addEventListener('dragenter', this.onDocumentDragEnter);
    document.addEventListener('dragover', this.onDocumentDragOver);
  },
  destroyed: !!isV3 ? undefined : function () {
    document.removeEventListener('dragenter', this.onDocumentDragEnter);
    document.removeEventListener('dragover', this.onDocumentDragOver);
  },
  // @ts-ignore
  unmounted: function unmounted() {
    document.removeEventListener('dragenter', this.onDocumentDragEnter);
    document.removeEventListener('dragover', this.onDocumentDragOver);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var uploadAddButtonRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      uploadAddButtonRef: uploadAddButtonRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  computed: {
    dropZoneClasses: function dropZoneClasses() {
      return {
        'k-dropzone': true,
        'k-upload-dropzone': true,
        'k-active': this.currentDocumentActive,
        'k-hover': this.currentElementActive
      };
    }
  },
  methods: {
    actionElement: function actionElement() {
      if (this.uploadAddButton) {
        return this.uploadAddButton.uploadInput;
      }
    },
    focus: function focus() {
      if (this.uploadAddButton) {
        return this.uploadAddButton.focus();
      }
    },
    onDocumentDragEnter: function onDocumentDragEnter() {
      var _this = this;
      if (!this.currentDocumentActive) {
        this.currentDocumentActive = true;
        var documentInterval = function documentInterval() {
          if (_this.isDragOver(_this._lastDocumentDragOver)) {
            _this.currentDocumentActive = false;
            clearInterval(_this._documentInterval);
            _this._documentInterval = null;
            _this._lastDocumentDragOver = null;
          }
        };
        this._documentInterval = setInterval(documentInterval, TIME_TO_CHECK_DRAG);
      }
    },
    onDocumentDragOver: function onDocumentDragOver() {
      this._lastDocumentDragOver = new Date();
    },
    onElementDragEnter: function onElementDragEnter() {
      var _this = this;
      if (!this.currentElementActive) {
        this.currentElementActive = true;
        var elementInterval = function elementInterval() {
          if (_this.isDragOver(_this._lastElementDragOver)) {
            _this.currentElementActive = false;
            clearInterval(_this._elementInterval);
            _this._elementInterval = null;
            _this._lastElementDragOver = null;
          }
        };
        this._elementInterval = setInterval(elementInterval, TIME_TO_CHECK_DRAG);
      }
    },
    onElementDragOver: function onElementDragOver(event) {
      event.preventDefault();
      this._lastElementDragOver = new Date();
    },
    onDrop: function onDrop(event) {
      event.preventDefault();
      var droppedFiles = event.dataTransfer.files;
      if (droppedFiles.length > 0 && !this.$props.disabled) {
        this.$emit('add', droppedFiles);
      }
    },
    isDragOver: function isDragOver(prevDate) {
      return new Date().getTime() - (prevDate || new Date()).getTime() > TIME_TO_CHECK_DRAG;
    },
    onClick: function onClick(eventIndex) {
      this.$emit('click', eventIndex);
    },
    onAdd: function onAdd(files) {
      this.$emit('add', files);
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      multiple = _a.multiple,
      disabled = _a.disabled,
      tabIndex = _a.tabIndex,
      fileGroup = _a.fileGroup,
      accept = _a.accept,
      navigationIndex = _a.navigationIndex,
      notFocusedIndex = _a.notFocusedIndex,
      id = _a.id,
      ariaLabelledBy = _a.ariaLabelledBy,
      ariaDescribedBy = _a.ariaDescribedBy;
    var localizationService = provideLocalizationService(this);
    var dropFilesMessage = localizationService.toLanguageString(dropFilesHere, messages[dropFilesHere]);
    var _b = utils.getFileStatus(fileGroup),
      isUploading = _b[0],
      isUploaded = _b[1],
      isUploadFailed = _b[2],
      isUploadValidationFailed = _b[3];
    var dropZoneClassName = classNames('k-dropzone-hint', {
      // Unsure about that, since it hides the "Drop Files Message" when we remove all uploaded components.
      // 'k-hidden': this.isDragged && !this.elementActive
    });
    var addButtonComponent = function addButtonComponent() {
      var _this = this;
      return (
        // @ts-ignore  function children
        h(UploadAddButton, {
          id: id,
          attrs: this.v3 ? undefined : {
            id: id,
            ariaLabelledBy: ariaLabelledBy,
            ariaDescribedBy: ariaDescribedBy,
            accept: accept,
            async: this.async,
            addButtonIndex: this.addButtonIndex,
            navigationIndex: navigationIndex,
            notFocusedIndex: notFocusedIndex,
            tabIndex: tabIndex,
            multiple: multiple,
            disabled: disabled
          },
          ariaLabelledBy: ariaLabelledBy,
          ariaDescribedBy: ariaDescribedBy,
          ref: this.v3 ? function (el) {
            _this.uploadAddButtonRef = el;
          } : 'uploadAddButton',
          accept: accept,
          async: this.async,
          addButtonIndex: this.addButtonIndex,
          navigationIndex: navigationIndex,
          notFocusedIndex: notFocusedIndex,
          tabIndex: tabIndex,
          multiple: multiple,
          disabled: disabled,
          onClick: this.onClick,
          on: this.v3 ? undefined : {
            "click": this.onClick,
            "add": this.onAdd
          },
          onAdd: this.onAdd
        })
      );
    };
    return h("div", {
      "class": this.dropZoneClasses,
      onDrop: this.onDrop,
      on: this.v3 ? undefined : {
        "drop": this.onDrop,
        "dragenter": this.onElementDragEnter,
        "dragover": this.onElementDragOver
      },
      onDragenter: this.onElementDragEnter,
      onDragover: this.onElementDragOver
    }, [addButtonComponent.call(this), isUploading || isUploaded || isUploadFailed || isUploadValidationFailed ?
    // @ts-ignore  function children
    h(UploadStatus, {
      isUploading: isUploading,
      attrs: this.v3 ? undefined : {
        isUploading: isUploading,
        isUploaded: isUploaded,
        isUploadFailed: isUploadFailed
      },
      isUploaded: isUploaded,
      isUploadFailed: isUploadFailed
    }) : h("div", {
      "class": dropZoneClassName
    }, [dropFilesMessage])]);
  }
};
/**
 * @hidden
 */
var UploadDropZone = UploadDropZoneVue2;
export { UploadDropZone, UploadDropZoneVue2 };