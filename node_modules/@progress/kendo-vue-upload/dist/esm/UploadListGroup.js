// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { canUseDOM, classNames, getTemplate, setRef } from '@progress/kendo-vue-common';
import { UploadFileStatus } from './interfaces/UploadFileStatus.js';
import { UploadListSingleItem } from './UploadListSingleItem.js';
import { UploadListMultiItem } from './UploadListMultiItem.js';
import utils from './utils/utils.js';
/**
 * @hidden
 */
var UploadListGroupVue2 = {
  name: 'KendoVueUploadListGroup',
  props: {
    files: Array,
    async: Object,
    disabled: Boolean,
    navigationIndex: Number,
    list: [String, Function, Object],
    index: Number
  },
  // @ts-ignore
  emits: {
    'cancel': null,
    'click': null,
    'retry': null,
    'remove': null
  },
  mounted: function mounted() {
    this._element = this.v3 ? this.elementRef : this.$refs.element;
  },
  updated: function updated() {
    var _a = this.$props,
      navigationIndex = _a.navigationIndex,
      index = _a.index;
    if (navigationIndex === index && this._element && canUseDOM && document.activeElement !== this._element) {
      this._element.focus();
    }
  },
  methods: {
    onClick: function onClick() {
      this.$emit('click', this.$props.index);
    },
    onRetry: function onRetry(uid) {
      this.$emit('retry', uid);
    },
    onRemove: function onRemove(uid) {
      this.$emit('remove', uid);
    },
    onCancel: function onCancel(uid) {
      this.$emit('cancel', uid);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var elementRef = ref(null);
    return {
      v3: v3,
      elementRef: elementRef
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      files = _a.files,
      async = _a.async,
      disabled = _a.disabled,
      navigationIndex = _a.navigationIndex,
      index = _a.index,
      list = _a.list;
    var firstFile = files[0];
    var isFileSuccess = firstFile.status === UploadFileStatus.Uploaded || firstFile.status === UploadFileStatus.Initial;
    var validationErrors = utils.filesHaveValidationErrors(files);
    var actionFailed = firstFile.status === UploadFileStatus.UploadFailed || firstFile.status === UploadFileStatus.RemoveFailed;
    var liClassName = classNames('k-file', {
      'k-file-invalid': validationErrors,
      'k-file-error': actionFailed,
      'k-file-progress': firstFile.status === UploadFileStatus.Uploading,
      'k-file-success': isFileSuccess,
      'k-focus': navigationIndex === index
    });
    var itemComponent;
    var defaultItemRendering = files.length === 1 ?
    // @ts-ignore
    h(UploadListSingleItem, {
      files: files,
      attrs: this.v3 ? undefined : {
        files: files,
        async: async,
        disabled: disabled
      },
      async: async,
      disabled: disabled,
      onCancel: this.onCancel,
      on: this.v3 ? undefined : {
        "cancel": this.onCancel,
        "remove": this.onRemove,
        "retry": this.onRetry
      },
      onRemove: this.onRemove,
      onRetry: this.onRetry
    }) :
    // @ts-ignore
    h(UploadListMultiItem, {
      files: files,
      attrs: this.v3 ? undefined : {
        files: files,
        async: async,
        disabled: disabled
      },
      async: async,
      disabled: disabled,
      onCancel: this.onCancel,
      on: this.v3 ? undefined : {
        "cancel": this.onCancel,
        "remove": this.onRemove,
        "retry": this.onRetry
      },
      onRemove: this.onRemove,
      onRetry: this.onRetry
    });
    itemComponent = getTemplate.call(this, {
      h: h,
      template: this.$props.list,
      defaultRendering: defaultItemRendering,
      additionalProps: this.$props,
      additionalListeners: {
        retry: this.onRetry,
        remove: this.onRemove,
        cancel: this.onCancel
      }
    });
    return h("li", {
      ref: setRef(this, 'element'),
      "class": liClassName,
      "data-uid": firstFile.uid,
      attrs: this.v3 ? undefined : {
        "data-uid": firstFile.uid,
        tabindex: -1
      },
      tabindex: -1,
      onClick: this.onClick,
      on: this.v3 ? undefined : {
        "click": this.onClick
      }
    }, [itemComponent]);
  }
};
/**
 * @hidden
 */
var UploadListGroup = UploadListGroupVue2;
export { UploadListGroup, UploadListGroupVue2 };