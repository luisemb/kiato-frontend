"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeViewDragClueVue2 = exports.TreeViewDragClue = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var TreeViewDragClueVue2 = {
  name: 'KendoTreeViewDragClue',
  props: {},
  data: function data() {
    return {
      visible: false,
      top: 0,
      left: 0,
      text: '',
      operationIconName: 'cancel',
      operationSvg: kendo_svg_icons_1.cancelIcon
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultStyle = {
      display: 'block',
      position: 'absolute',
      zIndex: 20000,
      padding: '4px 6px'
    };
    var dynamicStyle = {
      top: this.top + 'px',
      left: this.left + 'px'
    };
    return this.visible && h("div", {
      "class": "k-header k-drag-clue",
      style: __assign(__assign({}, defaultStyle), dynamicStyle)
    }, [h(kendo_vue_common_1.Icon, {
      name: (0, kendo_vue_common_1.getIconName)(this.operationIconName),
      attrs: this.v3 ? undefined : {
        name: (0, kendo_vue_common_1.getIconName)(this.operationIconName),
        icon: this.operationSvg
      },
      icon: this.operationSvg,
      "class": 'k-drag-status'
    }), this.text]);
  },
  methods: {
    show: function show(top, left, text, operationIconName) {
      this.visible = true;
      this.top = top;
      this.left = left;
      this.text = text;
      if (typeof operationIconName === 'string') {
        this.operationIconName = operationIconName;
      } else {
        this.operationSvg = operationIconName;
      }
    },
    hide: function hide() {
      this.visible = false;
    }
  }
};
exports.TreeViewDragClueVue2 = TreeViewDragClueVue2;
/**
 * Represents the Kendo UI for Vue Native TreeViewDragClue component which renders a clue when an item is dragged.
 *
 * {% meta height:400 %}
 * {% embed_file drag/single/main.vue preview %}
 * {% embed_file drag/single/main.js %}
 * {% endmeta %}
 *
 *  ## Methods
 *
 *  ### hide
 *  Hides the TreeViewDragClue component.
 *
 *  ### show
 *  Displays the TreeViewDragClue component.
 *
 *  #### Parameters
 *  ##### top <span class='code'>number</span>
 *  The `top` CSS position of the component.
 *
 *  ##### left <span class='code'>number</span>
 *  The `left` CSS position of the component.
 *
 *  ##### text <span class='code'>string</span>
 *  The text of the component.
 *
 *  ##### operationClassName <span class='code'>string</span>
 *  The CSS class name which is related to the specific drop operation.
 */
var TreeViewDragClue = TreeViewDragClueVue2;
exports.TreeViewDragClue = TreeViewDragClue;