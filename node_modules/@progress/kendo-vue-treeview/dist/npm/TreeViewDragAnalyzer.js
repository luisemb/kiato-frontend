"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeViewDragAnalyzer = void 0;
var consts_1 = require("./utils/consts");
var DROPZONE_BOUNDARY_DELTA = 6;
/**
 * A class which provides an API for analyzing the `drag` events
 *  of the TreeView.
 *
 * {% meta height:400 %}
 * {% embed_file drag/single/main.vue preview %}
 * {% embed_file drag/single/main.js %}
 * {% endmeta %}
 *
 *  ### destinationMeta <span class='code'>{ itemHierarchicalIndex: string; treeViewGuid: string; }</span>
 *  Returns an object which contains:
 *  * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and
 *  * The `guid` of the destination TreeView (the TreeView which renders the destination item).
 *
 *  ### isDropAllowed <span class='code'>boolean</span>
 *  Returns `true` if dropping is allowed. Otherwise, returns `false`.
 */
var TreeViewDragAnalyzer = /** @class */ (function () {
    /**
     * @param event - The event that will be analyzed.
     */
    function TreeViewDragAnalyzer(event) {
        this.event = event;
        this.initialized = false;
        this.itemId = event.itemHierarchicalIndex;
        this.treeViewGuid = event.target.guid();
    }
    /**
     * The method which initializes the analyzer.
     * Invoke the method before you call any other methods.
     *
     * @returns - The analyzer object of the `drag` event.
     */
    TreeViewDragAnalyzer.prototype.init = function () {
        if (!this.initialized) {
            this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));
            this.initialized = true;
        }
        return this;
    };
    Object.defineProperty(TreeViewDragAnalyzer.prototype, "isDropAllowed", {
        /**
         * Returns `true` if dropping is allowed. Otherwise, returns `false`.
         */
        get: function () {
            if (this.initialized && this.destItemId && this.destTreeViewGuid) {
                // Disallow circular references.
                return !(("".concat(this.destTreeViewGuid, "_").concat(this.destItemId, "_")).
                    startsWith("".concat(this.treeViewGuid, "_").concat(this.itemId, "_")));
            }
            else {
                return false;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreeViewDragAnalyzer.prototype, "destinationMeta", {
        /**
         * Returns an object which contains:
         * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and
         * * The `guid` of the destination TreeView (the TreeView which renders the destination item).
         */
        get: function () {
            return { itemHierarchicalIndex: this.destItemId, treeViewGuid: this.destTreeViewGuid };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the specific drop operation.
     *
     * @returns - The following values are returned:
     * * `before`&mdash;Indicates that the dragged item is positioned at the beginning of the destination item.
     * * `after`&mdash;Indicates that the dragged item is positioned at the end of the destination item.
     * * `child`&mdash;Indicates that the dragged item is positioned in the middle of the destination item.
     * * `undefined`&mdash;Indicates that dropping is not allowed.
     */
    TreeViewDragAnalyzer.prototype.getDropOperation = function () {
        if (this.initialized && this.isDropAllowed) {
            var _a = this.destDomNodeWithMeta.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
            if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {
                return 'after';
            }
            else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {
                return 'before';
            }
            else {
                return 'child';
            }
        }
        else {
            return undefined;
        }
    };
    TreeViewDragAnalyzer.prototype.setDestimationMeta = function (element) {
        var node = element;
        while (node && !node[consts_1.DOM_KENDO_ITEM_ID_FIELD]) {
            node = node.parentNode;
        }
        if (node && node[consts_1.DOM_KENDO_ITEM_ID_FIELD]) {
            this.destDomNodeWithMeta = node;
            this.destItemId = node[consts_1.DOM_KENDO_ITEM_ID_FIELD];
            this.destTreeViewGuid = node[consts_1.DOM_KENDO_TREEVIEW_GUID_FIELD];
        }
    };
    return TreeViewDragAnalyzer;
}());
exports.TreeViewDragAnalyzer = TreeViewDragAnalyzer;
