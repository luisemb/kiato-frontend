var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { classNames, guid, Draggable, kendoThemeMaps, getTemplate, setRef, getRef, Icon } from '@progress/kendo-vue-common';
import { createId } from './utils/itemIdUtils';
import { isItemExpandedAndWithChildren, hasChildren } from './utils/itemUtils';
import { Reveal } from '@progress/kendo-vue-animation';
import { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';
import { caretAltDownIcon, caretAltLeftIcon, caretAltRightIcon } from '@progress/kendo-svg-icons';
var sizeMap = kendoThemeMaps.sizeMap;
/**
 * @hidden
 */
var TreeViewItemVue2 = {
  name: 'KendoTreeViewItem',
  props: {
    item: Object,
    itemId: String,
    treeGuid: String,
    animate: Boolean,
    focusedItemId: String,
    tabbableItemId: String,
    fieldsService: Object,
    itemUI: Object,
    ariaMultiSelectable: Boolean,
    expandIcons: Boolean,
    checkboxes: Boolean,
    onFocusDomElNeeded: Object,
    draggable: Boolean,
    isRtl: Boolean,
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    disabled: Boolean,
    ariaLevel: Number
  },
  computed: {
    fieldsSvc: function fieldsSvc() {
      return this.$props.fieldsService;
    },
    currentTabIndex: function currentTabIndex() {
      return (this.$props.focusedItemId || this.$props.tabbableItemId) === this.itemId ? 0 : -1;
    },
    ariaExpanded: function ariaExpanded() {
      return this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()) ? Boolean(this.fieldsSvc.expanded(this.item)) : undefined;
    },
    ariaChecked: function ariaChecked() {
      if (this.$props.checkboxes) {
        if (this.fieldsSvc.checked(this.item)) {
          return 'true';
        } else {
          return this.fieldsSvc.checkIndeterminate(this.item) ? 'mixed' : 'false';
        }
      } else {
        return undefined;
      }
    },
    ariaSelected: function ariaSelected() {
      if (this.fieldsSvc.selected(this.item)) {
        return true;
      } else if (this.$props.ariaMultiSelectable) {
        return this.computedDisabled ? undefined : false;
      } else {
        return undefined;
      }
    },
    computedDisabled: function computedDisabled() {
      var itemDisabled = this.fieldsSvc.disabled(this.item);
      return itemDisabled !== undefined ? itemDisabled : this.disabled;
    }
  },
  created: function created() {
    this.itemGuid = guid();
    this.prevFocusedItemId = this.focusedItemId;
    this.prevFieldsService = this.fieldsService;
    this.prevItem = this.item;
  },
  data: function data() {
    return {
      isMounted: false
    };
  },
  watch: {
    focusedItemId: function focusedItemId(_, oldValue) {
      this.prevFocusedItemId = oldValue;
    },
    fieldsService: function fieldsService(_, oldValue) {
      this.prevFieldsService = oldValue;
    },
    item: function item(_, oldValue) {
      this.prevItem = oldValue;
    }
  },
  mounted: function mounted() {
    var focusedItemId = this.$props.focusedItemId;
    var currentItemId = this.itemId;
    if (focusedItemId && focusedItemId === currentItemId) {
      this.$emit('focusdomelneeded', this.$el);
    }
    this.checkboxElement = getRef(this, 'checkboxElement');
    if (this.checkboxElement) {
      this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
    }
    this.assignDraggableMeta(this.$refs.treemid);
    this.isMounted = true;
  },
  updated: function updated() {
    var focusedItemId = this.$props.focusedItemId;
    if (focusedItemId && focusedItemId !== this.prevFocusedItemId && focusedItemId === this.itemId) {
      this.$emit('focusdomelneeded', this.$el);
    }
    this.checkboxElement = getRef(this, 'checkboxElement');
    if (this.checkboxElement) {
      var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
      if (indeterminate !== this.prevFieldsService.checkIndeterminate(this.prevItem)) {
        this.checkboxElement.indeterminate = indeterminate;
      }
    }
    this.assignDraggableMeta(this.$refs.treemid);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh || createElement;
    var subitems = function subitems() {
      return isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ? h("ul", {
        "class": "k-treeview-group",
        role: "group",
        attrs: this.v3 ? undefined : {
          role: "group"
        }
      }, [this.fieldsSvc.children(this.item).map(function (item, index) {
        return h(TreeViewItem, {
          item: item,
          attrs: this.v3 ? undefined : {
            item: item,
            itemId: createId(index, this.itemId),
            treeGuid: this.$props.treeGuid,
            animate: this.$props.animate,
            focusedItemId: this.$props.focusedItemId,
            tabbableItemId: this.$props.tabbableItemId,
            fieldsService: this.$props.fieldsService,
            itemUI: this.$props.itemUI,
            checkboxes: this.$props.checkboxes,
            ariaMultiSelectable: this.$props.ariaMultiSelectable,
            ariaLevel: this.$props.ariaLevel + 1,
            draggable: this.$props.draggable,
            expandIcons: this.$props.expandIcons,
            size: this.$props.size,
            disabled: this.computedDisabled,
            isRtl: this.$props.isRtl
          },
          itemId: createId(index, this.itemId),
          treeGuid: this.$props.treeGuid,
          animate: this.$props.animate,
          focusedItemId: this.$props.focusedItemId,
          tabbableItemId: this.$props.tabbableItemId,
          fieldsService: this.$props.fieldsService,
          itemUI: this.$props.itemUI,
          checkboxes: this.$props.checkboxes,
          ariaMultiSelectable: this.$props.ariaMultiSelectable,
          ariaLevel: this.$props.ariaLevel + 1,
          onItemclick: this.handleItemClick,
          on: this.v3 ? undefined : {
            "itemclick": this.handleItemClick,
            "focusdomelneeded": this.handleFocusDomElNeeded,
            "press": this.handlePress,
            "drag": this.handleDrag,
            "release": this.handleRelease,
            "expandchange": this.handleExpandChange,
            "checkchange": this.handleCheckChange
          },
          onFocusdomelneeded: this.handleFocusDomElNeeded,
          draggable: this.$props.draggable,
          onPress: this.handlePress,
          onDrag: this.handleDrag,
          onRelease: this.handleRelease,
          expandIcons: this.$props.expandIcons,
          onExpandchange: this.handleExpandChange,
          onCheckchange: this.handleCheckChange,
          key: index,
          size: this.$props.size,
          disabled: this.computedDisabled,
          isRtl: this.$props.isRtl
        });
      }, this)]) : undefined;
    };
    var renderExpandIcon = function renderExpandIcon() {
      var renderExpand = this.$props.expandIcons && (
      // If it is explicitly said that the item has children (even not loaded yet)
      // or if the item actually has children, then render the icon.
      this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()));
      return renderExpand && h("span", {
        "class": classNames('k-treeview-toggle', {
          'k-disabled': this.computedDisabled
        })
      }, [h(Icon, {
        name: this.getIconClassName(),
        attrs: this.v3 ? undefined : {
          name: this.getIconClassName(),
          icon: this.getIconSVG()
        },
        icon: this.getIconSVG(),
        onClick: this.handleExpandChange,
        on: this.v3 ? undefined : {
          "click": this.handleExpandChange
        }
      })]);
    };
    var renderCheckbox = function renderCheckbox() {
      var _a;
      if (this.$props.checkboxes) {
        var size = this.$props.size;
        return h("div", {
          "class": "k-checkbox-wrap",
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation"
          }
        }, [h("input", {
          type: "checkbox",
          attrs: this.v3 ? undefined : {
            type: "checkbox",
            "aria-label": this.item.text,
            "aria-hidden": true,
            id: this.itemGuid,
            tabindex: -1
          },
          "class": classNames('k-checkbox k-rounded-md', (_a = {}, _a["k-checkbox-".concat(sizeMap[size] || size)] = size, _a['k-disabled'] = this.computedDisabled, _a)),
          "aria-label": this.item.text,
          "aria-hidden": true,
          checked: this.v3 ? Boolean(this.fieldsSvc.checked(this.item)) : null,
          domProps: this.v3 ? undefined : {
            "checked": Boolean(this.fieldsSvc.checked(this.item))
          },
          id: this.itemGuid,
          tabindex: -1,
          onChange: this.handleCheckChange,
          on: this.v3 ? undefined : {
            "change": this.handleCheckChange
          },
          ref: setRef(this, 'checkboxElement')
        }), h("label", {
          "class": "k-checkbox-label",
          "for": this.itemGuid,
          attrs: this.v3 ? undefined : {
            "for": this.itemGuid
          }
        })]);
      } else {
        return undefined;
      }
    };
    var itemRender = getTemplate.call(this, {
      h: h,
      template: this.$props.itemUI,
      defaultRendering: this.fieldsSvc.text(this.item),
      additionalProps: {
        item: this.item,
        itemHierarchicalIndex: this.itemId
      }
    });
    var itemInPart = function itemInPart() {
      return h("span", {
        "class": this.getContentClassName(),
        style: {
          touchAction: 'none'
        },
        onClick: this.handleItemClick,
        on: this.v3 ? undefined : {
          "click": this.handleItemClick
        }
      }, [h("span", {
        "class": "k-treeview-leaf-text"
      }, [itemRender])]);
    };
    return h("li", {
      "class": classNames('k-treeview-item'),
      tabindex: this.currentTabIndex,
      attrs: this.v3 ? undefined : {
        tabindex: this.currentTabIndex,
        role: "treeitem",
        "aria-level": this.$props.ariaLevel,
        "aria-expanded": this.ariaExpanded,
        "aria-selected": this.ariaSelected,
        "aria-checked": this.ariaChecked,
        "aria-disabled": this.computedDisabled ? true : undefined
      },
      role: "treeitem",
      "aria-level": this.$props.ariaLevel,
      "aria-expanded": this.ariaExpanded,
      "aria-selected": this.ariaSelected,
      "aria-checked": this.ariaChecked,
      "aria-disabled": this.computedDisabled ? true : undefined
    }, [h("div", {
      "class": "k-treeview-mid",
      ref: 'treemid'
    }, [renderExpandIcon.call(this), renderCheckbox.call(this), this.$props.draggable ?
    // @ts-ignore  function children
    h(Draggable, {
      onPress: function onPress(e) {
        return _this.handlePress(e);
      },
      on: this.v3 ? undefined : {
        "press": function onPress(e) {
          return _this.handlePress(e);
        },
        "drag": function drag(e) {
          return _this.handleDrag(e);
        },
        "release": function release(e) {
          return _this.handleRelease(e);
        }
      },
      onDrag: function drag(e) {
        return _this.handleDrag(e);
      },
      onRelease: function release(e) {
        return _this.handleRelease(e);
      }
    }, this.v3 ? function () {
      return [itemInPart.call(_this2)];
    } : [itemInPart.call(_this2)]) : itemInPart.call(this)]), this.$props.animate && this.isMounted ?
    // @ts-ignore  function children
    h(Reveal, {
      appear: this.ariaExpanded,
      attrs: this.v3 ? undefined : {
        appear: this.ariaExpanded,
        transitionEnterDuration: 200,
        transitionExitDuration: 200
      },
      transitionEnterDuration: 200,
      transitionExitDuration: 200,
      key: this.itemGuid + '_animation',
      style: {
        display: 'block'
      }
    }, this.v3 ? function () {
      return [subitems.call(_this2)];
    } : [subitems.call(_this2)]) : subitems.call(this)]);
  },
  methods: {
    handleCheckChange: function handleCheckChange(e, subItem, subItemId) {
      this.$emit('checkchange', e, subItem || this.item, subItemId || this.itemId);
    },
    handleExpandChange: function handleExpandChange(e, subItem, subItemId) {
      this.$emit('expandchange', e, subItem || this.item, subItemId || this.itemId);
    },
    handleItemClick: function handleItemClick(e, subItem, subItemId) {
      this.$emit('itemclick', e, subItem || this.item, subItemId || this.itemId);
    },
    handlePress: function handlePress(e, subItem, subItemId) {
      this.$emit('press', e, subItem || __assign({}, this.item), subItemId || this.itemId);
    },
    handleDrag: function handleDrag(e, subItem, subItemId) {
      this.$emit('drag', e, subItem || this.item, subItemId || this.itemId);
    },
    handleRelease: function handleRelease(e, subItem, subItemId) {
      this.$emit('release', e, subItem || this.item, subItemId || this.itemId);
    },
    handleFocusDomElNeeded: function handleFocusDomElNeeded(e) {
      this.$emit('focusdomelneeded', e);
    },
    getIconClassName: function getIconClassName() {
      var expanded = this.fieldsSvc.expanded(this.item);
      return expanded && !hasChildren(this.item, this.fieldsSvc.getChildrenField()) ? 'loading' : expanded ? 'caret-alt-down' : this.$props.isRtl ? 'caret-alt-left' : 'caret-alt-right';
    },
    getIconSVG: function getIconSVG() {
      var expanded = this.fieldsSvc.expanded(this.item);
      return expanded ? caretAltDownIcon : this.$props.isRtl ? caretAltLeftIcon : caretAltRightIcon;
    },
    getContentClassName: function getContentClassName() {
      return classNames('k-treeview-leaf', {
        'k-focus': this.$props.focusedItemId === this.itemId,
        'k-selected': this.fieldsSvc.selected(this.item),
        'k-disabled': this.computedDisabled
      });
    },
    assignDraggableMeta: function assignDraggableMeta(element) {
      if (element && !element[DOM_KENDO_ITEM_ID_FIELD]) {
        element[DOM_KENDO_ITEM_ID_FIELD] = this.$props.itemId;
        element[DOM_KENDO_TREEVIEW_GUID_FIELD] = this.$props.treeGuid;
      }
    }
  }
};
/**
 * @hidden
 */
var TreeViewItem = TreeViewItemVue2;
export { TreeViewItem, TreeViewItemVue2 };