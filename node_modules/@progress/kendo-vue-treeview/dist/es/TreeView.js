// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Keys, validatePackage, guid, kendoThemeMaps, classNames, templateRendering, getListeners, canUseDOM, isRtl } from '@progress/kendo-vue-common';
import nav from './utils/getItemIdUponKeyboardNavigation';
import { resolveItemId, isEnabledAndAllParentsEnabled, hasChildren } from './utils/itemUtils';
import { TreeViewItem } from './TreeViewItem';
import { ZERO_LEVEL_ZERO_NODE_ID, getItemById as _getItemById } from './utils/itemIdUtils';
import FieldsService from './utils/FieldsService';
import { packageMetadata } from './package-metadata';
import { CHECK_FIELD, CHECK_INDETERMINATE_FIELD, CHILDREN_FIELD, DISABLED_FIELD, EXPAND_FIELD, HAS_CHILDREN_FIELD, SELECT_FIELD, TEXT_FIELD } from './utils/consts';
var sizeMap = kendoThemeMaps.sizeMap;
/**
 * @hidden
 */
var TreeViewVue2 = {
  name: 'KendoTreeView',
  // @ts-ignore
  emits: {
    blur: null,
    focus: null,
    itemdragstart: null,
    itemdragover: null,
    itemdragend: null,
    keydown: null,
    itemclick: null,
    expandchange: null,
    checkchange: null
  },
  props: {
    dataItems: Array,
    animate: {
      type: Boolean,
      default: true
    },
    id: String,
    draggable: Boolean,
    tabIndex: Number,
    focusIdField: String,
    getFocusHierarchicalIndex: Function,
    expandField: {
      type: String,
      default: EXPAND_FIELD
    },
    selectField: {
      type: String,
      default: SELECT_FIELD
    },
    childrenField: {
      type: String,
      default: CHILDREN_FIELD
    },
    hasChildrenField: {
      type: String,
      default: HAS_CHILDREN_FIELD
    },
    expandIcons: Boolean,
    checkboxes: Boolean,
    textField: {
      type: String,
      default: TEXT_FIELD
    },
    disableField: {
      type: String,
      default: DISABLED_FIELD
    },
    checkField: {
      type: String,
      default: CHECK_FIELD
    },
    checkIndeterminateField: {
      type: String,
      default: CHECK_INDETERMINATE_FIELD
    },
    item: [Object, String, Function],
    ariaMultiSelectable: [String, Boolean],
    ariaLabel: String,
    ariaLabelledby: String,
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    }
  },
  data: function data() {
    return {
      currentRtl: false,
      focusedItemId: undefined,
      focusedItemPublicId: undefined,
      tabbableItemId: ZERO_LEVEL_ZERO_NODE_ID
    };
  },
  mounted: function mounted() {
    this.currentRtl = isRtl(this.$el);
  },
  computed: {
    treeGuid: function treeGuid() {
      return this.id || this.innerId;
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.allowExplicitFocus = false;
    this.innerId = guid();
  },
  updated: function updated() {
    this.allowExplicitFocus = false;
    this.refocusDueToFocusIdField();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    this.fieldsSvc = new FieldsService(this.$props);
    var size = this.$props.size;
    return h("div", {
      "class": classNames('k-treeview', (_a = {}, _a["k-treeview-".concat(sizeMap[size] || size)] = size, _a['k-user-select-none'] = this.draggable, _a['k-rtl'] = this.currentRtl, _a)),
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown,
        "focusin": this.onFocus,
        "focusout": this.onBlur
      },
      onFocusin: this.onFocus,
      onFocusout: this.onBlur,
      "aria-multiselectable": this.ariaMultiSelectable ? true : undefined,
      attrs: this.v3 ? undefined : {
        "aria-multiselectable": this.ariaMultiSelectable ? true : undefined,
        "aria-label": this.$props['aria-label'],
        "aria-labelledby": this.$props['aria-labelledby'],
        tabindex: this.$props.tabIndex
      },
      "aria-label": this.$props['aria-label'],
      "aria-labelledby": this.$props['aria-labelledby'],
      tabindex: this.$props.tabIndex,
      style: {
        userSelect: this.draggable ? 'none' : undefined
      }
    }, [h("ul", {
      "class": "k-treeview-lines k-treeview-group",
      role: "tree",
      attrs: this.v3 ? undefined : {
        role: "tree"
      }
    }, [this.dataItems.map(function (item, index) {
      var itemTemplate = templateRendering.call(this, this.item, getListeners.call(this));
      return h(TreeViewItem, {
        item: item,
        attrs: this.v3 ? undefined : {
          item: item,
          itemId: index.toString(),
          treeGuid: this.treeGuid,
          animate: this.$props.animate,
          focusedItemId: this.focusedItemId,
          tabbableItemId: this.tabbableItemId,
          fieldsService: this.fieldsSvc,
          itemUI: itemTemplate,
          checkboxes: this.$props.checkboxes,
          ariaMultiSelectable: this.ariaMultiSelectable,
          draggable: this.$props.draggable,
          expandIcons: this.$props.expandIcons,
          size: size,
          ariaLevel: 1,
          isRtl: this.currentRtl
        },
        itemId: index.toString(),
        treeGuid: this.treeGuid,
        animate: this.$props.animate,
        focusedItemId: this.focusedItemId,
        tabbableItemId: this.tabbableItemId,
        fieldsService: this.fieldsSvc,
        itemUI: itemTemplate,
        checkboxes: this.$props.checkboxes,
        ariaMultiSelectable: this.ariaMultiSelectable,
        onItemclick: this.onItemClick,
        on: this.v3 ? undefined : {
          "itemclick": this.onItemClick,
          "focusdomelneeded": this.onFocusDomElNeeded,
          "press": this.onPress,
          "drag": this.onDrag,
          "release": this.onRelease,
          "expandchange": this.onExpandChange,
          "checkchange": this.onCheckChange
        },
        onFocusdomelneeded: this.onFocusDomElNeeded,
        draggable: this.$props.draggable,
        onPress: this.onPress,
        onDrag: this.onDrag,
        onRelease: this.onRelease,
        expandIcons: this.$props.expandIcons,
        onExpandchange: this.onExpandChange,
        onCheckchange: this.onCheckChange,
        key: index,
        size: size,
        ariaLevel: 1,
        isRtl: this.currentRtl
      });
    }, this)])]);
  },
  methods: {
    onFocusDomElNeeded: function onFocusDomElNeeded(domItem) {
      if (this.allowExplicitFocus) {
        this.focusDomItem(domItem);
      }
    },
    onCheckChange: function onCheckChange(event, item, itemId) {
      this.setFocus(itemId);
      this.dispatchCheckChange(event, item, itemId);
    },
    onExpandChange: function onExpandChange(event, item, itemId) {
      this.setFocus(itemId);
      this.dispatchExpandChange(event, item, itemId);
    },
    onPress: function onPress(_event, item, itemId) {
      this.$emit('itemdragstart', {
        target: this,
        item: item,
        itemHierarchicalIndex: itemId
      });
    },
    onDrag: function onDrag(event, item, itemId) {
      var pageX = event.pageX,
        pageY = event.pageY,
        clientX = event.clientX,
        clientY = event.clientY;
      this.$emit('itemdragover', {
        target: this,
        item: item,
        itemHierarchicalIndex: itemId,
        pageX: pageX,
        pageY: pageY,
        clientX: clientX,
        clientY: clientY
      });
    },
    onRelease: function onRelease(event, item, itemId) {
      var pageX = event.pageX,
        pageY = event.pageY,
        clientX = event.clientX,
        clientY = event.clientY;
      this.$emit('itemdragend', {
        target: this,
        item: item,
        itemHierarchicalIndex: itemId,
        pageX: pageX,
        pageY: pageY,
        clientX: clientX,
        clientY: clientY
      });
    },
    onItemClick: function onItemClick(event, item, itemId) {
      this.setFocus(itemId);
      this.dispatchItemClick(event, item, itemId);
    },
    onFocus: function onFocus(e) {
      clearTimeout(this.blurRequest);
      if (this.focusedItemId === undefined && this.dataItems.length) {
        this.setFocus(this.tabbableItemId);
      }
      this.$emit('focus', e);
    },
    onBlur: function onBlur(e) {
      var _this = this;
      clearTimeout(this.blurRequest);
      if (canUseDOM) {
        this.blurRequest = window.setTimeout(function () {
          return _this.setFocus(undefined);
        }, 0);
      }
      this.$emit('blur', e);
    },
    onKeyDown: function onKeyDown(event) {
      var focusedItem = this.getFocusedItem();
      if (focusedItem) {
        var newItemId = nav(focusedItem, this.focusedItemId, this.dataItems, event.keyCode, this.fieldsSvc);
        if (newItemId !== this.focusedItemId) {
          // This disables the auto-scroll. The scroll is achieved via item focusing.
          event.preventDefault();
          this.allowExplicitFocus = true;
          this.setFocus(newItemId);
        }
        this.dispatchEventsOnKeyDown(event, focusedItem);
      }
      this.$emit('keydown', event);
    },
    dispatchEventsOnKeyDown: function dispatchEventsOnKeyDown(event, focusedItem) {
      var _this = this;
      // isEnabled is the most expensive op and that is why is left last.
      var isEnabled = function isEnabled() {
        return isEnabledAndAllParentsEnabled(_this.focusedItemId, _this.dataItems, _this.fieldsSvc);
      };
      var currentDisabled = this.fieldsSvc.disabled(focusedItem);
      if (event.keyCode === Keys.left && this.fieldsSvc.expanded(focusedItem) && isEnabled()) {
        this.dispatchExpandChange(event, focusedItem, this.focusedItemId);
      } else if (event.keyCode === Keys.right && !this.fieldsSvc.expanded(focusedItem) && (this.fieldsSvc.hasChildren(focusedItem) || hasChildren(focusedItem, this.$props.childrenField)) && isEnabled()) {
        this.dispatchExpandChange(event, focusedItem, this.focusedItemId);
      } else if (event.keyCode === Keys.enter && !currentDisabled) {
        this.dispatchItemClick(event, focusedItem, this.focusedItemId);
      } else if (event.keyCode === Keys.space && !currentDisabled) {
        // W/o preventDefault() long TreeViews gets incorrectly scrolled.
        event.preventDefault();
        this.dispatchCheckChange(event, focusedItem, this.focusedItemId);
      }
    },
    setFocus: function setFocus(focusedItemId) {
      if (focusedItemId) {
        if (this.fieldsSvc.focusIdField) {
          var item = this.getItemById(focusedItemId);
          this.focusedItemId = focusedItemId;
          this.focusedItemPublicId = this.fieldsSvc.focusId(item);
        } else {
          this.focusedItemId = focusedItemId;
        }
      } else {
        var tempId = this.focusedItemId;
        this.focusedItemId = undefined;
        this.focusedItemPublicId = undefined;
        this.tabbableItemId = tempId;
      }
    },
    getFocusedItem: function getFocusedItem() {
      return this.focusedItemId ? this.getItemById(this.focusedItemId) : undefined;
    },
    getItemById: function getItemById(itemId) {
      return _getItemById(itemId, this.dataItems, this.$props.childrenField || CHILDREN_FIELD);
    },
    dispatchCheckChange: function dispatchCheckChange(dispatchedEvent, item, itemId) {
      this.$emit('checkchange', {
        item: item,
        itemHierarchicalIndex: itemId,
        event: dispatchedEvent
      });
    },
    dispatchExpandChange: function dispatchExpandChange(dispatchedEvent, item, itemId) {
      this.$emit('expandchange', {
        item: item,
        itemHierarchicalIndex: itemId,
        event: dispatchedEvent
      });
    },
    dispatchItemClick: function dispatchItemClick(dispatchedEvent, item, itemId) {
      this.$emit('itemclick', {
        item: item,
        itemHierarchicalIndex: itemId,
        event: dispatchedEvent
      });
    },
    refocusDueToFocusIdField: function refocusDueToFocusIdField() {
      if (this.fieldsSvc.focusIdField) {
        var focusedItemPublicId = this.focusedItemPublicId;
        if (focusedItemPublicId) {
          var focusedItemId = this.$props.getFocusHierarchicalIndex ? this.$props.getFocusHierarchicalIndex(focusedItemPublicId) : resolveItemId(focusedItemPublicId, this.fieldsSvc.focusIdField, this.dataItems, this.$props.childrenField);
          if (focusedItemId !== this.focusedItemId) {
            this.allowExplicitFocus = true;
            this.focusedItemId = focusedItemId;
          }
        }
      }
    },
    // private get ariaMultiSelectable() {
    //     return this.$props['aria-multiselectable'] === true || this.$props['aria-multiselectable'] === 'true';
    // }
    focusDomItem: function focusDomItem(domItem) {
      domItem.focus();
    },
    guid: function guid() {
      return this.treeGuid;
    }
  }
};
/**
 *
 *
 *  Represents the [Kendo UI for Vue Native TreeView component]({% slug overview_treeview %}).
 *
 *  ```jsx
 *  <template>
 *    <div>
 *      <TreeView :dataItems="tree" />
 *    </div>
 *  </template>
 *
 *  <script>
 *  import { TreeView } from '@progress/kendo-vue-treeview';
 *
 *  export default {
 *    components: {
 *      TreeView,
 *    },
 *    data() {
 *      return {
 *        tree: [
 *          {
 *            text: 'Furniture',
 *            expanded: true,
 *            items: [
 *              {
 *                text: 'Tables & Chairs',
 *              },
 *              {
 *                text: 'Sofas',
 *              },
 *              {
 *                text: 'Occasional Furniture',
 *              },
 *            ],
 *          },
 *          {
 *            text: 'Decor',
 *            expanded: true,
 *            items: [
 *              {
 *                text: 'Bed Linen',
 *              },
 *              {
 *                text: 'Curtains & Blinds',
 *              },
 *              {
 *                text: 'Carpets',
 *              },
 *            ],
 *          },
 *        ],
 *      };
 *    },
 *  };
 *  </script>
 *  ```
 *
 *
 *
 *  ### props <span class='code'>Readonly&lt;[TreeViewProps]({% slug api_treeview_treeviewprops %})&gt;</span>
 *  The props of the TreeView component.
 *
 *  ### guid <span class='code'>string</span>
 *  Returns the `guid` which is associated with the TreeView.
 */
var TreeView = TreeViewVue2;
export { TreeView, TreeViewVue2 };