import { TreeViewCheckChangeEvent } from './events';
import { TreeViewCheckDescriptor } from './TreeViewOperationDescriptors';
/**
 * The settings that configure the update of the check descriptor.
 */
export interface TreeViewCheckChangeSettings {
    /**
     * Determines a selection of a single node at a time.
     */
    singleMode?: boolean;
    /**
     * Determines if the children checkboxes will be selected when the user selects the parent checkbox.
     */
    checkChildren?: boolean;
    /**
     * Determines if the parent checkbox will be selected when the user selects all its children checkboxes.
     */
    checkParents?: boolean;
}
/**
 *
 * A helper function which updates the check descriptor.
 *
 * {% meta height:650 %}
 * {% embed_file checkbox/checkbox-helper/main.vue preview %}
 * {% embed_file checkbox/checkbox-helper/main.js %}
 * {% endmeta %}
 *
 *  #### Parameters
 *  ##### event <span class='code'>[TreeViewExpandChangeEvent]({% slug api_treeview_treeviewexpandchangeevent %})</span>
 *  The event that triggered the change.
 *
 *  ##### check <span class='code'>string[] | [TreeViewCheckDescriptor]({% slug api_treeview_treeviewcheckdescriptor %})</span>
 *  The check descriptor that will be updated.
 *
 *  ##### data? <span class='code'>any[] | null</span>
 *  The TreeView items.
 *
 *  ##### settings <span class='code'>[TreeViewCheckChangeSettings]({% slug api_treeview_treeviewcheckchangesettings %})</span>
 *  The additional settings that configure the update of the check descriptor.
 *
 *  ##### childrenField? <span class='code'>string</span>
 *  The field that points to the dataItem sub items. Defaults to `items`.
 *  The default behavior allows the selection of multiple items.
 *
 *  #### Returns
 *  <span class='code'>any</span> - The updated copy of the input check descriptor.
 */
export declare function handleTreeViewCheckChange(event: TreeViewCheckChangeEvent, check: string[] | TreeViewCheckDescriptor, data?: any[] | null, settings?: TreeViewCheckChangeSettings, childrenField?: string): any;
