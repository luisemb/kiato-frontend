declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
/**
 * @hidden
 */
export interface HeaderProps {
    ref?: string;
    staticHeaders: boolean;
    headerRow: any;
    size: string;
    columnResize: {
        colGroupHeader: any | null;
        setIsRtl: (isRtl: boolean) => void;
    };
    cols: Element[];
    draggable: boolean;
}
/**
 * @hidden
 */
export interface HeaderMethods extends Vue2type {
    triggerClick: () => void;
    triggerEdit: (dataItem: any) => void;
    triggerAdd: (dataItem: any) => void;
    triggerCancel: (dataItem: any) => void;
    triggerSave: (dataItem: any) => void;
    triggerRemove: (dataItem: any) => void;
}
/**
 * @hidden
 */
export interface HeaderData {
    divStyle: any;
    element: any | null;
    headerWrap: any | null;
    table: any | null;
    colGroupHeaderRef: any;
    tableRef: any;
    headerWrapRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface HeaderComputed {
    [key: string]: any;
    wrapperClass: string;
}
/**
 * @hidden
 */
export interface HeaderAll extends HeaderMethods, HeaderData, HeaderComputed {
}
/**
 * @hidden
 */
declare let HeaderVue2: ComponentOptions<Vue2type, DefaultData<{}>, DefaultMethods<HeaderAll>, {}, RecordPropsDefinition<HeaderProps>>;
/**
 * @hidden
 */
declare const Header: DefineComponent<HeaderProps, any, HeaderData, HeaderComputed, HeaderMethods, {}, {}, {}, string, HeaderProps, HeaderProps, {}>;
export { Header, HeaderVue2 };
