"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderVue2 = exports.Header = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var browser_support_service_1 = require("../utils/browser-support.service");
var main_1 = require("../utils/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var HeaderVue2 = {
  props: {
    staticHeaders: Boolean,
    headerRow: Object,
    columnResize: Object,
    cols: Array,
    size: String,
    draggable: Boolean
  },
  data: function data() {
    return {
      divStyle: {},
      element: null,
      headerWrap: null,
      table: null
    };
  },
  computed: {
    wrapperClass: function wrapperClass() {
      return {
        'k-grid-header': true,
        'k-grid-draggable-header': this.$props.draggable
      };
    },
    tableClass: function tableClass() {
      var _a;
      var size = this.$props.size;
      return _a = {
        'k-table': true,
        'k-grid-header-table': true
      }, _a["k-table-".concat(kendo_vue_common_1.kendoThemeMaps.sizeMap[size] || size)] = size, _a;
    }
  },
  mounted: function mounted() {
    this.headerWrap = (0, kendo_vue_common_1.getRef)(this, 'headerWrap');
    this.table = (0, kendo_vue_common_1.getRef)(this, 'table');
    this.$props.columnResize.colGroupHeader = (0, kendo_vue_common_1.getRef)(this, 'colGroupHeader');
    var scrollbarWidth = new browser_support_service_1.BrowserSupportService().scrollbarWidth;
    var rtl = (0, main_1.isRtl)(this.$el);
    if (this.$props.columnResize) {
      this.$props.columnResize.setIsRtl(rtl);
    }
    var padding = Math.max(0, scrollbarWidth) + 'px';
    var right = rtl ? 0 : padding;
    var left = rtl ? padding : 0;
    this.divStyle = {
      padding: "0 ".concat(right, " 0 ").concat(left)
    };
  },
  methods: {
    setScrollLeft: function setScrollLeft(scrollLeft) {
      if (this.headerWrap) {
        this.headerWrap.scrollLeft = scrollLeft;
      }
    },
    setWidth: function setWidth(width) {
      if (this.table) {
        this.table.style.width = width + 'px';
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var headerWrapRef = ref(null);
    var tableRef = ref(null);
    var colGroupHeaderRef = ref(null);
    return {
      v3: v3,
      headerWrapRef: headerWrapRef,
      tableRef: tableRef,
      colGroupHeaderRef: colGroupHeaderRef
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    if (!this.$props.staticHeaders) {
      return this.$props.headerRow;
    }
    return h("div", {
      "class": this.wrapperClass,
      style: this.divStyle
    }, [h("div", {
      ref: (0, kendo_vue_common_1.setRef)(this, 'headerWrap'),
      "class": "k-grid-header-wrap"
    }, [h("table", {
      "class": this.tableClass,
      ref: (0, kendo_vue_common_1.setRef)(this, 'table'),
      role: "none",
      attrs: this.v3 ? undefined : {
        role: "none"
      }
    }, [h("colgroup", {
      ref: (0, kendo_vue_common_1.setRef)(this, 'colGroupHeader')
    }, [this.$props.cols]), this.$props.headerRow])])]);
  }
};
exports.HeaderVue2 = HeaderVue2;
/**
 * @hidden
 */
var Header = HeaderVue2;
exports.Header = Header;