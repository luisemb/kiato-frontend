"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupPanelVue2 = exports.GroupPanel = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var GroupingIndicator_1 = require("../drag/GroupingIndicator");
var main_1 = require("../messages/main");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
/**
 * @hidden
 */
var GroupPanelVue2 = {
  props: {
    group: Array,
    resolveTitle: Function,
    ariaControls: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    pressHandler: function pressHandler(event, element) {
      this.$emit('pressHandler', event, element);
    },
    dragHandler: function dragHandler(event, element) {
      this.$emit('dragHandler', event, element);
    },
    releaseHandler: function releaseHandler(event) {
      this.$emit('releaseHandler', event);
    },
    onGroupRemove: function onGroupRemove(event, index) {
      var newGroups = this.$props.group.slice();
      newGroups.splice(index, 1);
      this.$emit('groupChange', newGroups, event);
    },
    onGroupSortChange: function onGroupSortChange(event, index, groupDesc, dir) {
      var group = Object.assign({}, groupDesc, {
        dir: dir
      });
      var newGroups = this.$props.group.slice();
      newGroups.splice(index, 1, group);
      this.$emit('groupChange', newGroups, event);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var groupsProp = this.$props.group || [];
    var ariaControls = this.$props.ariaControls;
    var groups = groupsProp.map(function (groupDesc, index) {
      var _this = this;
      return (
        // @ts-ignore
        h(GroupingIndicator_1.GroupingIndicator, {
          key: index,
          dir: groupDesc.dir || 'asc',
          attrs: this.v3 ? undefined : {
            dir: groupDesc.dir || 'asc',
            title: this.$props.resolveTitle(groupDesc.field)
          },
          title: this.$props.resolveTitle(groupDesc.field),
          onRemove: function onRemove(event) {
            return _this.onGroupRemove(event, index);
          },
          on: this.v3 ? undefined : {
            "remove": function onRemove(event) {
              return _this.onGroupRemove(event, index);
            },
            "sortChange": function sortChange(event, dir) {
              _this.onGroupSortChange(event, index, groupDesc, dir);
            },
            "press": this.pressHandler,
            "drag": this.dragHandler,
            "release": this.releaseHandler
          },
          onSortChange: function sortChange(event, dir) {
            _this.onGroupSortChange(event, index, groupDesc, dir);
          },
          onPress: this.pressHandler,
          onDrag: this.dragHandler,
          onRelease: this.releaseHandler
        })
      );
    }, this);
    var groupHeaderAriaLabelValue = (0, kendo_vue_intl_1.provideLocalizationService)(this).toLanguageString(main_1.groupHeaderAriaLabel, main_1.messages[main_1.groupHeaderAriaLabel]);
    return h("div", {
      "class": "k-grouping-header",
      role: 'toolbar',
      attrs: this.v3 ? undefined : {
        role: 'toolbar',
        "aria-label": groupHeaderAriaLabelValue,
        "aria-controls": ariaControls
      },
      "aria-label": groupHeaderAriaLabelValue,
      "aria-controls": ariaControls
    }, [!!groups.length && h("div", {
      "class": "k-chip-list k-chip-list-md"
    }, [groups]), h("div", {
      "class": "k-grouping-drop-container"
    }, [!groups.length && (0, kendo_vue_intl_1.provideLocalizationService)(this).toLanguageString(main_1.groupPanelEmpty, main_1.messages[main_1.groupPanelEmpty])])]);
  }
};
exports.GroupPanelVue2 = GroupPanelVue2;
/**
 * @hidden
 */
var GroupPanel = GroupPanelVue2;
exports.GroupPanel = GroupPanel;