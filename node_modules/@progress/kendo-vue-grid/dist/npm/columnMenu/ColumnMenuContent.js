"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnMenuContentVue2 = exports.ColumnMenuContent = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var GridColumnMenuSort_1 = require("./GridColumnMenuSort");
var GridColumnMenuFilter_1 = require("./GridColumnMenuFilter");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var ColumnMenuContentVue2 = {
  name: 'KendoColumnMenuContent',
  inheritAttrs: false,
  props: {
    column: Object,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    filter: Object,
    filterOperators: Object,
    filterable: Boolean,
    render: [Boolean, String, Function, Object]
  },
  methods: {
    handleFocus: function handleFocus(e) {
      this.$emit('contentfocus', e);
    },
    closeMenu: function closeMenu() {
      this.$emit('closemenu');
    },
    expandChange: function expandChange() {
      this.$emit('expandchange');
    },
    sortChange: function sortChange(newDescriptor, e) {
      this.$emit('sortchange', newDescriptor, e);
    },
    filterChange: function filterChange(newDescriptor, e) {
      this.$emit('filterchange', newDescriptor, e);
    },
    contentKeyDown: function contentKeyDown(event) {
      if (event.keyCode === kendo_vue_common_1.Keys.esc) {
        this.$emit('closemenu');
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var renderTemplate = this.$props.render;
    var defaultRendering = h("div", {
      style: this.$attrs.style,
      onKeydown: this.contentKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.contentKeyDown
      }
    }, [
    // @ts-ignore
    h(GridColumnMenuSort_1.GridColumnMenuSort, {
      column: this.$props.column,
      attrs: this.v3 ? undefined : {
        column: this.$props.column,
        sortable: this.$props.sortable,
        sort: this.$props.sort
      },
      sortable: this.$props.sortable,
      sort: this.$props.sort,
      onClosemenu: this.closeMenu,
      on: this.v3 ? undefined : {
        "closemenu": this.closeMenu,
        "sortchange": this.sortChange
      },
      onSortchange: this.sortChange
    }),
    // @ts-ignore
    h(GridColumnMenuFilter_1.GridColumnMenuFilter, {
      column: this.$props.column,
      attrs: this.v3 ? undefined : {
        column: this.$props.column,
        filterable: this.$props.filterable,
        filter: this.$props.filter,
        filterOperators: this.$props.filterOperators
      },
      filterable: this.$props.filterable,
      filter: this.$props.filter,
      filterOperators: this.$props.filterOperators,
      onFilterfocus: this.handleFocus,
      on: this.v3 ? undefined : {
        "filterfocus": this.handleFocus,
        "closemenu": this.closeMenu,
        "expandchange": this.expandChange,
        "filterchange": this.filterChange
      },
      onClosemenu: this.closeMenu,
      onExpandchange: this.expandChange,
      onFilterchange: this.filterChange
    })]);
    return kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: typeof renderTemplate !== 'boolean' && renderTemplate,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        closemenu: this.closeMenu,
        filterchange: this.filterChange,
        sortchange: this.sortChange,
        expandchange: this.expandChange,
        contentfocus: this.handleFocus
      }
    });
  }
};
exports.ColumnMenuContentVue2 = ColumnMenuContentVue2;
/**
 * @hidden
 */
var ColumnMenuContent = ColumnMenuContentVue2;
exports.ColumnMenuContent = ColumnMenuContent;