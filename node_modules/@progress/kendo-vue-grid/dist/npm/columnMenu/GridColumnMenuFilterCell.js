"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridColumnMenuFilterCellVue2 = exports.GridColumnMenuFilterCell = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_dropdowns_1 = require("@progress/kendo-vue-dropdowns");
var kendo_vue_inputs_1 = require("@progress/kendo-vue-inputs");
var kendo_vue_dateinputs_1 = require("@progress/kendo-vue-dateinputs");
var filterCommon_1 = require("../filterCommon");
/**
 * @hidden
 */
var GridColumnMenuFilterCellVue2 = {
  props: {
    field: String,
    filterType: String,
    value: [Object, String, Number, Date, Boolean],
    operator: String,
    operators: Array,
    booleanValues: Array
  },
  // @ts-ignore
  emits: {
    change: null,
    filtercellfocus: null
  },
  methods: {
    handleFocus: function handleFocus(e) {
      this.$emit('filtercellfocus', e);
    },
    triggerChange: function triggerChange(filter) {
      this.$emit('change', filter);
    },
    inputChange: function inputChange(value, e) {
      var filter = (0, filterCommon_1.cellInputChange)(value, e, this.$props);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange(value, e) {
      var filter = (0, filterCommon_1.cellBoolDropdownChange)(value.value.operator, e);
      this.triggerChange(filter);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      filterType = _a.filterType,
      value = _a.value,
      booleanValues = _a.booleanValues;
    switch (filterType) {
      case 'numeric':
        return (
          // @ts-ignore
          h(kendo_vue_inputs_1.NumericTextBox, {
            value: value,
            attrs: this.v3 ? undefined : {
              value: value
            },
            onChange: function onChange(e) {
              _this.inputChange(e.value, e.event);
            },
            on: this.v3 ? undefined : {
              "change": function onChange(e) {
                _this.inputChange(e.value, e.event);
              }
            }
          })
        );
      case 'date':
        return (
          // @ts-ignore
          h(kendo_vue_dateinputs_1.DatePicker, {
            value: value,
            attrs: this.v3 ? undefined : {
              value: value
            },
            onFocus: this.handleFocus,
            on: this.v3 ? undefined : {
              "focus": this.handleFocus,
              "change": function change(e) {
                _this.inputChange(e.value, e.event);
              }
            },
            onChange: function change(e) {
              _this.inputChange(e.value, e.event);
            }
          })
        );
      case 'boolean':
        var noFilterSet_1 = function noFilterSet_1(filter) {
          return filter === null || filter === undefined;
        };
        return (
          // @ts-ignore
          h(kendo_vue_dropdowns_1.DropDownList, {
            onChange: this.boolDropdownChange,
            on: this.v3 ? undefined : {
              "change": this.boolDropdownChange
            },
            value: booleanValues.find(function (item) {
              return item.operator === (noFilterSet_1(value) ? '' : value);
            }),
            attrs: this.v3 ? undefined : {
              value: booleanValues.find(function (item) {
                return item.operator === (noFilterSet_1(value) ? '' : value);
              }),
              "data-items": booleanValues,
              textField: "text"
            },
            "data-items": booleanValues,
            textField: "text"
          })
        );
      default:
        return h("span", {
          "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
        }, [h("input", {
          "class": "k-input-inner",
          value: this.v3 ? value || '' : null,
          domProps: this.v3 ? undefined : {
            "value": value || ''
          },
          onInput: function onInput(e) {
            _this.inputChange(e.target.value, e);
          },
          on: this.v3 ? undefined : {
            "input": function onInput(e) {
              _this.inputChange(e.target.value, e);
            }
          }
        })]);
    }
  }
};
exports.GridColumnMenuFilterCellVue2 = GridColumnMenuFilterCellVue2;
/**
 * @hidden
 */
var GridColumnMenuFilterCell = GridColumnMenuFilterCellVue2;
exports.GridColumnMenuFilterCell = GridColumnMenuFilterCell;