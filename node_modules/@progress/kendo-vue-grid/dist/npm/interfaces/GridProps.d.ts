import { DataResult, SortDescriptor, CompositeFilterDescriptor, GroupDescriptor } from '@progress/kendo-data-query';
import { GridGroupableSettings } from './GridGroupableSettings';
import { GridSortChangeEvent, GridFilterChangeEvent, GridPageChangeEvent, GridExpandChangeEvent, GridSelectionChangeEvent, GridHeaderSelectionChangeEvent, GridRowClickEvent, GridItemChangeEvent, GridDataStateChangeEvent, GridColumnResizeEvent, GridColumnReorderEvent, GridGroupChangeEvent, GridCancelEvent, GridSaveEvent, GridRemoveEvent, GridEditEvent, GridNavigationActionEvent, GridKeyDownEvent } from './events';
import { GridCellProps } from './GridCellProps';
import { GridSortSettings } from './GridSortSettings';
import { GridPagerSettings } from '@progress/kendo-vue-data-tools';
import { GridColumnProps } from '../interfaces/GridColumnProps';
import { GridFilterOperators } from './GridFilterOperators';
import { PopupAnimation } from '@progress/kendo-vue-popup';
/**
 * Represents the props of the [native Vue Grid component by Kendo UI]({% slug overview_grid %}).
 */
export interface GridProps {
    /**
     * Sets the Grid row key prop to the value of this field in the dataItem.
     * If not set, the dataItem index will be used for the row key, which
     * might lead to row not updated during paging or scrolling.
     */
    dataItemKey?: string;
    /**
     * When set to `true` it sets the alternating of the rows per groups so each group could start
     * with the same color row. There is a known limitation when virtual scrolling with groups and
     * alternatePerGroup set to `true`- there may be a slight flicker of the alternating rows in
     * groups with larger amount of items - in this case we would rather recommend
     * using rowTemplates and set the row alternating based on the data or dataItems.
     */
    alternatePerGroup?: boolean;
    /**
     * Sets the properties of the columns that are used by the Grid.
     */
    columns?: GridColumnProps[] | null;
    /**
     * Sets the data of the Grid ([see example]({% slug paging_grid %})). If you use paging,
     * the `data` option has to contain only the items for the current page.
     */
    dataItems?: any[] | DataResult | null;
    /**
     * Enables the sorting for the columns with their `field` option set
     * ([see example]({% slug sorting_grid %})).
     */
    sortable?: GridSortSettings;
    /**
     * Fires when the sorting of the Grid is changed ([see example]({% slug sorting_grid %})).
     * You have to handle the event yourself and sort the data.
     */
    onSortchange?: (event: GridSortChangeEvent) => void;
    /**
     * The descriptors by which the data is sorted.
     * Applies the sorting styles and buttons to the affected columns.
     */
    sort?: SortDescriptor[];
    /**
     * Enables the filtering of the columns with their `field` option set
     * ([more information and examples]({% slug filtering_grid %})).
     */
    filterable?: boolean;
    /**
     * The descriptor by which the data is filtered
     * ([more information and examples]({% slug filtering_grid %})).
     * Affects the values and buttons in the `FilterRow` of the Grid.
     */
    filter?: CompositeFilterDescriptor;
    /**
     * The filter operators for the Grid filters.
     */
    filterOperators?: GridFilterOperators;
    /**
     * Fires when the Grid filter is modified through the UI
     * ([more information and examples]({% slug filtering_grid %})).
     * You have to handle the event yourself and filter the data.
     */
    onFilterchange?: (event: GridFilterChangeEvent) => void;
    /**
     * Defines if the column menu will be shown for the column.
     * Accepts Boolean, a Vue component, a `render` function, or a slot name
     */
    columnMenu?: boolean | any;
    /**
     * Controls the ColumnMenu animation. By default, the opening and closing animations are enabled.
     */
    columnMenuAnimate?: boolean | PopupAnimation;
    /**
     * The descriptors by which the data will be grouped
     * ([more information and examples]({% slug groupingbasics_grid %})).
     */
    group?: GroupDescriptor[];
    /**
     * Fires when the grouping of the Grid is changed. You have to handle the event yourself and group the data
     * ([more information and examples]({% slug groupingbasics_grid %})).
     */
    onGroupchange?: (event: GridGroupChangeEvent) => void;
    /**
     * Configures the pager of the Grid ([see example]({% slug paging_grid %})).
     *
     * The available options are:
     * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.
     * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.
     * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers)
     * and `input` (input for typing the page number) values.
     * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.
     * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.
     */
    pageable?: GridPagerSettings | any;
    /**
     * Defines the page size that is used by the Grid pager
     * ([see example]({% slug paging_grid %})). Required by the paging functionality.
     */
    pageSize?: number;
    /**
     * Alias of the `pageSize` property. If `take` is set, `pageSize` will be ignored.
     */
    take?: number;
    /**
     * Fires when the page of the Grid is changed ([see example]({% slug paging_grid %})).
     * You have to handle the event yourself and page the data.
     */
    onPagechange?: (event: GridPageChangeEvent) => void;
    /**
     * Defines the total number of data items in all pages
     * ([see example]({% slug paging_grid %})). Required by the paging functionality.
     */
    total?: number;
    /**
     * Defines the number of records that will be skipped by the pager
     * ([see example]({% slug paging_grid %})). Required by the paging functionality.
     */
    skip?: number;
    /**
     * Fires when the user tries to expand or collapse a row.
     */
    onExpandchange?: (event: GridExpandChangeEvent) => void;
    /**
     * Specifies the name of the field which will provide a Boolean representation
     * of the expanded state of the item ([see example]({% slug detailrow_grid %}).
     */
    expandField?: string;
    /**
     * Specifies the name of the field which will provide a Boolean representation
     * of the selected state of the item ([see example]({% slug selection_grid %})).
     */
    selectedField?: string;
    /**
     * Fires when the user tries to select or deselect a row
     * ([see example]({% slug selection_grid %})).
     */
    onSelectionchange?: (event: GridSelectionChangeEvent) => void;
    /**
     * Fires when the user clicks the checkbox of a column header whose `field` matches `selectedField`.
     * ([see example]({% slug selection_grid %})).
     */
    onHeaderselectionchange?: (event: GridHeaderSelectionChangeEvent) => void;
    /**
     * Fires when the user clicks a row.
     */
    onRowclick?: (event: GridRowClickEvent) => void;
    /**
     * Fires when the user double clicks a row.
     */
    onRowdblclick?: (event: GridRowClickEvent) => void;
    /**
     * Fires when the user clicks a cell.
     */
    onCellclick?: (event: any) => void;
    /**
     * Fires when Grid is scrolled.
     */
    onScroll?: (event: any) => void;
    /**
     * Fires when the user triggers an edit operation from a cell.
     */
    onEdit?: (event: GridEditEvent) => void;
    /**
     * Fires when the user triggers a removal operation from a cell.
     */
    onRemove?: (event: GridRemoveEvent) => void;
    /**
     * Fires when the user triggers a saving operation from a cell.
     */
    onSave?: (event: GridSaveEvent) => void;
    /**
     * Fires when the user triggers a canceling operation from a cell.
     */
    onCancel?: (event: GridCancelEvent) => void;
    /**
     * Fires when the user changes the values of the item.
     * The event is not debounced and fires on every `onChange` event of the input in the current `EditCell`.
     * ([more information and examples]({% slug editing_inline_grid %})).
     */
    onItemchange?: (event: GridItemChangeEvent) => void;
    /**
     * Specifies the name of the field which will provide a Boolean representation of the edit state of the current
     * item ([more information and examples]({% slug editing_inline_grid %})).
     */
    editField?: string;
    /**
     * A function that returns a custom class applied to the row.
     * @param item - the item for the row.
     */
    rowClass?: Function;
    /**
     * Defines the scroll mode that is used by the Grid ([see example]({% slug scrollmmodes_grid %}).
     *
     * The available options are:
     *  - `none`&mdash;Renders no scrollbar.
     *  - `scrollable`&mdash;This is the default scroll mode. It requires the setting of the `height` option.
     *  - `virtual`&mdash;Displays no pager and renders a portion of the data (optimized rendering)
     * while the user is scrolling the content.
     */
    scrollable?: string;
    /**
     * Configures the `size` of the Grid.
     *
     * The available options are:
     * - small
     * - medium
     *
     * @default `medium`
     */
    size?: 'small' | 'medium' | string;
    /**
     * Defines the row height and forces an equal height to all rows
     * ([see example]({% slug scrollmmodes_grid %})).
     */
    rowHeight?: number;
    /**
     * @hidden
     */
    detailRowHeight?: number;
    /**
     * Specifies a custom rendering that will be cloned and rendered inside the detail rows
     * of the currently expanded items ([see example]({% slug master_detail_grid %}).
     * Accepts a Vue component, a `render` function, or a slot name.
     * An item will be rendered as expanded if the value of its `expandField` is `true`.
     */
    detail?: null | any;
    /**
     * Defines the GridColumnProps of the expand column.
     */
    expandColumn?: GridColumnProps;
    /**
     * Represents the `style` HTML attribute.
     */
    style?: any;
    /**
     * Fires when the data state of the Grid is changed.
     */
    onDatastatechange?: (event: GridDataStateChangeEvent) => void;
    /**
     * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their
     * header cells ([see example]({% slug resizing_columns_grid %}).
     */
    resizable?: boolean;
    /**
     * If set to `true`, the user can reorder columns by dragging their
     * header cells ([see example]({% slug reordering_columns_grid %}).
     */
    reorderable?: boolean;
    /**
     * Determines if grouping by dragging and dropping the column headers is allowed
     * ([more information and examples]({% slug groupingbasics_grid %})).
     */
    groupable?: GridGroupableSettings | boolean;
    /**
     * Fires when a column is resized
     */
    onColumnresize?: (event: GridColumnResizeEvent) => void;
    /**
     * Fires when columns are reordered.
     */
    onColumnreorder?: (event: GridColumnReorderEvent) => void;
    /**
     * Defines the custom rendering of the row. Accepts a Vue component, a `render` function, or a slot name.
     */
    rowRender?: string | boolean | ((h: any, defaultRendering: any | null, dafaultSlots: any, props: any, listeners: any) => any);
    /**
     * Defines the custom rendering of the cell. Accepts a Vue component, a `render` function, or a slot name.
     * ([see example]({% slug groupingaggregates_grid %})).
     */
    cellRender?: ((h: any, defaultRendering: any | null, props: GridCellProps, listeners: any) => any) | string | null | boolean;
    /**
     * Defines the custom rendering of the filter cell. Accepts a Vue component, a `render` function, or a slot name.
     */
    filterCellRender?: ((h: any, defaultRendering: any | null, props: GridCellProps, listeners: any) => any) | string | any;
    /**
     * Defines the custom rendering of the header cell. Accepts a Vue component, a `render` function, or a slot name.
     */
    headerCellRender?: ((h: any, defaultRendering: any | null, props: GridCellProps, listeners: any) => any) | string | any;
    /**
     * Defines if the loader will be shown. Defaults to `false`. Accepts a slot name, a `render` function, or a Vue component.
     */
    loader?: boolean | Object | Function | string;
    /**
     * Defines the custom rendering of the pager. Accepts  a slot name, a `render` function, or a Vue component.
     */
    pager?: Object | Function | string | boolean;
    /**
     * Enables virtualization of the columns. If virtualization is
     *  enabled, the columns outside the view are not rendered.
     */
    columnVirtualization?: boolean;
    /**
     * If set to `true`, the user can use dedicated shortcuts to interact with the Grid.
     * By default, navigation is disabled and the Grid content is accessible in the normal tab sequence.
     */
    navigatable?: boolean;
    /**
     * Passes the number of cached top items needed for the grouping virtualization scenario. Defaults to 4.
     */
    topCacheCount?: Number;
    /**
     * Passes the calculated height of all the items in the Grid grouped hierarchy.
     */
    totalGroupedHeight?: Number;
    /**
     * Passes the collection of all grouped items that is needed for the virtualization scenario.
     */
    allGroupedItems?: DataResult | null;
    /**
     * Passes the collection of all collapsed groups for every grouped level.
     */
    collapsedGroups?: any[][];
    /**
     * Specifies the name of the field which will provide a unique for every item identifier.
     */
    uniqueField?: string;
    /**
     * Fires when Grid keyboard navigation position is changed.
     */
    onNavigationaction?: (event: GridNavigationActionEvent) => void;
    /**
     * Fires when the user press keyboard key.
     */
    onKeydown?: (event: GridKeyDownEvent) => void;
}
