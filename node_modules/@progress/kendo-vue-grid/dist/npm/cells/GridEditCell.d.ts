import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
import { GridCellProps } from '../interfaces/GridCellProps';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
export interface GridEditCellMethods extends Vue2type {
    triggerClick: () => void;
    triggerKeydown: (e: any) => void;
    triggerEdit: (dataItem: any) => void;
    triggerAdd: (dataItem: any) => void;
    triggerCancel: (dataItem: any) => void;
    triggerSave: (dataItem: any) => void;
    triggerRemove: (dataItem: any) => void;
    changeHandler: (event: any, value?: any) => void;
    getKeyboardNavigationAttributes: (id: string) => any;
}
/**
 * @hidden
 */
export interface GridEditCellData {
    inputId: string;
}
/**
 * @hidden
 */
export interface GridEditCellComputed {
    [key: string]: any;
    tdClass: object;
}
/**
 * @hidden
 */
export interface GridEditCellAll extends GridEditCellMethods, GridEditCellData, GridEditCellComputed {
}
/**
 * @hidden
 */
declare let GridEditCellVue2: ComponentOptions<Vue2type, DefaultData<{}>, DefaultMethods<GridEditCellMethods>, {}, RecordPropsDefinition<GridCellProps>>;
/**
 * @hidden
 */
declare const GridEditCell: DefineComponent<GridCellProps, any, GridEditCellData, [], GridEditCellMethods, {}, {}, {}, string, GridCellProps, GridCellProps, {}>;
export { GridEditCell, GridEditCellVue2 };
