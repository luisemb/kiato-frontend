"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridToolbarVue2 = exports.GridToolbar = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var GridToolbarVue2 = {
  name: 'GridToolbar',
  props: {
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium'].includes(value);
      }
    }
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      var size = this.$props.size;
      return _a = {
        'k-toolbar': true,
        'k-grid-toolbar': true
      }, _a["k-toolbar-".concat(kendo_vue_common_1.kendoThemeMaps.sizeMap[size] || size)] = size, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    return h("div", {
      "class": this.wrapperClass,
      role: 'toolbar',
      attrs: this.v3 ? undefined : {
        role: 'toolbar'
      }
    }, [defaultSlot]);
  }
};
exports.GridToolbarVue2 = GridToolbarVue2;
/**
 * Represents the GridToolbar component.
 *
 * ```tsx-no-run
 *   <div id="app">
 *       <Grid
 *           :data-items="products"
 *           :columns="columns">
 *       <grid-toolbar >
 *           <button title="Add new" class="k-button k-primary" @click='insert' >
 *                   Add new
 *           </button>
 *           <button v-if="hasItemsInEdit"
 *               title="Cancel current changes"
 *               class="k-button"
 *               @click="cancelChanges">
 *               Cancel current changes
 *           </button>
 *           </grid-toolbar>
 *       </Grid>
 *   </div>
 * <script>
 *       Vue.component('Grid', Grid);
 *       Vue.component('grid-toolbar', GridToolbar);
 *       new Vue({
 *           el: '#app',
 *           data: function () {
 *               return {
 *                  products: [
 *                    { 'foo': 'A1', 'bar': 'B1' },
 *                       { 'foo': 'A2', 'bar': 'B2' },
 *                       { 'foo': 'A3', 'bar': 'B2' }
 *                   ],
 *                   columns: [
 *                       { field: 'foo'},
 *                       { field: 'bar'}
 *                   ]
 *               };
 *           }
 *       });
 *   </script>
 * ```
 *
 *
 * ### props <span class='code'>[GridToolbarProps]({% slug api_grid_gridtoolbarprops %})</span>
 */
var GridToolbar = GridToolbarVue2;
exports.GridToolbar = GridToolbar;