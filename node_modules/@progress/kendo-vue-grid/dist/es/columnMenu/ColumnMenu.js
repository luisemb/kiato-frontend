// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { guid, Icon, setRef } from '@progress/kendo-vue-common';
import { Popup } from '@progress/kendo-vue-popup';
import { moreVerticalIcon } from '@progress/kendo-svg-icons';
import { ColumnMenuContent } from './ColumnMenuContent';
import { tableKeyboardNavigationTools } from '@progress/kendo-vue-data-tools';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, columnMenu } from '../messages/main';
/**
 * @hidden
 */
var ColumnMenuVue2 = {
  name: 'KendoColumnMenu',
  props: {
    animate: {
      type: [Boolean, Object],
      default: function _default() {
        return true;
      }
    },
    column: Object,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    opened: Boolean,
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    render: [Boolean, String, Function, Object]
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      show: false,
      blurTimeout: undefined
    };
  },
  created: function created() {
    this._anchor = guid();
  },
  computed: {
    currentOpen: function currentOpen() {
      return this.show || this.$props.opened;
    }
  },
  watch: {
    currentOpen: function currentOpen(newOpened) {
      this.$nextTick(function () {
        this._content = this.$refs.content;
        if (newOpened && this._content) {
          var focusableElements = tableKeyboardNavigationTools.getFocusableElements(this._content, {
            focusable: true
          });
          if (focusableElements.length) {
            focusableElements[0].focus();
          } else {
            this._content.focus();
          }
        }
      });
    }
  },
  methods: {
    blur: function blur() {
      var _this = this;
      clearTimeout(this.blurTimeout);
      this.blurTimeout = setTimeout(function () {
        _this.closeMenu();
      }, 200);
    },
    focus: function focus() {
      clearTimeout(this.blurTimeout);
    },
    handleFocus: function handleFocus(_) {
      clearTimeout(this.blurTimeout);
    },
    anchorClick: function anchorClick(e) {
      e.preventDefault();
      this.show = !this.show;
    },
    closeMenu: function closeMenu() {
      this.$emit('close');
      this.show = false;
    },
    sortChange: function sortChange(newDescriptor, e) {
      this.$emit('sortchange', newDescriptor, e);
    },
    filterChange: function filterChange(newDescriptor, e) {
      this.$emit('filterchange', newDescriptor, e);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;
    var h = gh || createElement;
    var renderTemplate = this.$props.render;
    var ls = provideLocalizationService(this);
    return h("div", {
      style: {
        display: 'inline'
      }
    }, [h("a", {
      "class": 'k-grid-header-menu k-grid-column-menu',
      title: "".concat(this.$props.column.field, " ").concat(ls.toLanguageString(columnMenu, messages[columnMenu])),
      attrs: this.v3 ? undefined : {
        title: "".concat(this.$props.column.field, " ").concat(ls.toLanguageString(columnMenu, messages[columnMenu])),
        href: "#"
      },
      ref: setRef(this, 'kendoAnchor', this._anchor),
      onClick: this.anchorClick,
      on: this.v3 ? undefined : {
        "click": this.anchorClick
      },
      href: "#"
    }, [h(Icon, {
      name: 'more-vertical',
      attrs: this.v3 ? undefined : {
        name: 'more-vertical',
        icon: moreVerticalIcon
      },
      icon: moreVerticalIcon
    })]),
    // @ts-ignore function children
    h(Popup, {
      animate: this.$props.animate,
      attrs: this.v3 ? undefined : {
        animate: this.$props.animate,
        anchor: this._anchor,
        show: this.currentOpen
      },
      anchor: this._anchor,
      show: this.currentOpen
    }, this.v3 ? function () {
      return [h("div", {
        ref: 'content',
        "class": 'k-grid-columnmenu-popup',
        tabindex: 0,
        attrs: _this2.v3 ? undefined : {
          tabindex: 0
        },
        onFocusout: _this2.blur,
        on: _this2.v3 ? undefined : {
          "focusout": _this2.blur,
          "focusin": _this2.focus
        },
        onFocusin: _this2.focus,
        style: {
          outline: 'none',
          width: '230px'
        }
      }, [
      // @ts-ignore
      h(ColumnMenuContent, {
        column: _this2.$props.column,
        attrs: _this2.v3 ? undefined : {
          column: _this2.$props.column,
          sortable: _this2.$props.sortable,
          sort: _this2.$props.sort,
          filter: _this2.$props.filter,
          filterable: _this2.$props.filterable,
          filterOperators: _this2.$props.filterOperators,
          render: renderTemplate
        },
        sortable: _this2.$props.sortable,
        sort: _this2.$props.sort,
        filter: _this2.$props.filter,
        filterable: _this2.$props.filterable,
        filterOperators: _this2.$props.filterOperators,
        render: renderTemplate,
        onContentfocus: _this2.handleFocus,
        on: _this2.v3 ? undefined : {
          "contentfocus": _this2.handleFocus,
          "closemenu": _this2.closeMenu,
          "sortchange": _this2.sortChange,
          "filterchange": _this2.filterChange
        },
        onClosemenu: _this2.closeMenu,
        onSortchange: _this2.sortChange,
        onFilterchange: _this2.filterChange
      })])];
    } : [h("div", {
      ref: 'content',
      "class": 'k-grid-columnmenu-popup',
      tabindex: 0,
      attrs: _this2.v3 ? undefined : {
        tabindex: 0
      },
      onFocusout: _this2.blur,
      on: _this2.v3 ? undefined : {
        "focusout": _this2.blur,
        "focusin": _this2.focus
      },
      onFocusin: _this2.focus,
      style: {
        outline: 'none',
        width: '230px'
      }
    }, [h(ColumnMenuContent, {
      column: _this2.$props.column,
      attrs: _this2.v3 ? undefined : {
        column: _this2.$props.column,
        sortable: _this2.$props.sortable,
        sort: _this2.$props.sort,
        filter: _this2.$props.filter,
        filterable: _this2.$props.filterable,
        filterOperators: _this2.$props.filterOperators,
        render: renderTemplate
      },
      sortable: _this2.$props.sortable,
      sort: _this2.$props.sort,
      filter: _this2.$props.filter,
      filterable: _this2.$props.filterable,
      filterOperators: _this2.$props.filterOperators,
      render: renderTemplate,
      onContentfocus: _this2.handleFocus,
      on: _this2.v3 ? undefined : {
        "contentfocus": _this2.handleFocus,
        "closemenu": _this2.closeMenu,
        "sortchange": _this2.sortChange,
        "filterchange": _this2.filterChange
      },
      onClosemenu: _this2.closeMenu,
      onSortchange: _this2.sortChange,
      onFilterchange: _this2.filterChange
    })])])]);
  }
};
/**
 * @hidden
 */
var ColumnMenu = ColumnMenuVue2;
export { ColumnMenu, ColumnMenuVue2 };