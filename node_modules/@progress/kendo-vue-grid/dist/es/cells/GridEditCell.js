// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { getNestedValue } from '../utils/main';
import { guid, getTemplate, noop } from '@progress/kendo-vue-common';
import { NumericTextBox } from '@progress/kendo-vue-inputs';
import { DatePicker } from '@progress/kendo-vue-dateinputs';
import { KEYBOARD_NAV_DATA_ID, KEYBOARD_NAV_DATA_LEVEL } from '@progress/kendo-vue-data-tools';
/**
 * @hidden
 */
var GridEditCellVue2 = {
  name: 'GridEditCell',
  inheritAttrs: false,
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    editor: String,
    isSelected: Boolean,
    ariaColumnIndex: Number,
    render: [String, Function, Object],
    isRtl: Boolean
  },
  // @ts-ignore
  emits: {
    change: null,
    cellkeydown: null,
    edit: null,
    add: null,
    cancel: null,
    save: null,
    remove: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  computed: {
    tdClass: function tdClass() {
      var _a;
      var className = this.$props.className;
      return _a = {
        'k-table-td': true
      }, _a[className] = className, _a;
    }
  },
  data: function data() {
    return {
      inputId: guid()
    };
  },
  methods: {
    triggerKeydown: function triggerKeydown(e) {
      this.$emit('cellkeydown', {
        event: e,
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    triggerEdit: function triggerEdit(dataItem) {
      this.$emit('edit', dataItem);
    },
    triggerAdd: function triggerAdd(dataItem) {
      this.$emit('add', dataItem);
    },
    triggerCancel: function triggerCancel(dataItem) {
      this.$emit('cancel', dataItem);
    },
    triggerSave: function triggerSave(dataItem) {
      this.$emit('save', dataItem);
    },
    triggerRemove: function triggerRemove(dataItem) {
      this.$emit('remove', dataItem);
    },
    changeHandler: function changeHandler(event, value) {
      if (!value) {
        if (event.target.type === 'checkbox') {
          value = event.target.checked;
        } else {
          value = event.target.valueAsDate ? event.target.valueAsDate : event.target.value;
        }
      }
      this.$emit('change', {
        dataItem: this.$props.dataItem,
        field: this.$props.field,
        event: event,
        value: value
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var data = getNestedValue(this.$props.field, this.$props.dataItem);
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    var defaultRendering = null;
    switch (this.$props.editor) {
      case 'numeric':
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? undefined : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? undefined : {
            colspan: this.$props.colSpan,
            role: 'gridcell',
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [
        // @ts-ignore
        h(NumericTextBox, {
          style: {
            width: '100%'
          },
          value: data === undefined ? null : data,
          attrs: this.v3 ? undefined : {
            value: data === undefined ? null : data
          },
          onChange: this.changeHandler,
          on: this.v3 ? undefined : {
            "change": this.changeHandler
          }
        })]);
        break;
      case 'date':
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? undefined : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? undefined : {
            colspan: this.$props.colSpan,
            role: 'gridcell',
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [
        // @ts-ignore
        h(DatePicker, {
          style: {
            width: '100%'
          },
          value: data,
          attrs: this.v3 ? undefined : {
            value: data
          },
          onChange: this.changeHandler,
          on: this.v3 ? undefined : {
            "change": this.changeHandler
          }
        })]);
        break;
      case 'boolean':
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? undefined : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? undefined : {
            colspan: this.$props.colSpan,
            role: 'gridcell',
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [h("input", {
          checked: this.v3 ? data || false : null,
          domProps: this.v3 ? undefined : {
            "checked": data || false
          },
          id: this.inputId,
          attrs: this.v3 ? undefined : {
            id: this.inputId,
            type: "checkbox"
          },
          type: "checkbox",
          "class": "k-checkbox k-checkbox-md k-rounded-md",
          onChange: this.changeHandler,
          on: this.v3 ? undefined : {
            "change": this.changeHandler
          }
        }), h("label", {
          "class": "k-checkbox-label",
          "for": this.inputId,
          attrs: this.v3 ? undefined : {
            "for": this.inputId
          }
        })]);
        break;
      default:
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? undefined : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? undefined : {
            colspan: this.$props.colSpan,
            role: 'gridcell',
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [h("span", {
          "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
        }, [h("input", {
          style: {
            width: '100%'
          },
          "class": "k-input-inner",
          value: this.v3 ? data !== null && data !== void 0 ? data : '' : null,
          domProps: this.v3 ? undefined : {
            "value": data !== null && data !== void 0 ? data : ''
          },
          onChange: this.changeHandler,
          on: this.v3 ? undefined : {
            "change": this.changeHandler
          }
        })])]);
    }
    return getTemplate.call(this, {
      h: h,
      template: this.$props.render,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.changeHandler,
        keydown: this.triggerKeydown,
        edit: this.triggerEdit,
        add: this.triggerAdd,
        cancel: this.triggerCancel,
        save: this.triggerSave,
        remove: this.triggerRemove
      }
    });
  }
};
/**
 * @hidden
 */
var GridEditCell = GridEditCellVue2;
export { GridEditCell, GridEditCellVue2 };