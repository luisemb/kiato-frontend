import { GridSortSettings } from '../interfaces/GridSortSettings';
import { SortDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
import { ColumnDraggableProps } from '../drag/ColumnDraggable';
import { ExtendedColumnProps } from '../interfaces/ExtendedColumnProps';
import { GridColumnProps } from '../interfaces/GridColumnProps';
import { GridHeaderCellProps } from '../interfaces/GridHeaderCellProps';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { GridFilterOperators } from '../interfaces/GridFilterOperators';
import { PopupAnimation } from '@progress/kendo-vue-popup';
/**
 * @hidden
 */
export interface HeaderRowProps extends ColumnDraggableProps {
    grid: any;
    sortable?: GridSortSettings;
    groupable?: any;
    reorderable?: boolean;
    onSortChange?: (descriptors: SortDescriptor[], e: any) => void;
    sort?: any;
    filter?: CompositeFilterDescriptor;
    filterOperators: GridFilterOperators;
    filterable?: boolean | undefined;
    filterChange?: any;
    filterRow?: any;
    columns: ExtendedColumnProps[];
    columnResize?: any;
    columnsMap: number[][];
    onSelectionchange?: any;
    cellRender?: ((h: any, defaultRendering: any | null, props: GridHeaderCellProps) => any) | string | null;
    columnMenu?: any;
    columnMenuAnimate?: boolean | PopupAnimation;
    onFilterChange?: Function;
    isRtl?: boolean;
    isColCountDefined?: boolean;
    columnsInitial?: ExtendedColumnProps[];
}
/**
 * @hidden
 */
export interface HeaderRowMethods extends Vue2type {
    pressHandler: (event: any, element: HTMLElement) => void;
    dragHandler: (event: any, element: HTMLElement) => void;
    releaseHandler: (event: any) => void;
    selectionChangeHandler: (options: any) => void;
    cellClick: (e: any, column: GridColumnProps) => void;
    sortChangeHandler: (newDescriptor: SortDescriptor[], e: any) => void;
    filterChangeHandler: (newDescriptor: CompositeFilterDescriptor | null, e: any) => void;
    cellClass: (field: string | undefined, headerClassName: string | undefined, locked: boolean) => string;
    getTemplate: (template: any) => any;
    cellKeyDown: (event: any, column: GridColumnProps) => void;
    columnMenuClose: () => void;
    onNavFocus: (e: any) => void;
}
/**
 * @hidden
 */
export interface HeaderRowState {
    columnMenuOpened?: object;
    serviceIndex: number;
    index: number;
    _element: any | null;
}
/**
 * @hidden
 */
export interface HeaderRowComputed {
    [key: string]: any;
    element: any;
    theadClasses: any;
}
/**
 * @hidden
 */
export interface HeaderRowAll extends HeaderRowMethods, HeaderRowState, HeaderRowComputed {
}
/**
 * @hidden
 */
declare let HeaderRowVue2: ComponentOptions<Vue2type, DefaultData<{}>, DefaultMethods<HeaderRowAll>, HeaderRowComputed, RecordPropsDefinition<HeaderRowProps>>;
/**
 * @hidden
 */
declare const HeaderRow: DefineComponent<HeaderRowProps, any, {}, HeaderRowComputed, HeaderRowMethods, {}, {}, {}, string, HeaderRowProps, HeaderRowProps, {}>;
export { HeaderRow, HeaderRowVue2 };
