// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getNestedValue } from '../utils/main.js';
import { getTemplate, Icon, Keys, noop } from '@progress/kendo-vue-common';
import { KEYBOARD_NAV_DATA_ID, KEYBOARD_NAV_DATA_LEVEL } from '@progress/kendo-vue-data-tools';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, collapseDetailAriaLabel, expandDetailAriaLabel } from '../messages/main.js';
import { minusIcon, plusIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var GridHierarchyCellVue2 = {
  name: 'KendoGridHierarchyCell',
  inheritAttrs: false,
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    editor: String,
    isSelected: Boolean,
    dataIndex: Number,
    ariaColumnIndex: Number,
    render: [String, Function, Object],
    isRtl: Boolean
  },
  // @ts-ignore
  emits: {
    change: null,
    cellkeydown: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  methods: {
    triggerKeydown: function triggerKeydown(event, expanded) {
      this.$emit('cellkeydown', {
        event: event,
        dataItem: this.$props.dataItem,
        field: this.$props.field,
        expanded: expanded
      });
      if (event.defaultPrevented) {
        return;
      }
      if (event.keyCode === Keys.enter) {
        event.preventDefault();
        this.$emit('change', {
          dataItem: this.$props.dataItem,
          dataIndex: this.$props.dataIndex,
          event: event,
          field: this.$props.field,
          value: !expanded
        });
      }
    },
    clickHandler: function clickHandler(e, dataItem, expanded) {
      e.preventDefault();
      this.$emit('change', {
        dataItem: dataItem,
        event: e,
        field: undefined,
        value: !expanded
      });
    }
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      return _a = {
        'k-table-td': true,
        'k-hierarchy-cell': true
      }, _a[this.className || ''] = this.className, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var defaultRendering = null;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    var localizationService = provideLocalizationService(this);
    var collapseMessage = localizationService.toLanguageString(collapseDetailAriaLabel, messages[collapseDetailAriaLabel]);
    var expandMessage = localizationService.toLanguageString(expandDetailAriaLabel, messages[expandDetailAriaLabel]);
    if (this.$props.rowType === 'groupFooter') {
      defaultRendering = h("td", {
        "class": this.wrapperClass
      });
    } else if (this.$props.rowType !== 'groupHeader') {
      var expanded_1 = getNestedValue(this.$props.field, this.$props.dataItem);
      defaultRendering = h("td", {
        style: this.$attrs.style,
        onKeydown: function onKeydown(ev) {
          _this.triggerKeydown(ev, expanded_1);
        },
        on: this.v3 ? undefined : {
          "keydown": function onKeydown(ev) {
            _this.triggerKeydown(ev, expanded_1);
          }
        },
        "class": this.wrapperClass,
        "aria-expanded": expanded_1 ? 'true' : 'false',
        attrs: this.v3 ? undefined : {
          "aria-expanded": expanded_1 ? 'true' : 'false',
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        },
        role: 'gridcell',
        "aria-colindex": this.$props.ariaColumnIndex,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      }, [h("a", {
        onClick: function onClick(e) {
          _this.clickHandler(e, _this.$props.dataItem, expanded_1);
        },
        on: this.v3 ? undefined : {
          "click": function onClick(e) {
            _this.clickHandler(e, _this.$props.dataItem, expanded_1);
          }
        },
        href: "#",
        attrs: this.v3 ? undefined : {
          href: "#",
          tabindex: -1,
          title: expanded_1 ? collapseMessage : expandMessage,
          "aria-label": expanded_1 ? collapseMessage : expandMessage
        },
        tabindex: -1,
        title: expanded_1 ? collapseMessage : expandMessage,
        "aria-label": expanded_1 ? collapseMessage : expandMessage
      }, [h(Icon, {
        name: expanded_1 ? 'minus' : 'plus',
        attrs: this.v3 ? undefined : {
          name: expanded_1 ? 'minus' : 'plus',
          icon: expanded_1 ? minusIcon : plusIcon
        },
        icon: expanded_1 ? minusIcon : plusIcon
      })])]);
    }
    return getTemplate.call(this, {
      h: h,
      template: this.$props.render,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        keydown: this.triggerKeydown,
        click: this.clickHandler
      }
    });
  }
};
/**
 * @hidden
 */
var GridHierarchyCell = GridHierarchyCellVue2;
export { GridHierarchyCell, GridHierarchyCellVue2 };