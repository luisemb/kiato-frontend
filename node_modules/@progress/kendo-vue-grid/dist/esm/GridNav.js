// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getDefaultSlots, noop } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var GridNavVue2 = {
  name: 'KendoGridNav',
  props: {
    currentData: Array
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  inject: {
    onNavKeyDown: {
      default: noop
    },
    onNavFocus: {
      default: noop
    },
    onNavMount: {
      default: noop
    },
    handleDispatchFocus: {
      default: noop
    },
    kbContext: {
      default: null
    },
    navigation: {
      default: null
    }
  },
  mounted: function mounted() {
    this.onNavMount({
      scope: this.$el || undefined
    });
  },
  updated: function updated() {
    this.onNavMount({
      scope: this.$el || undefined
    });
  },
  methods: {
    onKeyDown: function onKeyDown(event) {
      this.onNavKeyDown(event, {
        navigation: this.navigation,
        kbContext: this.kbContext,
        onNavigationAction: this.onNavigationAction
      });
      //    const {mode, cell} = getSelectionOptions(this.$props.selectable);
      this.$emit('keydown', {
        dataItems: this.getLeafDataItems(),
        //     mode,
        //     cell,
        componentId: this._gridId,
        selectedField: this.$props.selectedField,
        event: event
      }); // as GridNavigationActionEvent
    },

    onFocus: function onFocus(event) {
      this.onNavFocus(event, {
        kbContext: this.kbContext
      });
    },
    onNavigationAction: function onNavigationAction(options) {
      this.$emit('navigationaction', {
        focusElement: options.focusElement,
        event: options.event
      }); // as GridNavigationActionEvent
    },

    getLeafDataItems: function getLeafDataItems() {
      return this.$props.currentData.filter(function (item) {
        return item.rowType === 'data';
      }).map(function (item) {
        return item.dataItem;
      });
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    return h("div", {
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown,
        "focusin": this.onFocus
      },
      onFocusin: this.onFocus,
      "data-keyboardnavscope": true,
      attrs: this.v3 ? undefined : {
        "data-keyboardnavscope": true
      }
    }, [defaultSlots]);
  }
};
/**
 * @hidden
 */
var GridNav = GridNavVue2;
export { GridNav, GridNavVue2 };