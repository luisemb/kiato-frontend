"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LabelVue2 = exports.Label = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var main_1 = require("./messages/main");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var package_metadata_1 = require("./package-metadata");
/**
 * @hidden
 */
var LabelVue2 = {
  name: 'KendoLabel',
  props: {
    id: String,
    editorId: String,
    editorRef: String,
    editorValid: {
      type: Boolean,
      default: undefined
    },
    editorDisabled: Boolean,
    optional: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
  },
  computed: {
    labelClassName: function labelClassName() {
      return {
        'k-label': true,
        'k-label-empty': !this.defaultSlots,
        'k-text-error': this.$props.editorValid === false,
        'k-text-disabled': this.$props.editorDisabled === true
      };
    }
  },
  methods: {
    onLabelClick: function onLabelClick(e) {
      if (this.$props.editorRef && this.$props.editorRef.current && !this.$props.editorDisabled) {
        if (this.$props.editorRef.current.focus) {
          e.preventDefault();
          this.$props.editorRef.current.focus();
        }
        var editorActionElement = this.$props.editorRef.current.actionElement;
        if (editorActionElement) {
          e.preventDefault();
          editorActionElement.click();
        }
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    this.defaultSlots = (0, kendo_vue_common_1.getDefaultSlots)(this);
    var ls = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var _a = this.$props,
      id = _a.id,
      editorId = _a.editorId,
      optional = _a.optional;
    var localizedOptional = optional ? ls.toLanguageString(main_1.labelsOptional, main_1.messages[main_1.labelsOptional]) : '';
    var optionalElement = localizedOptional && h("span", {
      "class": 'k-label-optional'
    }, [localizedOptional]);
    return h("label", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        "for": editorId
      },
      "for": editorId,
      onClick: this.onLabelClick,
      on: this.v3 ? undefined : {
        "click": this.onLabelClick
      },
      "class": this.labelClassName
    }, [this.defaultSlots, optionalElement]);
  }
};
exports.LabelVue2 = LabelVue2;
/**
 * @hidden
 */
var Label = LabelVue2;
exports.Label = Label;