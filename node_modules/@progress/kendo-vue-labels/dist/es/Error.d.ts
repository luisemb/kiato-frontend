import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * Represents the props of the Kendo UI for Vue Error component.
 */
export interface ErrorProps {
    /**
     * Represents the id of the Error element.
     * The value should be also set to the editor's `ariaDescribedBy` property.
     */
    id?: string;
    /**
     * Specifies the alignment of the Error text.
     *
     * The possible values are:
     * * (Default) `start`
     * * `end`
     */
    direction?: string;
}
/**
 * @hidden
 */
interface ErrorState {
}
/**
 * @hidden
 */
interface ErrorData {
}
/**
 * @hidden
 */
export interface ErrorMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ErrorComputed {
    [key: string]: any;
    errorClassName: object;
}
/**
 * @hidden
 */
export interface ErrorAll extends ErrorMethods, ErrorState, ErrorData, ErrorComputed, Vue2type {
}
/**
 * @hidden
 */
declare const ErrorVue2: ComponentOptions<Vue2type, DefaultData<ErrorData>, DefaultMethods<ErrorAll>, ErrorComputed, RecordPropsDefinition<ErrorProps>>;
/**
 * @hidden
 */
declare let Error: DefineComponent<ErrorProps, any, ErrorData, ErrorComputed, ErrorMethods, {}, {}, {}, string, ErrorProps, ErrorProps, {}>;
export { Error, ErrorVue2 };
