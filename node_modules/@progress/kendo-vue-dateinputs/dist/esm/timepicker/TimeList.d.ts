import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { IntlService, DateFormatPart } from '@progress/kendo-vue-intl';
import { ScrollActionArguments } from '../virtualization/Virtualization';
import { ListItem, ListService, ListServiceSettings } from './models/main';
import { DOMService } from './services/main';
/**
 * @hidden
 */
export interface TimeListProps {
    id?: number;
    max?: Date;
    min?: Date;
    onBlur?: any;
    onChange?: any;
    onFocus?: any;
    part: DateFormatPart;
    step?: number;
    value: Date;
    smoothScroll?: boolean;
    boundRange?: boolean;
    disabled?: boolean;
}
/**
 * @hidden
 */
export interface TimeListState {
    dom: DOMService;
    intl: IntlService;
    service: ListService;
    virtualization: any;
    topOffset?: number;
    bottomOffset: number;
    itemHeight: number;
    listHeight: number;
    topThreshold: number;
    bottomThreshold: number;
    animateToIndex: boolean;
    v3: boolean;
}
/**
 * @hidden
 */
export interface TimeListComputed {
    [key: string]: any;
    animate: boolean;
}
/**
 * @hidden
 */
export interface TimeListData {
    currentValue: Date;
}
/**
 * @hidden
 */
export interface TimeListMethods {
    [key: string]: any;
    focus: (args?: any) => void;
    itemOffset: (scrollTop: number) => number;
    calculateHeights: () => void;
    serviceSettings: (settings?: any) => ListServiceSettings;
    handleScrollAction: ({ target, animationInProgress }: ScrollActionArguments) => void;
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    configureServices: () => void;
    handleMouseOver: () => void;
    handleKeyDown: (event: any) => void;
    handleChange: (dataItem: ListItem) => void;
}
/**
 * @hidden
 */
export interface TimeListAll extends Vue2type, TimeListMethods, TimeListData, TimeListComputed, TimeListState {
}
/**
 * @hidden
 */
declare let TimeListVue2: ComponentOptions<TimeListAll, DefaultData<TimeListData>, DefaultMethods<TimeListAll>, TimeListComputed, RecordPropsDefinition<TimeListProps>>;
/**
 * @hidden
 */
declare const TimeList: DefineComponent<TimeListProps, any, TimeListData, TimeListComputed, TimeListMethods, {}, {}, {}, string, TimeListProps, TimeListProps, {}>;
export { TimeList, TimeListVue2 };
