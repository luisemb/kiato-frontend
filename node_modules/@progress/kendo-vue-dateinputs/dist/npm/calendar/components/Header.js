"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderVue2 = exports.Header = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var CalendarHeaderTitle_1 = require("./CalendarHeaderTitle");
var main_1 = require("../../messages/main");
var main_2 = require("../models/main");
var utils_1 = require("../../utils");
var defaults_1 = require("../../defaults");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var HeaderVue2 = {
  name: 'KendoCalendarHeader',
  inheritAttrs: false,
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    activeView: {
      type: Number,
      required: true
    },
    currentDate: {
      type: Date,
      required: true
    },
    focusedDate: {
      type: Date,
      required: true
    },
    headerTitle: {
      type: [String, Object, Function],
      default: function _default() {
        return undefined;
      }
    },
    max: {
      type: Date,
      default: function _default() {
        return utils_1.MAX_DATE;
      }
    },
    min: {
      type: Date,
      default: function _default() {
        return defaults_1.MIN_DATE;
      }
    },
    bus: Object,
    service: Object,
    rangeLength: {
      type: Number,
      default: 1
    },
    tabIndex: {
      type: Number,
      default: 0
    }
  },
  data: function data() {
    return {
      currentRtl: false
    };
  },
  mounted: function mounted() {
    this.currentRtl = (0, kendo_vue_common_1.isRtl)(this.$el);
  },
  computed: {
    navigate: {
      get: function get() {
        return this.$props.bus.canMoveUp(this.$props.activeView);
      }
    },
    todayIsInRange: {
      get: function get() {
        return (0, utils_1.isInRange)((0, utils_1.getToday)(), (0, kendo_date_math_1.getDate)(this.$props.min), (0, kendo_date_math_1.getDate)(this.$props.max));
      }
    }
  },
  methods: {
    getTitle: function getTitle() {
      if (!this.$props.currentDate) {
        return '';
      }
      var take = this.$props.rangeLength - 1;
      var title = this.$props.service.title(this.$props.currentDate);
      var nextDate = this.$props.service.addToDate(this.$props.currentDate, take);
      if (take < 1 || !this.$props.service.isInRange(nextDate, this.$props.min, this.$props.max)) {
        return title;
      }
      return "".concat(title, " - ").concat(this.$props.service.title(nextDate));
    },
    handleTitleClick: function handleTitleClick(event) {
      if (!this.navigate) {
        return;
      }
      this.$props.bus.moveUp(this.$props.activeView, event);
      this.$emit('titleclick', event);
    },
    canNavigate: function canNavigate(action) {
      if (!this.$props.service) {
        return false;
      }
      var candidate = this.$props.service.move(this.$props.focusedDate, action);
      return this.$props.min <= candidate && candidate <= this.$props.max || this.$props.service.isInSameView(candidate, this.$props.min) || this.$props.service.isInSameView(candidate, this.$props.max);
    },
    move: function move(action) {
      return this.clampDate(this.$props.service.move(this.$props.focusedDate, action));
    },
    clampDate: function clampDate(value) {
      return (0, utils_1.dateInRange)(value, this.$props.min, this.$props.max);
    },
    handleNextClick: function handleNextClick(event) {
      var args = {
        event: event,
        value: this.move(main_2.Action.NextView),
        target: this
      };
      this.$emit('nextclick', args);
    },
    handlePrevClick: function handlePrevClick(event) {
      var args = {
        event: event,
        value: this.move(main_2.Action.PrevView),
        target: this
      };
      this.$emit('prevclick', args);
    },
    handleTodayClick: function handleTodayClick(event) {
      if (!this.todayIsInRange) {
        return;
      }
      this.$props.bus.moveToBottom(this.$props.activeView);
      var args = {
        event: event,
        value: (0, utils_1.dateInRange)((0, utils_1.getToday)(), this.$props.min, this.$props.max),
        target: this
      };
      this.$emit('todayclick', args);
    },
    todayKeyDown: function todayKeyDown(event) {
      var keyCode = event.keyCode;
      if (keyCode === kendo_vue_common_1.Keys.enter) {
        this.handleTodayClick(event);
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    this._localization = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var todayMessage = this._localization.toLanguageString(main_1.today, main_1.messages[main_1.today]);
    var title = this.getTitle();
    var prevViewTitle = this._localization.toLanguageString(main_1.prevView, main_1.messages[main_1.prevView]);
    var nextViewTittle = this._localization.toLanguageString(main_1.nextView, main_1.messages[main_1.nextView]);
    var isPrevDisabled = !this.canNavigate(main_2.Action.PrevView);
    var isNextDisabled = !this.canNavigate(main_2.Action.NextView);
    var titleClassNames = (0, kendo_vue_common_1.classNames)('k-calendar-title', 'k-title', {
      'k-disabled': !this.navigate
    });
    var todayClassNames = (0, kendo_vue_common_1.classNames)('k-calendar-nav-today', {
      'k-disabled': !this.todayIsInRange
    });
    var headerTitle;
    var headerTitleDefaultRendering =
    // @ts-ignore  function children
    h(CalendarHeaderTitle_1.CalendarHeaderTitle, {
      value: title,
      attrs: this.v3 ? undefined : {
        value: title,
        view: this.$props.activeView
      },
      view: this.$props.activeView,
      "class": titleClassNames,
      onClick: this.handleTitleClick,
      on: this.v3 ? undefined : {
        "click": this.handleTitleClick
      }
    }, this.v3 ? function () {
      return [title];
    } : [title]);
    headerTitle = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: this.$props.headerTitle,
      defaultRendering: headerTitleDefaultRendering
    });
    return h("div", {
      "class": "k-calendar-header k-hstack",
      style: this.$attrs.style
    }, [headerTitle, h("span", {
      "class": 'k-spacer'
    }), h("span", {
      "class": 'k-calendar-nav k-hstack'
    }, [
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: this.currentRtl ? 'chevron-right' : 'chevron-left',
        svgIcon: this.currentRtl ? kendo_svg_icons_1.chevronRightIcon : kendo_svg_icons_1.chevronLeftIcon,
        size: this.$props.size,
        fillMode: 'flat',
        desabled: isPrevDisabled,
        "aria-label": prevViewTitle,
        title: prevViewTitle
      },
      icon: this.currentRtl ? 'chevron-right' : 'chevron-left',
      svgIcon: this.currentRtl ? kendo_svg_icons_1.chevronRightIcon : kendo_svg_icons_1.chevronLeftIcon,
      size: this.$props.size,
      fillMode: 'flat',
      "class": "k-calendar-nav-pre",
      desabled: isPrevDisabled,
      "aria-label": prevViewTitle,
      title: prevViewTitle,
      onClick: this.handlePrevClick,
      on: this.v3 ? undefined : {
        "click": this.handlePrevClick
      }
    }), h("span", {
      "class": todayClassNames,
      tabindex: this.$props.tabIndex,
      attrs: this.v3 ? undefined : {
        tabindex: this.$props.tabIndex
      },
      onKeydown: this.todayKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.todayKeyDown,
        "click": this.handleTodayClick
      },
      onClick: this.handleTodayClick
    }, [todayMessage]),
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: this.currentRtl ? 'chevron-left' : 'chevron-right',
        svgIcon: this.currentRtl ? kendo_svg_icons_1.chevronLeftIcon : kendo_svg_icons_1.chevronRightIcon,
        size: this.$props.size,
        fillMode: 'flat',
        desabled: isNextDisabled,
        "aria-label": nextViewTittle,
        title: nextViewTittle
      },
      icon: this.currentRtl ? 'chevron-left' : 'chevron-right',
      svgIcon: this.currentRtl ? kendo_svg_icons_1.chevronLeftIcon : kendo_svg_icons_1.chevronRightIcon,
      size: this.$props.size,
      fillMode: 'flat',
      "class": "k-calendar-nav-next",
      desabled: isNextDisabled,
      "aria-label": nextViewTittle,
      title: nextViewTittle,
      onClick: this.handleNextClick,
      on: this.v3 ? undefined : {
        "click": this.handleNextClick
      }
    })])]);
  }
};
exports.HeaderVue2 = HeaderVue2;
/**
 * @hidden
 */
var Header = HeaderVue2;
exports.Header = Header;