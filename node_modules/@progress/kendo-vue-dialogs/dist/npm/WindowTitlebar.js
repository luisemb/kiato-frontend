"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WindowTitleBarVue2 = exports.WindowTitleBar = void 0;
// @ts-ignore
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var StageEnum_1 = require("./StageEnum");
var main_1 = require("./messages/main");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var WindowTitleBarVue2 = {
  name: 'KendoWindowTitleBar',
  props: {
    id: String,
    stage: String,
    closeButton: [String, Function, Object, Boolean],
    minimizeButton: [String, Function, Object, Boolean],
    maximizeButton: [String, Function, Object, Boolean],
    restoreButton: [String, Function, Object, Boolean],
    title: String,
    titleId: String,
    titleRender: [String, Function, Object, Boolean]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  methods: {
    onDoubleClick: function onDoubleClick(e) {
      this.$emit('doubleclick', e);
    },
    onMinimizeClick: function onMinimizeClick(e) {
      this.$emit('minimizeclick', e);
    },
    onFullScreenClick: function onFullScreenClick(e) {
      this.$emit('fullscreenclick', e);
    },
    onRestoreClick: function onRestoreClick(e) {
      this.$emit('restoreclick', e);
    },
    onCloseClick: function onCloseClick(e) {
      this.$emit('closeclick', e);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var props = this.$props;
    var stage = props.stage,
      title = props.title,
      titleRender = props.titleRender,
      minimizeButton = props.minimizeButton,
      maximizeButton = props.maximizeButton,
      restoreButton = props.restoreButton,
      closeButton = props.closeButton;
    var ls = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var titleElement = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: titleRender,
      defaultRendering: title
    });
    var minimizeButtonDefault =
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'window-minimize',
        svgIcon: kendo_svg_icons_1.windowMinimizeIcon,
        fillMode: 'flat',
        "aria-label": ls.toLanguageString(main_1.dialogsWindowMinimizeButton, main_1.messages[main_1.dialogsWindowMinimizeButton])
      },
      "class": "k-window-titlebar-action",
      icon: 'window-minimize',
      svgIcon: kendo_svg_icons_1.windowMinimizeIcon,
      fillMode: 'flat',
      onClick: this.onMinimizeClick,
      on: this.v3 ? undefined : {
        "click": this.onMinimizeClick
      },
      "aria-label": ls.toLanguageString(main_1.dialogsWindowMinimizeButton, main_1.messages[main_1.dialogsWindowMinimizeButton])
    });
    var minimizeButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: minimizeButton,
      defaultRendering: minimizeButtonDefault
    });
    var maximizeButtonDefault =
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'window',
        svgIcon: kendo_svg_icons_1.windowIcon,
        fillMode: 'flat',
        "aria-label": ls.toLanguageString(main_1.dialogsWindowMaximizeButton, main_1.messages[main_1.dialogsWindowMaximizeButton])
      },
      "class": "k-window-titlebar-action",
      icon: 'window',
      svgIcon: kendo_svg_icons_1.windowIcon,
      fillMode: 'flat',
      onClick: this.onFullScreenClick,
      on: this.v3 ? undefined : {
        "click": this.onFullScreenClick
      },
      "aria-label": ls.toLanguageString(main_1.dialogsWindowMaximizeButton, main_1.messages[main_1.dialogsWindowMaximizeButton])
    });
    var maximizeButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: maximizeButton,
      defaultRendering: maximizeButtonDefault
    });
    var restoreButtonDefault =
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'window-restore',
        svgIcon: kendo_svg_icons_1.windowRestoreIcon,
        fillMode: 'flat',
        "aria-label": ls.toLanguageString(main_1.dialogsWindowRestoreButton, main_1.messages[main_1.dialogsWindowRestoreButton])
      },
      "class": "k-window-titlebar-action",
      icon: 'window-restore',
      svgIcon: kendo_svg_icons_1.windowRestoreIcon,
      fillMode: 'flat',
      onClick: this.onRestoreClick,
      on: this.v3 ? undefined : {
        "click": this.onRestoreClick
      },
      "aria-label": ls.toLanguageString(main_1.dialogsWindowRestoreButton, main_1.messages[main_1.dialogsWindowRestoreButton])
    });
    var restoreButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: restoreButton,
      defaultRendering: restoreButtonDefault
    });
    var closeButtonDefault =
    // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'x',
        svgIcon: kendo_svg_icons_1.xIcon,
        fillMode: 'flat',
        "aria-label": ls.toLanguageString(main_1.dialogsWindowCloseButton, main_1.messages[main_1.dialogsWindowCloseButton])
      },
      "class": "k-window-titlebar-action",
      icon: 'x',
      svgIcon: kendo_svg_icons_1.xIcon,
      fillMode: 'flat',
      onClick: this.onCloseClick,
      on: this.v3 ? undefined : {
        "click": this.onCloseClick
      },
      "aria-label": ls.toLanguageString(main_1.dialogsWindowCloseButton, main_1.messages[main_1.dialogsWindowCloseButton])
    });
    var closeButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: closeButton,
      defaultRendering: closeButtonDefault
    });
    return h("div", {
      "class": "k-window-titlebar",
      style: {
        touchAction: 'none'
      },
      onDblclick: this.onDoubleClick,
      on: this.v3 ? undefined : {
        "dblclick": this.onDoubleClick
      }
    }, [h("span", {
      "class": "k-window-title",
      id: this.$props.titleId,
      attrs: this.v3 ? undefined : {
        id: this.$props.titleId
      }
    }, [titleElement]), h("div", {
      "class": "k-window-titlebar-actions"
    }, [stage === StageEnum_1.windowStage.DEFAULT && minimizeButtonRender, stage === StageEnum_1.windowStage.DEFAULT && maximizeButtonRender, stage !== StageEnum_1.windowStage.DEFAULT && restoreButtonRender, closeButtonRender])]);
  }
};
exports.WindowTitleBarVue2 = WindowTitleBarVue2;
/**
 * @hidden
 */
var WindowTitleBar = WindowTitleBarVue2;
exports.WindowTitleBar = WindowTitleBar;