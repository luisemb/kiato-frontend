import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { DialogCloseEvent } from './events';
/**
 * Represents the props of the [KendoVue Dialog component]({% slug overview_dialog %}).
 */
export interface DialogProps {
    /**
     * Defines the string selector to the element to which the Dialog will be appended. Defaults to its parent element.
     */
    appendTo?: String;
    /**
     * Sets the title of the Dialog ([see example]({% slug title_dialog %})). If `title` is not specified, the Dialog does not render a **Close** button.
     */
    title?: string | any;
    /**
     * Defines the custom rendering of the title. Accepts a Vue component, a `render` function, or a slot name.
     */
    titleRender?: ((h: any, defaultRendering: any | null, props: any, listeners: any) => any) | string | any;
    /**
     * Sets a class of the Dialog DOM element.
     */
    className?: string;
    /**
     * Specifies whether a close button should be rendered at the top corner of the dialog.
     */
    closeIcon?: boolean;
    /**
     * Specifies the width of the Dialog ([see example]({% slug dimensions_dialog %})).
     */
    width?: number | string;
    /**
     * Specifies the height of the Dialog ([see example]({% slug dimensions_dialog %})).
     */
    height?: number | string;
    /**
     * Specifies the minimum width of the Dialog.
     */
    minWidth?: number | string;
    /**
     * Specifies the theme color of the Dialog.
     */
    themeColor?: 'primary' | 'dark' | 'light' | string;
    /**
     * Fires when the **Close** button in the title is clicked or when the `Esc` button is pressed.
     */
    onClose?: (event: DialogCloseEvent) => void;
    /**
     * Fires when modal overlay of the Window is clicked.
     */
    onOverlayclick?: (event: any) => void;
    /**
     * Sets the `aria-labelledby` value.
     */
    id?: string;
    /**
     * Sets the `id` of the wrapper element.
     */
    wrapperId?: string;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * The styles that are applied to the Dialog.
     */
    style?: any;
    /**
     * The styles that are applied to the content of the Dialog.
     */
    contentStyle?: any;
    dialogClass?: string;
}
/**
 * @hidden
 */
export interface DialogMethods {
    [key: string]: any;
    handleCloseDialog: (event: any) => void;
    handleKeyDown: (event: any) => void;
    transformDimesion: (initialValue: string | number | undefined) => string;
    getActionBarIndex: (children: any) => any;
    generateTitleId: () => string;
}
/**
 * @hidden
 */
export interface DialogState {
    titleId?: string;
    v3: boolean;
    windowElement?: any;
}
/**
 * @hidden
 */
export interface DialogAll extends Vue2type, DialogMethods, DialogState {
}
/**
 * @hidden
 */
declare let DialogVue2: ComponentOptions<DialogAll, DefaultData<{}>, DefaultMethods<DialogAll>, {}, RecordPropsDefinition<DialogProps>>;
/**
 * @hidden
 */
declare const Dialog: DefineComponent<DialogProps, any, {}, {}, DialogMethods, {}, {}, {}, string, DialogProps, DialogProps, {}>;
export { Dialog, DialogVue2 };
