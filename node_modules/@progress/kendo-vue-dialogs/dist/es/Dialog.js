// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { DialogTitleBar } from './DialogTitleBar';
import { guid, Keys, templateRendering, hasListener, templateDefinition, getListeners, getDefaultSlots, validatePackage, shouldShowValidationUI, WatermarkOverlay } from '@progress/kendo-vue-common';
import { packageMetadata } from './package-metadata';
import { DEFAULT_DIALOGS_ZINDEX } from './constants';
/**
 * @hidden
 */
var DialogVue2 = {
  name: 'KendoDialog',
  // @ts-ignore
  emits: {
    close: null,
    overlayclick: null
  },
  props: {
    appendTo: String,
    title: String,
    titleRender: templateDefinition,
    id: String,
    wrapperId: String,
    dir: String,
    closeIcon: {
      type: Boolean,
      default: true
    },
    width: [String, Number],
    height: [String, Number],
    minWidth: [String, Number],
    dialogClass: String,
    themeColor: {
      type: String,
      validator: function validator(value) {
        return ['primary', 'dark', 'light'].includes(value);
      }
    }
  },
  provide: function provide() {
    return {
      kCurrentZIndex: DEFAULT_DIALOGS_ZINDEX
    };
  },
  data: function data() {
    return {
      showLicenseWatermark: false
    };
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.showLicenseWatermark = shouldShowValidationUI(packageMetadata);
    this.titleId = this.generateTitleId();
    this.contentId = this.generateContentId();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  computed: {
    dialogElementClass: function dialogElementClass() {
      var _a;
      var _b = this.$props,
        dialogClass = _b.dialogClass,
        themeColor = _b.themeColor;
      return _a = {
        'k-window': true,
        'k-dialog': true
      }, _a[dialogClass] = dialogClass, _a["k-window-".concat(themeColor)] = themeColor, _a;
    }
  },
  mounted: function mounted() {
    if (this.$props.appendTo) {
      var body = document.querySelector(this.$props.appendTo);
      this.windowElement = this.$refs.wrapper;
      body.append(this.windowElement);
    }
  },
  beforeDestroy: !!isV3 ? undefined : function () {
    if (this.$props.appendTo) {
      this.windowElement.remove();
    }
  },
  // @ts-ignore
  beforeUnmount: function beforeUnmount() {
    if (this.$props.appendTo) {
      this.windowElement.remove();
    }
  },
  methods: {
    handleCloseDialog: function handleCloseDialog(event) {
      event.preventDefault();
      this.$emit('close', {
        event: event,
        target: this
      });
    },
    handleKeyDown: function handleKeyDown(event) {
      if (event.keyCode === Keys.esc && hasListener.call(this, 'close')) {
        event.preventDefault();
        this.handleCloseDialog(event);
      }
    },
    transformDimesion: function transformDimesion(initialValue) {
      return typeof initialValue === 'string' ? initialValue.endsWith('px') || initialValue.endsWith('%') ? initialValue : initialValue + 'px' : initialValue + 'px';
    },
    getActionBarIndex: function getActionBarIndex(children) {
      var actionBarIndex = children.findIndex(function (child) {
        return child && child.tag && child.tag.toLowerCase().indexOf('dialogactionsbar') !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf('actions-bar') !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf('dialogactionsbar') !== -1;
      });
      return actionBarIndex;
    },
    generateTitleId: function generateTitleId() {
      return 'dialog-title' + guid();
    },
    generateContentId: function generateContentId() {
      return 'dialog-content' + guid();
    },
    handleClick: function handleClick(e) {
      this.$emit('overlayclick', e);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var id = this.$props.id !== undefined ? this.$props.id : this.titleId;
    var _a = this.$props,
      title = _a.title,
      width = _a.width,
      height = _a.height,
      minWidth = _a.minWidth,
      dir = _a.dir,
      contentStyle = _a.contentStyle,
      wrapperId = _a.wrapperId;
    var titleRender = this.$props.titleRender ? templateRendering.call(this, this.$props.titleRender, getListeners.call(this)) : null;
    var defaultSlot = getDefaultSlots(this);
    var content = defaultSlot || [];
    width = this.transformDimesion(width);
    height = this.transformDimesion(height);
    minWidth = this.transformDimesion(minWidth);
    var watermark = this.showLicenseWatermark ? h(WatermarkOverlay) : null;
    var actionBarIndex = this.getActionBarIndex(content);
    var actions;
    if (actionBarIndex !== -1) {
      actions = content[actionBarIndex];
      content.splice(actionBarIndex, 1);
    }
    var closeIcon = this.$props.closeIcon !== undefined ? this.$props.closeIcon : true;
    var dialog = h("div", {
      ref: 'wrapper',
      "class": 'k-dialog-wrapper',
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown
      },
      tabindex: 0,
      attrs: this.v3 ? undefined : {
        tabindex: 0,
        id: wrapperId,
        dir: dir
      },
      id: wrapperId,
      dir: dir
    }, [h("div", {
      "class": "k-overlay",
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick
      }
    }), h("div", {
      "aria-labelledby": title || titleRender ? id : undefined,
      attrs: this.v3 ? undefined : {
        "aria-labelledby": title || titleRender ? id : undefined,
        "aria-describedby": this.contentId,
        "aria-modal": true,
        role: "dialog"
      },
      "aria-describedby": this.contentId,
      "aria-modal": true,
      "class": this.dialogElementClass,
      role: "dialog",
      style: {
        width: width,
        height: height,
        minWidth: minWidth
      }
    }, [(title || titleRender) &&
    // @ts-ignore
    h(DialogTitleBar, {
      closeIcon: closeIcon,
      attrs: this.v3 ? undefined : {
        closeIcon: closeIcon,
        id: id,
        title: title,
        titleRender: titleRender
      },
      onClosebuttonclick: this.handleCloseDialog,
      on: this.v3 ? undefined : {
        "closebuttonclick": this.handleCloseDialog
      },
      id: id,
      title: title,
      titleRender: titleRender
    }), h("div", {
      "class": "k-window-content k-dialog-content",
      style: contentStyle,
      id: this.contentId,
      attrs: this.v3 ? undefined : {
        id: this.contentId
      }
    }, [content]), actions, watermark])]);
    return this.$props.appendTo ? h("div", [dialog]) : dialog;
  }
};
/**
 * @hidden
 */
var Dialog = DialogVue2;
export { Dialog, DialogVue2 };