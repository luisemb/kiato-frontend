import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
import { WindowProps } from './WindowProps';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { windowStage } from './StageEnum';
/**
 * @hidden
 */
export interface WindowComputed {
    [key: string]: any;
    computedTop: number;
    computedLeft: number;
    computedWidth: number;
    computedHeight: number;
    windowStage: any;
}
/**
 * @hidden
 */
interface WindowData {
    currentStage: windowStage | string;
    isDragging: boolean;
    currentTop: number;
    currentLeft: number;
    currentWidth: number;
    currentHeight: number;
}
/**
 * @hidden
 */
interface WindowState {
    windowCoordinatesState: any;
    draggable: any;
    windowElement: any;
}
/**
 * @hidden
 */
export interface WindowMethods extends Vue2type {
    getInitialTop: () => number;
    getInitialLeft: () => number;
    getInitialWidth: () => number;
    getInitialHeight: () => number;
    dispatchMoveEvent: (eventName: string, event: any, drag: boolean, end: boolean | undefined) => void;
    handleFullscreen: (event: any) => void;
    handleCloseWindow: (event: any) => void;
    handleRestore: (event: any) => void;
    handleMinimize: (event: any) => void;
    handleDoubleClick: (e: any) => void;
    handleResize: (event: any, props: {
        end: boolean;
        direction: string;
    }) => void;
    onPress: (data: any) => void;
    onDrag: (data: any) => void;
    onRelease: (data: any) => void;
    handleKeyDown: (event: any) => void;
    handleBrowserWindowResize: () => void;
}
/**
 * @hidden
 */
export interface WindowAll extends WindowMethods, WindowData, WindowState, WindowComputed {
}
/**
 * @hidden
 */
declare let WindowVue2: ComponentOptions<Vue2type, DefaultData<WindowData>, DefaultMethods<WindowAll>, WindowComputed, RecordPropsDefinition<WindowProps>>;
/**
 * @hidden
 */
declare const Window: DefineComponent<WindowProps, any, WindowData, WindowComputed, WindowMethods, {}, {}, {}, string, WindowProps, WindowProps, {}>;
export { Window, WindowVue2 };
