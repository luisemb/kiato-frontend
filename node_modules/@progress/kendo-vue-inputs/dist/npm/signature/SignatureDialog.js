"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignatureDialogVue2 = exports.SignatureDialog = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_dialogs_1 = require("@progress/kendo-vue-dialogs");
var SignatureBottomActions_1 = require("./SignatureBottomActions");
var SignatureLine_1 = require("./SignatureLine");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var SignatureCanvas_1 = require("./SignatureCanvas");
var main_1 = require("../messages/main");
/**
 * @hidden
 */
var SignatureDialogVue2 = {
  name: 'KendoSignatureDialog',
  // @ts-ignore
  emits: {
    change: null,
    clear: null,
    close: null,
    focus: null,
    blur: null,
    overlayclick: null,
    draw: null,
    drawend: null
  },
  props: {
    openWrapperClass: Object,
    size: String,
    dir: String,
    popupWidth: Number,
    popupHeight: Number,
    showClear: Boolean,
    strokeWidth: Number,
    popupScale: Number,
    scale: Number,
    value: String,
    tabIndex: Number,
    disabled: Boolean,
    readOnly: Boolean,
    color: String,
    backgroundColor: String,
    elementSize: Function,
    smooth: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      isDrawing: false
    };
  },
  mounted: function mounted() {
    this.openCanvas = (0, kendo_vue_common_1.getRef)(this, 'openCanvas');
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      showClear = _a.showClear,
      popupWidth = _a.popupWidth,
      popupHeight = _a.popupHeight,
      dir = _a.dir,
      size = _a.size,
      value = _a.value,
      tabIndex = _a.tabIndex,
      disabled = _a.disabled,
      readOnly = _a.readOnly,
      color = _a.color,
      backgroundColor = _a.backgroundColor,
      strokeWidth = _a.strokeWidth,
      smooth = _a.smooth,
      popupScale = _a.popupScale,
      scale = _a.scale,
      elementSize = _a.elementSize;
    var ls = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var minimizeTitle = ls.toLanguageString(main_1.signatureMinimize, main_1.messages[main_1.signatureMinimize]);
    var clearTitle = ls.toLanguageString(main_1.signatureClear, main_1.messages[main_1.signatureClear]);
    var hideLine = !this.$props.hideLine && h(SignatureLine_1.SignatureLine);
    var bottomActions = h(SignatureBottomActions_1.SignatureBottomActions, {
      showClear: showClear,
      attrs: this.v3 ? undefined : {
        showClear: showClear,
        size: size,
        title: clearTitle
      },
      size: size,
      onClear: this.onClear,
      on: this.v3 ? undefined : {
        "clear": this.onClear
      },
      title: clearTitle
    });
    var dialog =
    // @ts-ignore function children
    h(kendo_vue_dialogs_1.Dialog, {
      ref: (0, kendo_vue_common_1.setRef)(this, 'dialog'),
      onOverlayclick: this.onOverlayClick,
      on: this.v3 ? undefined : {
        "overlayclick": this.onOverlayClick
      }
    }, this.v3 ? function () {
      return [h("div", {
        style: {
          width: popupWidth + 'px',
          height: popupHeight + 'px'
        },
        dir: dir,
        attrs: _this.v3 ? undefined : {
          dir: dir
        },
        "class": _this.openWrapperClass,
        onFocus: _this.onFocus,
        on: _this.v3 ? undefined : {
          "focus": _this.onFocus,
          "blur": _this.onBlur
        },
        onBlur: _this.onBlur
      }, [h(SignatureCanvas_1.SignatureCanvas, {
        ref: (0, kendo_vue_common_1.setRef)(_this, 'openCanvas'),
        value: value,
        attrs: _this.v3 ? undefined : {
          value: value,
          tabIndex: tabIndex,
          disabled: disabled,
          readOnly: readOnly,
          color: color,
          backgroundColor: backgroundColor,
          strokeWidth: strokeWidth,
          smooth: smooth,
          popupScale: popupScale,
          scale: scale,
          elementSize: elementSize
        },
        tabIndex: tabIndex,
        disabled: disabled,
        readOnly: readOnly,
        color: color,
        backgroundColor: backgroundColor,
        strokeWidth: strokeWidth,
        smooth: smooth,
        popupScale: popupScale,
        scale: scale,
        onChange: _this.onValueChange,
        on: _this.v3 ? undefined : {
          "change": _this.onValueChange,
          "draw": _this.onDraw,
          "drawend": _this.onDrawEnd
        },
        elementSize: elementSize,
        onDraw: _this.onDraw,
        onDrawend: _this.onDrawEnd
      }), h("div", {
        "class": 'k-signature-actions k-signature-actions-top'
      }, [!_this.isDrawing &&
      // @ts-ignore
      h(kendo_vue_buttons_1.Button, {
        "class": 'k-signature-action k-signature-minimize k-rotate-180',
        ref: (0, kendo_vue_common_1.setRef)(_this, 'minimizeButton'),
        icon: 'hyperlink-open',
        attrs: _this.v3 ? undefined : {
          icon: 'hyperlink-open',
          svgIcon: kendo_svg_icons_1.hyperlinkOpenIcon,
          shape: null,
          fillMode: 'flat',
          size: _this.$props.size,
          "aria-label": minimizeTitle,
          title: minimizeTitle
        },
        svgIcon: kendo_svg_icons_1.hyperlinkOpenIcon,
        shape: null,
        fillMode: 'flat',
        size: _this.$props.size,
        onClick: _this.onMinimizeClick,
        on: _this.v3 ? undefined : {
          "click": _this.onMinimizeClick
        },
        "aria-label": minimizeTitle,
        title: minimizeTitle
      })]), hideLine, bottomActions])];
    } : [h("div", {
      style: {
        width: popupWidth + 'px',
        height: popupHeight + 'px'
      },
      dir: dir,
      attrs: _this.v3 ? undefined : {
        dir: dir
      },
      "class": _this.openWrapperClass,
      onFocus: _this.onFocus,
      on: _this.v3 ? undefined : {
        "focus": _this.onFocus,
        "blur": _this.onBlur
      },
      onBlur: _this.onBlur
    }, [h(SignatureCanvas_1.SignatureCanvas, {
      ref: (0, kendo_vue_common_1.setRef)(_this, 'openCanvas'),
      value: value,
      attrs: _this.v3 ? undefined : {
        value: value,
        tabIndex: tabIndex,
        disabled: disabled,
        readOnly: readOnly,
        color: color,
        backgroundColor: backgroundColor,
        strokeWidth: strokeWidth,
        smooth: smooth,
        popupScale: popupScale,
        scale: scale,
        elementSize: elementSize
      },
      tabIndex: tabIndex,
      disabled: disabled,
      readOnly: readOnly,
      color: color,
      backgroundColor: backgroundColor,
      strokeWidth: strokeWidth,
      smooth: smooth,
      popupScale: popupScale,
      scale: scale,
      onChange: _this.onValueChange,
      on: _this.v3 ? undefined : {
        "change": _this.onValueChange,
        "draw": _this.onDraw,
        "drawend": _this.onDrawEnd
      },
      elementSize: elementSize,
      onDraw: _this.onDraw,
      onDrawend: _this.onDrawEnd
    }), h("div", {
      "class": 'k-signature-actions k-signature-actions-top'
    }, [!_this.isDrawing && h(kendo_vue_buttons_1.Button, {
      "class": 'k-signature-action k-signature-minimize k-rotate-180',
      ref: (0, kendo_vue_common_1.setRef)(_this, 'minimizeButton'),
      icon: 'hyperlink-open',
      attrs: _this.v3 ? undefined : {
        icon: 'hyperlink-open',
        svgIcon: kendo_svg_icons_1.hyperlinkOpenIcon,
        shape: null,
        fillMode: 'flat',
        size: _this.$props.size,
        "aria-label": minimizeTitle,
        title: minimizeTitle
      },
      svgIcon: kendo_svg_icons_1.hyperlinkOpenIcon,
      shape: null,
      fillMode: 'flat',
      size: _this.$props.size,
      onClick: _this.onMinimizeClick,
      on: _this.v3 ? undefined : {
        "click": _this.onMinimizeClick
      },
      "aria-label": minimizeTitle,
      title: minimizeTitle
    })]), hideLine, bottomActions])]);
    return dialog;
  },
  methods: {
    onDraw: function onDraw() {
      this.isDrawing = true;
      this.$emit('draw');
    },
    onDrawEnd: function onDrawEnd() {
      this.isDrawing = false;
      this.$emit('drawend');
    },
    onValueChange: function onValueChange(nextValue) {
      this.$emit('change', nextValue);
    },
    onClear: function onClear() {
      this.$emit('clear');
    },
    onMinimizeClick: function onMinimizeClick() {
      this.$emit('close');
    },
    onFocus: function onFocus(e) {
      this.$emit('focus', e);
    },
    onBlur: function onBlur(e) {
      this.$emit('blur', e);
    },
    onOverlayClick: function onOverlayClick(e) {
      this.$emit('overlayclick', e);
    }
  }
};
exports.SignatureDialogVue2 = SignatureDialogVue2;
/**
 * @hidden
 */
var SignatureDialog = SignatureDialogVue2;
exports.SignatureDialog = SignatureDialog;