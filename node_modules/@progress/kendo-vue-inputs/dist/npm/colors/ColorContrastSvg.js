"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorContrastSvgVue2 = exports.ColorContrastSvg = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var svg_calc_1 = require("./utils/svg-calc");
var color_parser_1 = require("./utils/color-parser");
var AA_CONTRAST = 4.5;
var AAA_CONTRAST = 7;
var STEP_COUNT = 16;
/**
 * @hidden
 */
var ColorContrastSvgVue2 = {
  name: 'KendoColorContrastSvg',
  props: {
    metrics: Object,
    backgroundColor: String,
    hsva: Object
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var svgPath = function svgPath(points, command) {
      if (points.length === 0) {
        return '';
      }
      // build the d attributes by looping over the points
      var d = points.reduce(function (acc, point, i, a) {
        return i === 0 ?
        // if first point
        "M ".concat(point[0], ",").concat(point[1]) :
        // else
        "".concat(acc, " ").concat(command(point, i, a));
      }, '');
      return h("path", {
        d: d,
        attrs: this.v3 ? undefined : {
          d: d,
          fill: "none",
          stroke: "white",
          "stroke-width": "1"
        },
        fill: "none",
        stroke: "white",
        "stroke-width": "1"
      });
    };
    var gradientRectMetrics = this.$props.metrics;
    var findValue = function findValue(contrast, saturation, low, high, comparer) {
      var mid = (low + high) / 2;
      var hsva = Object.assign({}, _this.$props.hsva, {
        s: saturation / gradientRectMetrics.width,
        v: 1 - mid / gradientRectMetrics.height
      });
      var currentContrast = (0, color_parser_1.getContrastFromTwoRGBAs)((0, color_parser_1.getRGBA)((0, color_parser_1.getColorFromHSV)(hsva)), (0, color_parser_1.getRGBA)(_this.$props.backgroundColor || ''));
      if (low + 0.5 > high) {
        if (currentContrast < contrast + 1 && currentContrast > contrast - 1) {
          return mid;
        } else {
          return null;
        }
      }
      if (comparer(currentContrast, contrast)) {
        return findValue(contrast, saturation, low, high - (high - low) / 2, comparer);
      }
      return findValue(contrast, saturation, low + (high - low) / 2, high, comparer);
    };
    var getPaths = function getPaths(contrast, stepCount, reversed) {
      if (reversed === void 0) {
        reversed = false;
      }
      var points = [];
      for (var i = 0; i <= gradientRectMetrics.width; i += gradientRectMetrics.width / stepCount) {
        var value = findValue(contrast, i, 0, gradientRectMetrics.height, reversed ? function (a, b) {
          return a < b;
        } : function (a, b) {
          return a > b;
        });
        if (value !== null) {
          points.push([i, value]);
        }
      }
      return points;
    };
    var bezierCommandCalc = (0, svg_calc_1.bezierCommand)((0, svg_calc_1.controlPoint)(svg_calc_1.line));
    return h("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      attrs: this.v3 ? undefined : {
        xmlns: "http://www.w3.org/2000/svg"
      },
      "class": 'k-color-contrast-svg',
      style: {
        position: 'absolute',
        overflow: 'visible',
        pointerEvents: 'none',
        left: 0,
        top: 0,
        zIndex: 3
      }
    }, [svgPath.call(this, getPaths(AA_CONTRAST, STEP_COUNT), bezierCommandCalc), svgPath.call(this, getPaths(AA_CONTRAST, STEP_COUNT, true), bezierCommandCalc), svgPath.call(this, getPaths(AAA_CONTRAST, STEP_COUNT), bezierCommandCalc), svgPath.call(this, getPaths(AAA_CONTRAST, STEP_COUNT, true), bezierCommandCalc)]);
  }
};
exports.ColorContrastSvgVue2 = ColorContrastSvgVue2;
/**
 * @hidden
 */
var ColorContrastSvg = ColorContrastSvgVue2;
exports.ColorContrastSvg = ColorContrastSvg;