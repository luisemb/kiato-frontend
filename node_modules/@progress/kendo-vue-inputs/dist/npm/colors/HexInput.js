"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HexInputVue2 = exports.HexInput = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var color_parser_1 = require("./utils/color-parser");
var misc_1 = require("./utils/misc");
var TextBox_1 = require("../textbox/TextBox");
/**
 * @hidden
 */
var HexInputVue2 = {
  name: 'KendoHexInput',
  // @ts-ignore
  emits: {
    'hexchange': null,
    'blur': null,
    'focus': null
  },
  props: {
    tabIndex: Number,
    hex: String,
    disabled: Boolean
  },
  computed: {
    isHexValid: function isHexValid() {
      return !!(0, color_parser_1.parseColor)(this.currentHex, 'rgba');
    }
  },
  data: function data() {
    return {
      currentHex: this.$props.hex,
      originalHex: this.$props.hex
    };
  },
  mounted: function mounted() {
    this._input = this.$refs.input._input;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  watch: {
    hex: function hex(newValue) {
      this.currentHex = newValue;
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    return h(TextBox_1.TextBox, {
      value: this.currentHex,
      attrs: this.v3 ? undefined : {
        value: this.currentHex,
        valid: this.isHexValid,
        disabled: this.$props.disabled,
        tabIndex: this.tabIndex
      },
      onInput: this.onChange,
      on: this.v3 ? undefined : {
        "input": this.onChange,
        "change": this.onChange,
        "focus": this.onFocus,
        "blur": this.onBlur
      },
      onChange: this.onChange,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      valid: this.isHexValid,
      disabled: this.$props.disabled,
      tabIndex: this.tabIndex,
      ref: 'input'
    });
  },
  methods: {
    onChange: function onChange(event) {
      var hex = event.target.value;
      var value = (0, color_parser_1.parseColor)(hex, 'rgba');
      this.currentHex = hex;
      if ((0, misc_1.isPresent)(value)) {
        this.$emit('hexchange', {
          hex: hex,
          value: value,
          event: event
        });
      }
    },
    onBlur: function onBlur(event) {
      if (!(0, misc_1.isPresent)((0, color_parser_1.parseColor)(this.hex, 'rgba'))) {
        this.currentHex = this.originalHex;
      }
      this.$emit('blur', event);
    },
    onFocus: function onFocus(event) {
      this.$emit('focus', event);
    }
  }
};
exports.HexInputVue2 = HexInputVue2;
/**
 * @hidden
 */
var HexInput = HexInputVue2;
exports.HexInput = HexInput;