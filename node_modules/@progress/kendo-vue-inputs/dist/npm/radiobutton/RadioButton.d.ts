import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { RadioButtonProps } from './interfaces/RadioButtonProps';
/**
 * @hidden
 */
export interface RadioButtonHandle {
    input: HTMLInputElement | null;
    focus: any;
}
/**
 * @hidden
 */
export interface RadioButtonData {
}
export interface RadioButtonState {
    calculatedId: string;
    input: any;
    inputRef: any;
    v3: boolean;
}
/**
 * @hidden
 */
export interface RadioButtonMethods {
    [key: string]: any;
    focusElement: () => void;
    handleChange: (e: any) => void;
    handleFocus: (e: any) => void;
    handleBlur: (e: any) => void;
}
/**
 * @hidden
 */
export interface RadioButtonComputed {
    [key: string]: any;
    inputClassName: object;
}
/**
 * @hidden
 */
export interface RadioButtonAll extends Vue2type, RadioButtonMethods, RadioButtonComputed, RadioButtonState, RadioButtonData {
}
/**
 * @hidden
 */
declare let RadioButtonVue2: ComponentOptions<RadioButtonAll, DefaultData<RadioButtonData>, DefaultMethods<RadioButtonAll>, RadioButtonComputed, RecordPropsDefinition<RadioButtonProps>>;
/**
 * @hidden
 */
declare let RadioButton: DefineComponent<RadioButtonProps, any, RadioButtonData, RadioButtonComputed, RadioButtonMethods, {}, {}, {}, string, RadioButtonProps, RadioButtonProps, {}>;
export { RadioButton, RadioButtonVue2 };
