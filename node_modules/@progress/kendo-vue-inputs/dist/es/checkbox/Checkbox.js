// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { Keys, classNames, guid, getTabIndex, getDefaultSlots, validatePackage, templateRendering, getTemplate, getListeners, kendoThemeMaps, setRef, getRef } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, checkboxValidation, checkboxOptionalText } from '../messages/main';
/**
 * @hidden
 */
var CheckboxVue2 = {
  name: 'KendoCheckbox',
  // @ts-ignore
  emits: {
    'changemodel': null,
    'update:modelValue': null,
    change: null,
    focus: null,
    blur: null
  },
  model: {
    event: 'changemodel'
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    checked: {
      type: Boolean,
      default: undefined
    },
    defaultChecked: {
      type: Boolean,
      default: undefined
    },
    defaultValue: {
      type: [String, Boolean],
      default: undefined
    },
    modelValue: {
      type: [String, Boolean],
      default: undefined
    },
    dir: String,
    disabled: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    label: String,
    labelRender: [String, Number, Boolean, Object],
    labelPlacement: String,
    labelOptional: Boolean,
    labelClass: String,
    name: String,
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    rounded: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    tabIndex: Number,
    value: {
      type: [String, Boolean],
      default: undefined
    },
    validationMessage: String,
    required: Boolean,
    valid: {
      type: Boolean,
      default: undefined
    },
    validityStyles: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      valueDuringOnChange: undefined,
      currentDir: 'ltr',
      currentChecked: undefined,
      currentValue: undefined
    };
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.calculatedId = guid();
    if (this.$props.defaultChecked !== undefined) {
      this.currentChecked = this.$props.defaultChecked;
    }
    if (this.$props.defaultValue !== undefined) {
      this.currentValue = this.$props.defaultValue;
    }
    this.currentDir = this.$props.dir;
  },
  computed: {
    valueIsBooleanOrNull: function valueIsBooleanOrNull() {
      var value = this.$props.value;
      return typeof value === 'boolean' || value === null;
    },
    isCheckedControlled: function isCheckedControlled() {
      return this.$props.checked !== undefined;
    },
    isValueControlled: function isValueControlled() {
      return this.$props.value !== undefined && this.valueIsBooleanOrNull;
    },
    computedValue: function computedValue() {
      return this.$data.valueDuringOnChange !== undefined ? this.$data.valueDuringOnChange : this.$props.value !== undefined ? this.$props.value : this.$props.modelValue !== undefined ? this.$props.modelValue : this.$data.currentValue;
    },
    computedChecked: function computedChecked() {
      return this.$data.valueDuringOnChange !== undefined ? this.$data.valueDuringOnChange : this.$props.checked !== undefined ? this.$props.checked : this.$props.modelValue !== undefined ? this.$props.modelValue : this.$data.currentChecked;
    },
    useValueAsChecked: function useValueAsChecked() {
      return this.computedChecked === undefined && this.computedValue;
    },
    checkedProp: function checkedProp() {
      return this.useValueAsChecked ? this.computedValue : this.computedChecked;
    },
    valueProp: function valueProp() {
      var value = this.$props.value;
      return this.useValueAsChecked || this.isValueControlled ? value === null ? value : undefined : value || this.computedValue;
    },
    indeterminateProp: function indeterminateProp() {
      return this.checkedProp === null || this.valueProp === null;
    },
    isValid: function isValid() {
      var valid = this.$props.valid;
      return valid !== undefined ? valid : !this.$props.required ? true : this.computedChecked ? true : false;
    },
    labelComputedClass: function labelComputedClass() {
      var _a;
      return _a = {
        'k-checkbox-label': true
      }, _a[this.$props.labelClass] = this.$props.labelClass, _a;
    }
  },
  mounted: function mounted() {
    this.input = getRef(this, 'input');
    if (!this.currentDir && window && this.$el) {
      // Note: getComputedStyle forces reflow
      var direction = window.getComputedStyle(this.$el).direction;
      if (direction) {
        this.currentDir = direction;
      }
    }
    this.setValidity();
  },
  updated: function updated() {
    if (!this.input) {
      this.input = getRef(this, 'input');
    }
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      inputRef: inputRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var _b = this.$props,
      ariaDescribedBy = _b.ariaDescribedBy,
      ariaLabelledBy = _b.ariaLabelledBy,
      disabled = _b.disabled,
      id = _b.id,
      label = _b.label,
      labelRender = _b.labelRender,
      labelPlacement = _b.labelPlacement,
      name = _b.name,
      labelOptional = _b.labelOptional,
      tabIndex = _b.tabIndex,
      required = _b.required,
      validityStyles = _b.validityStyles,
      size = _b.size,
      rounded = _b.rounded;
    var defaultSlot = getDefaultSlots(this);
    var renderedLabel = label;
    this.localizationService = provideLocalizationService(this);
    this.defaultValidationMessage = this.localizeMessage(checkboxValidation);
    this.optionalMessage = this.localizeMessage(checkboxOptionalText);
    var checkboxClasses = classNames({
      'k-checkbox-wrap': true,
      'k-disabled': disabled
    });
    var inputClasses = classNames((_a = {
      'k-checkbox': true
    }, _a["k-checkbox-".concat(kendoThemeMaps.sizeMap[size])] = size, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded])] = rounded, _a['k-indeterminate'] = this.indeterminateProp, _a['k-disabled'] = disabled, _a['k-invalid k-invalid'] = !(this.isValid || validityStyles !== undefined || validityStyles === true), _a));
    var checkboxInput = function checkboxInput() {
      return h("input", {
        type: 'checkbox',
        attrs: this.v3 ? undefined : {
          type: 'checkbox',
          name: name,
          id: id || this.calculatedId,
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          disabled: disabled,
          tabindex: getTabIndex(tabIndex, disabled),
          role: 'checkbox',
          required: required !== undefined ? required : false,
          "aria-checked": this.computedChecked || this.checkedProp ? true : this.indeterminateProp ? 'mixed' : false,
          "aria-disabled": disabled || undefined
        },
        "class": inputClasses,
        name: name,
        id: id || this.calculatedId,
        ref: setRef(this, 'input'),
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy,
        checked: this.v3 ? Boolean(this.checkedProp) : null,
        domProps: this.v3 ? undefined : {
          "checked": Boolean(this.checkedProp)
        },
        disabled: disabled,
        tabindex: getTabIndex(tabIndex, disabled),
        role: 'checkbox',
        required: required !== undefined ? required : false,
        "aria-checked": this.computedChecked || this.checkedProp ? true : this.indeterminateProp ? 'mixed' : false,
        "aria-disabled": disabled || undefined,
        onChange: this.onChangeHandler,
        on: this.v3 ? undefined : {
          "change": this.onChangeHandler,
          "keydown": this.onKeyDownHandler,
          "focus": this.onFocusHandler,
          "blur": this.onBlurHandler
        },
        onKeydown: this.onKeyDownHandler,
        onFocus: this.onFocusHandler,
        onBlur: this.onBlurHandler
      });
    };
    if (labelRender) {
      var renderTemplate = labelRender ? templateRendering.call(this, labelRender, getListeners.call(this)) : null;
      renderedLabel = getTemplate.call(this, {
        h: h,
        template: renderTemplate
      });
    }
    var checkboxLabel = function checkboxLabel() {
      return renderedLabel !== undefined ? h("label", {
        "class": this.labelComputedClass,
        "for": id || this.calculatedId,
        attrs: this.v3 ? undefined : {
          "for": id || this.calculatedId
        },
        style: {
          userSelect: 'none'
        }
      }, [renderedLabel, labelOptional && h("span", {
        "class": "k-label-optional"
      }, [this.optionalMessage])]) : null;
    };
    return labelPlacement === 'before' ? h("span", {
      "class": checkboxClasses,
      dir: 'rtl',
      attrs: this.v3 ? undefined : {
        dir: 'rtl'
      }
    }, [checkboxInput.call(this), checkboxLabel.call(this), defaultSlot]) : h("span", {
      "class": checkboxClasses,
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir
      }
    }, [checkboxInput.call(this), checkboxLabel.call(this), defaultSlot]);
  },
  methods: {
    setValidity: function setValidity() {
      var isValid = this.$props.valid !== undefined ? this.$props.valid : !this.$props.required ? true : this.computedChecked ? true : false;
      // @ts-ignore
      if (this.input && this.input.setCustomValidity) {
        // @ts-ignore
        this.input.setCustomValidity(isValid ? '' : this.$props.validationMessage || this.defaultValidationMessage);
      }
    },
    localizeMessage: function localizeMessage(message) {
      return this.localizationService.toLanguageString(message, messages[message]);
    },
    focusElement: function focusElement() {
      if (this.input) {
        // @ts-ignore
        this.input.focus();
      }
    },
    setValue: function setValue(e, val) {
      this.$data.valueDuringOnChange = val;
      var that = this;
      this.$nextTick(function () {
        if (!that.isCheckedControlled && !that.isValueControlled && !that.$props.disabled) {
          that.currentValue = val;
          that.currentChecked = val;
        }
        if (!that.$props.disabled) {
          var handle = {
            element: that.$el,
            focus: null // focusElement
          };

          that.$emit('changemodel', val);
          that.$emit('update:modelValue', val);
          that.$emit('change', {
            e: e,
            handle: handle,
            value: val
          });
        }
        this.$data.valueDuringOnChange = undefined;
      });
    },
    onChangeHandler: function onChangeHandler(e) {
      var newValue = e.target.checked;
      this.setValue(e, newValue);
    },
    onKeyDownHandler: function onKeyDownHandler(e) {
      if (this.$props.disabled) {
        return;
      }
      var keyCode = e.keyCode;
      var currentVal = e.currentTarget.checked;
      if (keyCode === Keys.space) {
        e.preventDefault();
        e.stopPropagation();
        this.setValue(e, !currentVal);
      }
    },
    onBlurHandler: function onBlurHandler(e) {
      if (!this.$props.disabled) {
        this.$emit('blur', e);
      }
    },
    onFocusHandler: function onFocusHandler(e) {
      if (!this.$props.disabled) {
        this.$emit('focus', e);
      }
    }
  }
};
/**
 * @hidden
 */
var Checkbox = CheckboxVue2;
export { Checkbox, CheckboxVue2 };