import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
import { FormComponentProps } from '@progress/kendo-vue-common';
declare type DefaultData<V> = object | ((this: V) => TextBoxData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
export interface TextBoxChangeEvent {
    /**
     * A reference to the native event.
     */
    event: any;
    /**
     * The name of the event that is triggred. The value of this prop is `change`.
     */
    eventName: string;
    /**
     * The current value of the TextBox.
     */
    value: string | string[] | number;
}
/**
 * Represents the props of the [Kendo UI for Vue TextBox component]({% slug overview_textbox %}).
 * Extends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextBoxElement).
 */
export interface TextBoxProps extends FormComponentProps {
    /**
     * Renders a floating label for the TextBox component.
     */
    id?: string;
    label?: string;
    value?: string | string[] | number;
    modelValue?: string | number;
    defaultValue?: string | string[] | number | undefined;
    disabled?: boolean;
    validate?: boolean;
    /**
     * Configures the `size` of the TextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `class`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * Configures the `roundness` of the TextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `class`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
    /**
     * Configures the `fillMode` of the TextBox.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `class`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline' | string;
    dir?: string;
    /**
     * Fires when the `change` event of the input is triggered.
     */
    onChange?: (event: TextBoxChangeEvent) => void;
    /**
     * Fires when the `input` event of the input is triggered.
     */
    onTextBox?: (event: any) => void;
    /**
     * Fires when the input is focused.
     */
    onFocus?: (event: any) => void;
    /**
     * Fires when the input is blurred.
     */
    onBlur?: (event: any) => void;
    /**
     * Fires when the 'keyup' input event is triggered.
     */
    onKeyup?: (event: any) => void;
    /**
     * Fires when the 'keydown' input event is triggered.
     */
    onKeydown?: (event: any) => void;
    /**
     * Fires when the 'keypress' input event is triggered.
     */
    onKeypress?: (event: any) => void;
    /**
     * Specifies the placeholder of an `input` element. Used to define if the input is empty.
     */
    placeholder?: string;
    /**
     * Defines a string prop that controls the input icon.
     */
    iconName?: String;
    /**
     * Defines if the inputPrefix will be shown. Accepts a slot name, a `render` function, or a Vue component.
     */
    inputPrefix?: Boolean | String | Object | Function;
    /**
     * Defines if the inputSuffix will be shown. Accepts a slot name, a `render` function, or a Vue component.
     */
    inputSuffix?: Boolean | String | Object | Function;
    /**
     * Defines a boolean prop that controls whether to show the validation icon. Defaults to 'false'.
     */
    showValidationIcon?: Boolean;
    /**
     * Defines a boolean prop that controls whether to show the loading icon. Defaults to 'false'.
     */
    showLoadingIcon?: Boolean;
    /**
     * Defines a boolean prop that controls whether to show the clear icon. Defaults to 'false'.
     */
    showClearButton?: Boolean;
    /**
     * Defines additional class to the wrapper element.
     */
    wrapperClass?: String;
    /**
     * Defines tabindex to the input element.
     */
    tabIndex?: Number;
    /**
     * Defines additional class to the input element.
     */
    inputClass?: String;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaDescribedBy?: string;
    /**
     * Defines a string value that labels an interactive element.
     */
    ariaLabelledBy?: string;
    /**
     * Defines a string value that labels an interactive element.
     */
    ariaLabel?: string;
    /**
     * Defines the built-in [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength) property of the text inputs.
     * * As the property is directly passed to the internal [input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) element, when defining it, it should be written as it is - `minlength`. Camel-case and kebap-case won't work in this scenario.
     */
    minlength?: string;
    /**
     * Defines the built-in [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength) property of the text inputs.
     * * As the property is directly passed to the internal [input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) element, when defining it, it should be written as it is - `maxlength`. Camel-case and kebap-case won't work in this scenario.
     */
    maxlength?: string;
}
/**
 * @hidden
 */
export interface TextBoxData {
    hasMounted?: boolean;
    autofill?: boolean;
    currentValue?: string | string[] | number;
    valueDuringOnChange?: string;
    focused?: boolean;
}
/**
 * @hidden
 */
export interface TextBoxState {
    inputRef: any;
    _input: any;
    wrapper: any;
    _inputId?: string;
    v3: boolean;
}
/**
 * @hidden
 */
export interface TextBoxMethods {
    [key: string]: any;
    emitBlur?: (_: any) => void;
    emitFocus?: (_: any) => void;
    focus?: () => void;
    validity: () => any;
    isInvalid: (state: any) => any;
    setValidity: () => void;
    handleInput?: () => void;
    handleChange: (event: any) => void;
    handleKeyup?: (event: any) => void;
    handleKeydown?: (event: any) => void;
    handleKeypress?: (event: any) => void;
    handleAutoFill?: (e: any) => void;
    handleAutoFillEnd?: (e: any) => void;
    inputWrapperClass: () => any;
}
/**
 * @hidden
 */
export interface TextBoxComputed {
    [key: string]: any;
    computedValue?: any;
    spanClassNames?: any;
}
/**
 * @hidden
 */
export interface TextBoxAllMethods extends Vue2type, TextBoxMethods, TextBoxComputed, TextBoxState {
}
/**
 * @hidden
 */
declare let TextBoxVue2: ComponentOptions<TextBoxAllMethods, DefaultData<TextBoxData>, DefaultMethods<TextBoxAllMethods>, TextBoxComputed, RecordPropsDefinition<TextBoxProps>>;
/**
 * @hidden
 */
declare const TextBox: DefineComponent<TextBoxProps, any, TextBoxData, TextBoxComputed, TextBoxMethods, {}, {}, {}, string, TextBoxProps, TextBoxProps, {}>;
export { TextBox, TextBoxVue2 };
