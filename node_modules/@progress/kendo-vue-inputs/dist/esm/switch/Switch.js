// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { guid, noop, Keys, getTabIndex, validatePackage, isRtl, kendoThemeMaps, setRef, getRef } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, switchValidation } from '../messages/main.js';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var SwitchVue2 = {
  name: 'KendoSwitch',
  model: {
    event: 'changemodel'
  },
  // @ts-ignore
  emits: {
    'change': null,
    'changemodel': null,
    'update:modelValue': null,
    'focus': null,
    'blur': null
  },
  props: {
    name: String,
    accessKey: String,
    checked: {
      type: Boolean,
      default: undefined
    },
    className: String,
    disabled: {
      type: Boolean,
      default: false
    },
    defaultChecked: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    trackRounded: {
      type: String,
      default: 'full',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large', 'full'].includes(value);
      }
    },
    thumbRounded: {
      type: String,
      default: 'full',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large', 'full'].includes(value);
      }
    },
    dir: String,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    offLabel: {
      type: String,
      default: 'OFF'
    },
    onLabel: {
      type: String,
      default: 'ON'
    },
    required: {
      type: Boolean,
      default: false
    },
    tabIndex: Number,
    valid: Boolean,
    validityStyles: {
      type: Boolean,
      default: false
    },
    validationMessage: String,
    value: {
      type: [String, Number, Boolean],
      default: undefined
    },
    modelValue: {
      type: Boolean,
      default: undefined
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this._id = guid();
    this.defaultValidationMessage = provideLocalizationService(this);
  },
  data: function data() {
    return {
      currentChecked: this.$props.defaultChecked,
      valueDuringOnChange: undefined,
      focused: false,
      currentDir: undefined
    };
  },
  computed: {
    computedValue: function computedValue() {
      return this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.$props.checked !== undefined ? this.$props.checked : this.$props.value !== undefined ? this.$props.value : this.$props.modelValue !== undefined ? this.$props.modelValue : this.currentChecked;
    },
    switchClassName: function switchClassName() {
      var _a;
      var isValid = !this.validityStyles || this.validity().valid;
      var rounded = this.$props.trackRounded;
      return _a = {
        'k-switch': true
      }, _a["k-switch-".concat(kendoThemeMaps.sizeMap[this.$props.size])] = this.$props.size, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-switch-on'] = this.computedValue, _a['k-switch-off'] = !this.computedValue, _a['k-focus'] = this.focused, _a['k-disabled'] = this.$props.disabled, _a['k-invalid'] = !isValid, _a;
    },
    switchTrackClass: function switchTrackClass() {
      var _a;
      var rounded = this.$props.trackRounded;
      return _a = {
        'k-switch-track': true
      }, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a;
    },
    switchThumbClass: function switchThumbClass() {
      var _a;
      var rounded = this.$props.thumbRounded;
      return _a = {
        'k-switch-thumb': true
      }, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a;
    }
  },
  mounted: function mounted() {
    this._element = getRef(this, 'element');
    this.input = getRef(this, 'input');
    this.currentDir = this.$props.dir !== undefined ? this.$props.dir : isRtl(this.$el) ? 'rtl' : 'ltr';
    this.setValidity();
  },
  updated: function updated() {
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      disabled = _a.disabled,
      id = _a.id,
      offLabel = _a.offLabel,
      onLabel = _a.onLabel,
      tabIndex = _a.tabIndex,
      required = _a.required;
    return h("span", {
      "class": this.switchClassName,
      role: 'switch',
      attrs: this.v3 ? undefined : {
        role: 'switch',
        "aria-checked": this.computedValue,
        "aria-disabled": disabled || undefined,
        dir: this.currentDir
      },
      "aria-checked": this.computedValue,
      "aria-disabled": disabled || undefined,
      dir: this.currentDir,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown,
        "click": this.handleClick,
        "focusout": this.handleWrapperBlur,
        "focusin": this.handleWrapperFocus
      },
      onClick: this.handleClick,
      onFocusout: this.handleWrapperBlur,
      onFocusin: this.handleWrapperFocus
    }, [h("span", {
      "class": this.switchTrackClass,
      id: id || this._id,
      attrs: this.v3 ? undefined : {
        id: id || this._id,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        tabindex: getTabIndex(tabIndex, disabled, undefined),
        accesskey: this.$props.accessKey
      },
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      ref: setRef(this, 'element'),
      tabindex: getTabIndex(tabIndex, disabled, undefined),
      accesskey: this.$props.accessKey
    }, [h("input", {
      type: "checkbox",
      attrs: this.v3 ? undefined : {
        type: "checkbox",
        tabindex: -1,
        name: this.$props.name,
        required: required !== undefined ? required : false,
        "aria-hidden": true
      },
      checked: this.v3 ? this.$props.checked : null,
      domProps: this.v3 ? undefined : {
        "checked": this.$props.checked,
        "value": this.computedValue
      },
      ref: setRef(this, 'input'),
      tabindex: -1,
      name: this.$props.name,
      required: required !== undefined ? required : false,
      "aria-hidden": true,
      value: this.v3 ? this.computedValue : null,
      style: {
        opacity: 0,
        width: 1,
        border: 0,
        zIndex: -1,
        position: 'absolute',
        left: '50%'
      },
      onChange: noop,
      on: this.v3 ? undefined : {
        "change": noop
      }
    }), h("span", {
      "class": 'k-switch-label-on'
    }, [onLabel]), h("span", {
      "class": 'k-switch-label-off'
    }, [offLabel])]), h("span", {
      "class": 'k-switch-thumb-wrap'
    }, [h("span", {
      "class": this.switchThumbClass
    })])]);
  },
  methods: {
    focus: function focus() {
      if (this._element) {
        this._element.focus();
      }
    },
    element: function element() {
      return this._element;
    },
    validity: function validity() {
      var customError = this.$props.validationMessage !== undefined;
      var isValid = this.$props.valid !== undefined ? this.$props.valid : !this.$props.required ? true : this.computedValue ? true : false;
      var valid = this.$props.valid !== undefined ? this.$props.valid : isValid;
      return {
        customError: customError,
        valid: valid,
        valueMissing: this.computedValue === null
      };
    },
    setValidity: function setValidity() {
      if (this.input && this.input.setCustomValidity) {
        this.input.setCustomValidity(this.validity().valid ? '' : this.$props.validationMessage || this.defaultValidationMessage.toLanguageString(switchValidation, messages[switchValidation]));
      }
    },
    limit: function limit(offset, drag, wrapper) {
      var wrapperWidth = wrapper.offsetWidth;
      var margin = drag.offsetWidth;
      if (offset < 0) {
        return 0;
      } else if (offset > wrapperWidth - margin) {
        return wrapperWidth - margin;
      }
      return offset;
    },
    toggle: function toggle(value, event) {
      this.currentChecked = value;
      this.valueDuringOnChange = value;
      this.$emit('changemodel', value);
      this.$emit('update:modelValue', value);
      this.$emit('change', {
        event: event,
        component: this,
        target: {
          value: value
        },
        name: this.$props.name,
        value: value,
        validity: this.validity()
      });
      this.valueDuringOnChange = undefined;
    },
    handleClick: function handleClick(event) {
      if (this.eventTimeStamp === event.timeStamp) {
        // This is guard against the case when wrapped in label, click event is emmited twice
        return;
      }
      this.eventTimeStamp = event.timeStamp;
      this.toggle(!this.computedValue, event);
    },
    handleKeyDown: function handleKeyDown(event) {
      if (this.$props.disabled) {
        return;
      }
      var keyCode = event.keyCode;
      if (keyCode === Keys.space || keyCode === Keys.enter) {
        this.toggle(!this.computedValue, event);
      }
    },
    handleWrapperFocus: function handleWrapperFocus(event) {
      if (this.$props.disabled) {
        return;
      }
      this.focused = true;
      this.$emit('focus', event);
    },
    handleWrapperBlur: function handleWrapperBlur(event) {
      if (this.$props.disabled) {
        return;
      }
      this.focused = false;
      this.$emit('blur', event);
    }
  }
};
/**
 * Represents the [Kendo UI for Vue Native Switch component]({% slug overview_switch %}).
 * Accepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).
 */
var Switch = SwitchVue2;
export { Switch, SwitchVue2 };