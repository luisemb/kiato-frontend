import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FormComponentProps } from '@progress/kendo-vue-common';
import { ToggleBaseProps } from '../interfaces/ToggleBaseProps';
import { LocalizationService } from '@progress/kendo-vue-intl';
/**
 * The arguments for the `onChange` Switch event.
 */
export interface SwitchChangeEvent {
    /**
     * The new value of the Switch.
     */
    value: boolean;
}
/**
 * Represents the props of the [Kendo UI for Vue Switch component]({% slug overview_switch %}).
 */
export interface SwitchProps extends ToggleBaseProps, FormComponentProps {
    /**
     * Specifies the `name` of the Switch.
     */
    name?: string;
    /**
     * Specifies the `accessKey` of the Switch.
     */
    accessKey?: string;
    /**
     * Sets the current value of the Switch ([see example]({% slug controlled_switch %})).
     */
    checked?: boolean;
    /**
     * Sets the `className` of the wrapping element of the Switch.
     */
    className?: string;
    /**
     * Sets the value of the Switch when it is initially displayed ([see example]({% slug default_state %})).
     */
    defaultChecked?: boolean;
    /**
     * Sets the default value of the Switch.
     */
    defaultValue?: any;
    /**
     * Disables the Switch when set to `true` ([see example]({% slug disabled_switch %})).
     */
    disabled?: boolean;
    /**
     * Sets the `dir` property of the wrapping element of the Switch.
     */
    dir?: string;
    /**
     * Sets the `id` of the Switch.
     */
    id?: string;
    /**
     * Configures the `size` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * Configures the `trackRounded` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - circle
     * - null&mdash;Does not set a trackRounded `className`.
     *
     * @default `full`
     */
    trackRounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
    /**
     * Configures the `thumbRounded` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - circle
     * - null&mdash;Does not set a thumbRounded `className`.
     *
     * @default `circle`
     */
    thumbRounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Changes the **Off** label([see example]({% slug labels_switch %})).
     */
    offLabel?: string;
    /**
     * Fires each time the Switch gets blurred.
     */
    onBlur?: (event: any) => void;
    /**
     * Fires each time the user selects a new value ([see example]({% slug controlled_switch %})).
     */
    onChange?: (event: SwitchChangeEvent) => void;
    /**
     * Fires each time the Switch component gets focused.
     */
    onFocus?: (event: any) => void;
    /**
     * Changes the **On** label ([see example]({% slug labels_switch %})).
     */
    onLabel?: string;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex?: number;
    /**
     * Sets the value of the Switch. It can either be of the primitive (string, number, boolean) or of the complex (array) type.
     */
    value?: string | number | string[] | boolean | null;
    modelValue?: string | number | string[] | boolean | null;
}
/**
 * @hidden
 */
export interface SwitchState {
    _element: HTMLSpanElement | null;
    _input: HTMLInputElement | null;
    _id: string;
    dir?: string;
    defaultValidationMessage: LocalizationService;
    eventTimeStamp?: number;
}
/**
 * @hidden
 */
export interface SwitchComputed {
}
/**
 * @hidden
 */
export interface SwitchMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface SwitchData {
    valueDuringOnChange?: boolean;
    currentChecked: boolean;
    focused: boolean;
}
/**
 * @hidden
 */
export interface SwitchAll extends Vue2type, SwitchMethods, SwitchData, SwitchComputed, SwitchState {
}
/**
 * @hidden
 */
declare let SwitchVue2: ComponentOptions<SwitchAll, DefaultData<SwitchData>, DefaultMethods<SwitchAll>, SwitchComputed, RecordPropsDefinition<SwitchProps>>;
/**
 * Represents the [Kendo UI for Vue Native Switch component]({% slug overview_switch %}).
 * Accepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).
 */
declare const Switch: DefineComponent<SwitchProps, any, SwitchData, SwitchComputed, SwitchMethods, {}, {}, {}, string, SwitchProps, SwitchProps, {}>;
export { Switch, SwitchVue2 };
