import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { ColorPickerProps } from './interfaces/ColorPickerProps';
/**
 * @hidden
 */
export interface ColorPickerHandle {
    element: HTMLSpanElement | null;
}
/**
 * @hidden
 */
export interface ColorPickerState {
    _popupId: string;
    focusableElementGuid: string;
    palette: any | null;
    blurTimeout: any | undefined;
    button: HTMLSpanElement | null;
}
/**
 * @hidden
 */
export interface ColorPickerComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ColorPickerMethods {
    [key: string]: any;
    focus: (e: any) => void;
    toggleIfApplicable: () => void;
    handleClick: (event: any) => void;
}
/**
 * @hidden
 */
export interface ColorPickerData {
    currentActive: boolean;
}
/**
 * @hidden
 */
export interface ColorPickerAll extends Vue2type, ColorPickerMethods, ColorPickerData, ColorPickerComputed, ColorPickerState {
}
/**
 * @hidden
 */
declare let ColorPickerVue2: ComponentOptions<ColorPickerAll, DefaultData<ColorPickerData>, DefaultMethods<ColorPickerAll>, ColorPickerComputed, RecordPropsDefinition<ColorPickerProps>>;
/**
 * @hidden
 */
declare const ColorPicker: DefineComponent<ColorPickerProps, any, ColorPickerData, ColorPickerComputed, ColorPickerMethods, {}, {}, {}, string, ColorPickerProps, ColorPickerProps, {}>;
export { ColorPicker, ColorPickerVue2 };
