import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { PickerProps } from './interfaces/PickerProps';
/**
 * @hidden
 */
export interface PickerState {
}
/**
 * @hidden
 */
export interface PickerComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface PickerMethods {
    [key: string]: any;
    focus: (e: any) => void;
    toggleIfApplicable: () => void;
    handleClick: (event: any) => void;
}
/**
 * @hidden
 */
export interface PickerData {
    currentActive: boolean;
}
/**
 * @hidden
 */
export interface PickerAll extends Vue2type, PickerMethods, PickerData, PickerComputed, PickerState {
}
/**
 * @hidden
 */
declare let PickerVue2: ComponentOptions<PickerAll, DefaultData<PickerData>, DefaultMethods<PickerAll>, PickerComputed, RecordPropsDefinition<PickerProps>>;
/**
 * @hidden
 */
declare const Picker: DefineComponent<PickerProps, any, PickerData, PickerComputed, PickerMethods, {}, {}, {}, string, PickerProps, PickerProps, {}>;
export { Picker, PickerVue2 };
