// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { RadioButton } from './RadioButton.js';
import { guid, classNames, focusFirstFocusableChild, validatePackage, isRtl, templateRendering, getListeners } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata.js';
/**
 * @hidden
 */
var RadioGroupVue2 = {
  name: 'KendoRadioGroup',
  props: {
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    dataItems: Array,
    defaultValue: [String, Number, Object],
    dir: String,
    disabled: Boolean,
    labelPlacement: String,
    item: {
      type: String,
      default: undefined
    },
    layout: {
      type: String,
      default: 'vertical',
      validator: function validator(value) {
        return ['horizontal', 'vertical'].includes(value);
      }
    },
    name: String,
    modelValue: [String, Number, Object],
    value: [String, Number, Object],
    valid: {
      type: Boolean,
      default: undefined
    }
  },
  // @ts-ignore
  emits: {
    'changemodel': null,
    'update:modelValue': null,
    change: null,
    focus: null,
    blur: null
  },
  model: {
    event: 'changemodel'
  },
  created: function created() {
    this.radioGroupName = guid();
    validatePackage(packageMetadata);
    this.stateChecked = this.$props.defaultValue;
  },
  watch: {
    value: function value(newValue) {
      if (newValue === undefined) {
        this.stateChecked = this.$props.defaultValue;
      }
    }
  },
  mounted: function mounted() {
    this.rtl = isRtl(this.$el);
  },
  computed: {
    radioGroupClasses: function radioGroupClasses() {
      var layout = this.$props.layout;
      return {
        'k-radio-list': true,
        'k-list-horizontal': layout === 'horizontal',
        'k-list-vertical': layout === 'vertical' || layout === undefined
      };
    },
    checkedRadioValue: function checkedRadioValue() {
      var value = this.$props.value;
      return value !== undefined ? value : this.$props.modelValue !== undefined ? this.$props.modelValue : this.stateChecked;
    },
    currentDir: function currentDir() {
      var dir = this.$props.dir;
      return dir ? dir : this.rtl ? 'rtl' : undefined;
    }
  },
  data: function data() {
    return {
      rtl: false,
      stateChecked: undefined
    };
  },
  methods: {
    focusElement: function focusElement() {
      if (this.$el) {
        focusFirstFocusableChild(this.$el);
      }
    },
    handleChange: function handleChange(event) {
      var currentValue = event.value;
      if (!(this.$props.value !== undefined) && !this.$props.disabled) {
        this.stateChecked = currentValue;
      }
      if (!this.$props.disabled) {
        this.$emit('changemodel', currentValue);
        this.$emit('update:modelValue', currentValue);
        this.$emit('change', {
          event: event,
          value: currentValue
        });
      }
    },
    handleFocus: function handleFocus(event) {
      if (!this.$props.disabled) {
        this.$emit('focus', event);
      }
    },
    handleBlur: function handleBlur(event) {
      if (!this.$props.disabled) {
        this.$emit('blur', event);
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    return {
      v3: v3,
      inputRef: inputRef
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      ariaLabelledBy = _a.ariaLabelledBy,
      ariaDescribedBy = _a.ariaDescribedBy,
      dataItems = _a.dataItems,
      disabled = _a.disabled,
      name = _a.name,
      labelPlacement = _a.labelPlacement,
      valid = _a.valid;
    var radioOptions = dataItems && dataItems.map(function (option, index) {
      var isCurrentlyChecked = this.checkedRadioValue === option.value;
      var noOptionChecked = this.checkedRadioValue === null || this.checkedRadioValue === undefined;
      var item = templateRendering.call(this, this.$props.item || option.item, getListeners.call(this));
      return (
        // @ts-ignore function children
        h(RadioButton, {
          "class": classNames('k-radio-item', {
            'k-disabled': option.disabled || disabled
          }),
          style: option.style,
          key: index,
          item: item,
          attrs: this.v3 ? undefined : {
            item: item,
            role: 'radio',
            tag: 'li',
            valid: valid,
            className: option.className,
            label: option.label,
            value: option.value,
            dataItem: option,
            checked: isCurrentlyChecked,
            disabled: option.disabled || disabled ? true : false,
            labelPlacement: option.labelPlacement ? option.labelPlacement : labelPlacement,
            tabIndex: option.tabIndex ? option.tabIndex : noOptionChecked && index === 0 || isCurrentlyChecked ? 0 : -1,
            index: index,
            name: name || option.name || this.radioGroupName
          },
          role: 'radio',
          tag: 'li',
          valid: valid,
          className: option.className,
          label: option.label,
          value: option.value,
          dataItem: option,
          checked: isCurrentlyChecked,
          disabled: option.disabled || disabled ? true : false,
          labelPlacement: option.labelPlacement ? option.labelPlacement : labelPlacement,
          tabIndex: option.tabIndex ? option.tabIndex : noOptionChecked && index === 0 || isCurrentlyChecked ? 0 : -1,
          index: index,
          name: name || option.name || this.radioGroupName,
          onChange: this.handleChange,
          on: this.v3 ? undefined : {
            "change": this.handleChange,
            "focus": this.handleFocus,
            "blur": this.handleBlur
          },
          onFocus: this.handleFocus,
          onBlur: this.handleBlur
        }, this.v3 ? function () {
          return [option.content];
        } : [option.content])
      );
    }, this);
    return h("ul", {
      role: "radiogroup",
      attrs: this.v3 ? undefined : {
        role: "radiogroup",
        dir: this.currentDir,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy
      },
      "class": this.radioGroupClasses,
      dir: this.currentDir,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy
    }, [radioOptions]);
  }
};
/**
 * @hidden
 */
var RadioGroup = RadioGroupVue2;
export { RadioGroup, RadioGroupVue2 };