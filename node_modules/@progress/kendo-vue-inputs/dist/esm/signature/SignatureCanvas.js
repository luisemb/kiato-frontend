// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { SignaturePad } from '@progress/kendo-inputs-common';
import { getTabIndex } from '@progress/kendo-vue-common';
var setOptions = function setOptions() {
  if (this.instance) {
    this.instance.setOptions(this.getOptions());
  }
};
/**
 * @hidden
 */
var SignatureCanvasVue2 = {
  name: 'KendoSignatureCanvas',
  // @ts-ignore
  emits: {
    change: null,
    draw: null,
    drawend: null
  },
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    strokeWidth: Number,
    popupScale: Number,
    scale: Number,
    name: String,
    value: String,
    tabIndex: Number,
    disabled: Boolean,
    readOnly: Boolean,
    color: String,
    backgroundColor: String,
    elementSize: Function,
    smooth: Boolean
  },
  watch: {
    color: setOptions,
    backgroundColor: setOptions,
    smooth: setOptions,
    strokeWidth: setOptions,
    readOnly: setOptions
  },
  mounted: function mounted() {
    this.canvas = this.$el;
    var pad = new SignaturePad(this.canvas, this.getOptions());
    if (this.value) {
      pad.loadImage(this.value);
    }
    this.instance = pad;
    this.instance.setOptions({
      onChange: this.onValueChange,
      onDraw: this.onDraw,
      onDrawEnd: this.onDrawEnd
    });
  },
  destroyed: !!isV3 ? undefined : function () {
    if (this.instance) {
      this.instance.destroy();
    }
  },
  // @ts-ignore
  unmounted: function unmounted() {
    if (this.instance) {
      this.instance.destroy();
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    return h("div", {
      "class": 'k-signature-canvas',
      tabIndex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
      attrs: this.v3 ? undefined : {
        tabIndex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
        role: "img",
        id: this.$props.id,
        name: this.$props.name,
        "aria-label": this.$props.ariaLabel,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-disabled": this.$props.disabled ? 'true' : undefined
      },
      role: "img",
      id: this.$props.id,
      name: this.$props.name,
      "aria-label": this.$props.ariaLabel,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-disabled": this.$props.disabled ? 'true' : undefined
    });
  },
  methods: {
    onValueChange: function onValueChange() {
      var that = this;
      this.exportImage(this.elementSize()).then(function (nextValue) {
        that.$emit('change', nextValue);
      });
    },
    onDraw: function onDraw() {
      this.$emit('draw');
    },
    onDrawEnd: function onDrawEnd() {
      this.$emit('drawend');
    },
    loadImage: function loadImage(newLocale) {
      this.instance.loadImage(newLocale);
    },
    clear: function clear() {
      this.instance.clear();
    },
    getOptions: function getOptions() {
      return {
        scale: this.popupScale,
        color: this.color,
        backgroundColor: this.backgroundColor,
        strokeWidth: this.$props.strokeWidth,
        smooth: this.$props.smooth,
        readonly: this.$props.readOnly
      };
    },
    exportImage: function exportImage(exportSize) {
      var _a;
      var width = exportSize.width,
        height = exportSize.height;
      return (_a = this.instance) === null || _a === void 0 ? void 0 : _a.exportImage({
        width: width * this.scale,
        height: height * this.scale
      });
    }
  }
};
var SignatureCanvas = SignatureCanvasVue2;
export { SignatureCanvas, SignatureCanvasVue2 };