// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var inject = allVue.inject;
import { Button } from '@progress/kendo-vue-buttons';
import { Keys, classNames, Draggable, validatePackage, getDefaultSlots } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, sliderIncreaseValue, sliderDecreaseValue, sliderDragTitle } from '../messages/main.js';
import { SLIDER_LABEL_ATTRIBUTE } from './SliderLabel.js';
import { packageMetadata } from '../package-metadata.js';
import { caretAltDownIcon, caretAltLeftIcon, caretAltRightIcon, caretAltUpIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var SliderVue2 = {
  name: 'KendoSlider',
  model: {
    event: 'changemodel'
  },
  // @ts-ignore
  emits: {
    'changemodel': null,
    'update:modelValue': null,
    'change': null,
    'blur': null,
    'focus': null
  },
  props: {
    modelValue: {
      type: Number,
      default: undefined
    },
    defaultValue: {
      type: Number,
      default: undefined
    },
    name: String,
    buttons: Boolean,
    tabIndex: Number,
    disabled: Boolean,
    dir: String,
    step: Number,
    min: {
      type: Number,
      required: true
    },
    max: {
      type: Number,
      required: true
    },
    value: Number,
    vertical: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  provide: function provide() {
    return {
      kendoMin: this.$props.min,
      kendoMax: this.$props.max,
      kendoVertical: this.$props.vertical
    };
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentValue: undefined,
      currentFocused: false,
      currentDir: 'ltr'
    };
  },
  computed: {
    computedValue: function computedValue() {
      var value = this.$props.value !== undefined ? this.$props.value : this.currentValue;
      var _a = this.$props,
        min = _a.min,
        max = _a.max;
      return value === undefined ? value : Math.min(Math.max(value, min), max);
    },
    sliderTrack: function sliderTrack() {
      return this._sliderTrack;
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    if (this.$props.value !== undefined) {
      this.$data.currentValue = this.$props.value;
    } else if (this.$props.modelValue !== undefined) {
      this.$data.currentValue = this.$props.modelValue;
    } else if (this.$props.defaultValue !== undefined) {
      this.$data.currentValue = this.$props.defaultValue;
    } else {
      this.$data.currentValue = this.$props.min;
    }
    this.currentFocused = false;
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted() {
    this._sliderTrack = this.$refs.sliderTrack;
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
    if (!this.currentDir && window && this.$el) {
      // Note: getComputedStyle forces reflow
      var direction = window.getComputedStyle(this.$el).direction;
      if (direction) {
        this.currentDir = direction;
      }
    }
  },
  updated: function updated() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      inputRef: inputRef,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var _this = this;
    var _a;
    var h = gh || createElement;
    var lS = provideLocalizationService(this);
    var percentValue = (this.computedValue - this.$props.min) / (this.$props.max - this.$props.min) * 100;
    var defaultSlot = getDefaultSlots(this);
    var vertical = this.$props.vertical;
    var increaseSvgArrow = this.currentDir === 'rtl' ? vertical ? caretAltUpIcon : caretAltLeftIcon : vertical ? caretAltUpIcon : caretAltRightIcon;
    var decreaseSvgArrow = this.currentDir === 'rtl' ? vertical ? caretAltDownIcon : caretAltRightIcon : vertical ? caretAltDownIcon : caretAltLeftIcon;
    var increaseFontArrow = this.currentDir === 'rtl' ? vertical ? 'caret-alt-up' : 'caret-alt-left' : vertical ? 'caret-alt-up' : 'caret-alt-right';
    var decreaseFontArrow = this.currentDir === 'rtl' ? vertical ? 'caret-alt-down' : 'caret-alt-right' : vertical ? 'caret-alt-down' : 'caret-alt-left';
    return h("div", {
      dir: this.currentDir,
      attrs: this.v3 ? undefined : {
        dir: this.currentDir,
        id: this.$props.id
      },
      id: this.$props.id,
      style: this.$props.style,
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "keydown": this.onKeyDown
      },
      onBlur: this.onBlur,
      onKeydown: this.onKeyDown,
      "class": classNames('k-slider', {
        'k-focus': this.currentFocused,
        'k-disabled': this.$props.disabled,
        'k-slider-horizontal': !this.$props.vertical,
        'k-slider-vertical': this.$props.vertical
      }, this.$props.className)
    }, [h("div", {
      "class": classNames('k-slider-wrap')
    }, [this.$props.buttons &&
    // @ts-ignore
    h(Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        tabindex: -1,
        icon: decreaseFontArrow,
        svgIcon: decreaseSvgArrow,
        rounded: 'full',
        title: lS.toLanguageString(sliderDecreaseValue, messages[sliderDecreaseValue])
      },
      tabindex: -1,
      icon: decreaseFontArrow,
      svgIcon: decreaseSvgArrow,
      style: {
        position: 'relative'
      },
      rounded: 'full',
      "class": "k-button-decrease",
      title: lS.toLanguageString(sliderDecreaseValue, messages[sliderDecreaseValue]),
      onClick: this.decrement,
      on: this.v3 ? undefined : {
        "click": this.decrement
      }
    }),
    // @ts-ignore  function children
    h(Draggable, {
      onDrag: this.dragOver,
      on: this.v3 ? undefined : {
        "drag": this.dragOver,
        "press": this.dragStart
      },
      onPress: this.dragStart,
      ref: 'draggable'
    }, this.v3 ? function () {
      return [h("div", {
        "class": "k-slider-track-wrap",
        style: {
          touchAction: 'none'
        }
      }, [defaultSlot && h("ul", {
        "class": "k-reset k-slider-items"
      }, [defaultSlot]), h("div", {
        "class": "k-slider-track",
        ref: 'sliderTrack'
      }, [h("div", {
        "class": "k-slider-selection",
        style: _this.$props.vertical ? {
          height: percentValue + '%'
        } : {
          width: percentValue + '%'
        }
      }), h("a", {
        "class": "k-draghandle",
        role: "slider",
        attrs: _this.v3 ? undefined : {
          role: "slider",
          tabIndex: "0",
          "aria-valuenow": _this.computedValue,
          "aria-valuemin": _this.$props.min,
          "aria-valuemax": _this.$props.max,
          "aria-valuetext": _this.computedValue.toString(),
          "aria-disabled": _this.$props.disabled ? 'true' : undefined,
          title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
        },
        tabIndex: "0",
        "aria-valuenow": _this.computedValue,
        "aria-valuemin": _this.$props.min,
        "aria-valuemax": _this.$props.max,
        "aria-valuetext": _this.computedValue.toString(),
        "aria-disabled": _this.$props.disabled ? 'true' : undefined,
        title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
        style: _this.$props.vertical ? {
          bottom: percentValue + '%',
          zIndex: 1
        } : (_a = {}, _a[_this.currentDir === 'rtl' ? 'right' : 'left'] = percentValue + '%', _a.zIndex = 1, _a)
      })])])];
    } : [h("div", {
      "class": "k-slider-track-wrap",
      style: {
        touchAction: 'none'
      }
    }, [defaultSlot && h("ul", {
      "class": "k-reset k-slider-items"
    }, [defaultSlot]), h("div", {
      "class": "k-slider-track",
      ref: 'sliderTrack'
    }, [h("div", {
      "class": "k-slider-selection",
      style: _this.$props.vertical ? {
        height: percentValue + '%'
      } : {
        width: percentValue + '%'
      }
    }), h("a", {
      "class": "k-draghandle",
      role: "slider",
      attrs: _this.v3 ? undefined : {
        role: "slider",
        tabIndex: "0",
        "aria-valuenow": _this.computedValue,
        "aria-valuemin": _this.$props.min,
        "aria-valuemax": _this.$props.max,
        "aria-valuetext": _this.computedValue.toString(),
        "aria-disabled": _this.$props.disabled ? 'true' : undefined,
        title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
      },
      tabIndex: "0",
      "aria-valuenow": _this.computedValue,
      "aria-valuemin": _this.$props.min,
      "aria-valuemax": _this.$props.max,
      "aria-valuetext": _this.computedValue.toString(),
      "aria-disabled": _this.$props.disabled ? 'true' : undefined,
      title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
      style: _this.$props.vertical ? {
        bottom: percentValue + '%',
        zIndex: 1
      } : (_a = {}, _a[_this.currentDir === 'rtl' ? 'right' : 'left'] = percentValue + '%', _a.zIndex = 1, _a)
    })])])]), this.$props.buttons &&
    // @ts-ignore
    h(Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        tabindex: -1,
        icon: increaseFontArrow,
        svgIcon: increaseSvgArrow,
        rounded: 'full',
        title: lS.toLanguageString(sliderIncreaseValue, messages[sliderIncreaseValue])
      },
      tabindex: -1,
      icon: increaseFontArrow,
      svgIcon: increaseSvgArrow,
      rounded: 'full',
      style: {
        position: 'relative'
      },
      "class": "k-button-increase",
      title: lS.toLanguageString(sliderIncreaseValue, messages[sliderIncreaseValue]),
      onClick: this.increment,
      on: this.v3 ? undefined : {
        "click": this.increment
      }
    })])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        // @ts-ignore
        this.$el.focus();
      }
    },
    isLabel: function isLabel(target) {
      var currentTarget = target;
      while (currentTarget) {
        if (Boolean(currentTarget.getAttribute(SLIDER_LABEL_ATTRIBUTE))) {
          return true;
        }
        currentTarget = currentTarget.parentElement;
      }
      return false;
    },
    onFocus: function onFocus(event) {
      this.currentFocused = true;
      this.$emit('focus', event);
    },
    onBlur: function onBlur(event) {
      this.currentFocused = false;
      this.$emit('blur', event);
    },
    onKeyDown: function onKeyDown(e) {
      var newValue = undefined;
      if (e.keyCode === Keys.left || e.keyCode === Keys.down) {
        newValue = this.currentValue - (this.$props.step || 0);
      } else if (e.keyCode === Keys.right || e.keyCode === Keys.up) {
        newValue = this.currentValue + (this.$props.step || 0);
      } else if (e.keyCode === Keys.home) {
        newValue = this.$props.min;
      } else if (e.keyCode === Keys.end) {
        newValue = this.$props.max;
      }
      if (newValue !== undefined) {
        e.preventDefault();
        this.change(e, newValue);
      }
    },
    decrement: function decrement(e) {
      e.preventDefault();
      this.change(e, this.currentValue - (this.$props.step || 0));
    },
    increment: function increment(e) {
      e.preventDefault();
      this.change(e, this.currentValue + (this.$props.step || 0));
    },
    dragStart: function dragStart(e) {
      if (!this.isLabel(e.originalEvent.target)) {
        if (e.isTouch) {
          e.originalEvent.preventDefault();
        }
        this.drag(e);
      }
    },
    dragOver: function dragOver(e) {
      e.originalEvent.preventDefault();
      this.drag(e);
    },
    drag: function drag(e) {
      var computed = this.draggable.element.getBoundingClientRect();
      var distance = this.$props.vertical ? computed.bottom - e.clientY : this.currentDir === 'rtl' ? computed.right - e.clientX : e.clientX - computed.left;
      var size = this.$props.vertical ? computed.height : computed.width;
      var percentage = distance / size;
      this.change(e, this.$props.min + percentage * (this.$props.max - this.$props.min));
    },
    change: function change(e, value) {
      value = Math.min(Math.max(value, this.$props.min), this.$props.max);
      this.currentValue = value;
      this.$emit('changemodel', value);
      this.$emit('update:modelValue', value);
      this.$emit('change', {
        event: e,
        value: value,
        component: this,
        target: {
          name: this.$props.name,
          value: value
        }
      });
    }
  }
};
/**
 * @hidden
 */
var Slider = SliderVue2;
export { Slider, SliderVue2 };