import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FilterOperator } from '../../interfaces/FilterOperator';
import { FilterDescriptor } from '@progress/kendo-data-query';
/**
 * The props of the TextFilter component.
 */
export interface TextFilterProps {
    /**
     * The FilterDescriptor object which will be edited.
     */
    filter: FilterDescriptor;
    /**
     * The FilterChange event, triggered while editing the FilterOperator.
     */
    onFilterchange?: (event: {
        nextFilter: FilterOperator;
    }) => void;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
}
/**
 * @hidden
 */
export interface TextFilterState {
}
/**
 * @hidden
 */
export interface TextFilterComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface TextFilterMethods {
    [key: string]: any;
    onChange: (event: any) => void;
}
/**
 * @hidden
 */
export interface TextFilterData {
    currentData: object[];
}
/**
 * @hidden
 */
export interface TextFilterAll extends Vue2type, TextFilterMethods, TextFilterData, TextFilterComputed, TextFilterState {
}
/**
 * @hidden
 */
declare let TextFilterVue2: ComponentOptions<TextFilterAll, DefaultData<TextFilterData>, DefaultMethods<TextFilterAll>, TextFilterComputed, RecordPropsDefinition<TextFilterProps>>;
/**
 * @hidden
 */
declare const TextFilter: DefineComponent<TextFilterProps, any, TextFilterData, TextFilterComputed, TextFilterMethods, {}, {}, {}, string, TextFilterProps, TextFilterProps, {}>;
export { TextFilter, TextFilterVue2 };
