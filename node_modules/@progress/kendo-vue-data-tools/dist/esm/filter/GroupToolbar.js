var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArray = this && this.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Button, Toolbar, ButtonGroup } from '@progress/kendo-vue-buttons';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { stringOperator } from './operators.js';
import { messages, filterAndLogic, filterOrLogic, filterAddExpression, filterAddGroup, filterClose } from '../messages/main.js';
import { filterAddExpressionIcon, filterAddGroupIcon, xIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var GroupToolbarVue2 = {
  name: 'KendoFilterGroup',
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    },
    defaultGroupFilter: {
      type: Object,
      required: true
    },
    ariaLabel: {
      type: String,
      default: undefined
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var filter = this.$props.filter;
    var locService = provideLocalizationService(this);
    return h("div", {
      "class": "k-filter-toolbar"
    }, [
    // @ts-ignore function children   
    h(Toolbar, {
      keyboardNavigation: false,
      attrs: this.v3 ? undefined : {
        keyboardNavigation: false,
        role: "toolbar",
        "aria-label": this.$props.ariaLabel
      },
      role: "toolbar",
      "aria-label": this.$props.ariaLabel
    }, this.v3 ? function () {
      return [
      // @ts-ignore function children 
      h(ButtonGroup, {
        "class": "k-toolbar-button-group"
      }, _this.v3 ? function () {
        return [
        // @ts-ignore function children 
        h(Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'and',
            type: "button"
          },
          onClick: _this.onLogicAnd,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicAnd
          },
          "class": "k-toolbar-button",
          selected: filter.logic === 'and',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
        } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]),
        // @ts-ignore function children 
        h(Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'or',
            type: "button"
          },
          onClick: _this.onLogicOr,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicOr
          },
          "class": "k-toolbar-button",
          selected: filter.logic === 'or',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
        } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])];
      } : [h(Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'and',
          type: "button"
        },
        onClick: _this.onLogicAnd,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicAnd
        },
        "class": "k-toolbar-button",
        selected: filter.logic === 'and',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
      } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]), h(Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'or',
          type: "button"
        },
        onClick: _this.onLogicOr,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicOr
        },
        "class": "k-toolbar-button",
        selected: filter.logic === 'or',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
      } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])]),
      // @ts-ignore function children 
      h(Button, {
        title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
          icon: "filter-add-expression",
          svgIcon: filterAddExpressionIcon,
          type: "button"
        },
        icon: "filter-add-expression",
        svgIcon: filterAddExpressionIcon,
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onAddExpression,
        on: _this.v3 ? undefined : {
          "click": _this.onAddExpression
        }
      }),
      // @ts-ignore function children 
      h(Button, {
        title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
          icon: "filter-add-group",
          svgIcon: filterAddGroupIcon,
          type: "button"
        },
        icon: "filter-add-group",
        svgIcon: filterAddGroupIcon,
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onAddGroup,
        on: _this.v3 ? undefined : {
          "click": _this.onAddGroup
        }
      }),
      // @ts-ignore function children 
      h(Button, {
        title: locService.toLanguageString(filterClose, messages[filterClose]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(filterClose, messages[filterClose]),
          icon: "x",
          svgIcon: xIcon,
          fillMode: "flat",
          type: "button"
        },
        icon: "x",
        svgIcon: xIcon,
        fillMode: "flat",
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onGroupRemove,
        on: _this.v3 ? undefined : {
          "click": _this.onGroupRemove
        }
      })];
    } : [h(ButtonGroup, {
      "class": "k-toolbar-button-group"
    }, _this.v3 ? function () {
      return [h(Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'and',
          type: "button"
        },
        onClick: _this.onLogicAnd,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicAnd
        },
        "class": "k-toolbar-button",
        selected: filter.logic === 'and',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
      } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]), h(Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'or',
          type: "button"
        },
        onClick: _this.onLogicOr,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicOr
        },
        "class": "k-toolbar-button",
        selected: filter.logic === 'or',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
      } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])];
    } : [h(Button, {
      togglable: true,
      attrs: _this.v3 ? undefined : {
        togglable: true,
        selected: filter.logic === 'and',
        type: "button"
      },
      onClick: _this.onLogicAnd,
      on: _this.v3 ? undefined : {
        "click": _this.onLogicAnd
      },
      "class": "k-toolbar-button",
      selected: filter.logic === 'and',
      type: "button"
    }, _this.v3 ? function () {
      return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
    } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]), h(Button, {
      togglable: true,
      attrs: _this.v3 ? undefined : {
        togglable: true,
        selected: filter.logic === 'or',
        type: "button"
      },
      onClick: _this.onLogicOr,
      on: _this.v3 ? undefined : {
        "click": _this.onLogicOr
      },
      "class": "k-toolbar-button",
      selected: filter.logic === 'or',
      type: "button"
    }, _this.v3 ? function () {
      return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
    } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])]), h(Button, {
      title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
        icon: "filter-add-expression",
        svgIcon: filterAddExpressionIcon,
        type: "button"
      },
      icon: "filter-add-expression",
      svgIcon: filterAddExpressionIcon,
      type: "button",
      "class": "k-toolbar-button",
      onClick: _this.onAddExpression,
      on: _this.v3 ? undefined : {
        "click": _this.onAddExpression
      }
    }), h(Button, {
      title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
        icon: "filter-add-group",
        svgIcon: filterAddGroupIcon,
        type: "button"
      },
      icon: "filter-add-group",
      svgIcon: filterAddGroupIcon,
      type: "button",
      "class": "k-toolbar-button",
      onClick: _this.onAddGroup,
      on: _this.v3 ? undefined : {
        "click": _this.onAddGroup
      }
    }), h(Button, {
      title: locService.toLanguageString(filterClose, messages[filterClose]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(filterClose, messages[filterClose]),
        icon: "x",
        svgIcon: xIcon,
        fillMode: "flat",
        type: "button"
      },
      icon: "x",
      svgIcon: xIcon,
      fillMode: "flat",
      type: "button",
      "class": "k-toolbar-button",
      onClick: _this.onGroupRemove,
      on: _this.v3 ? undefined : {
        "click": _this.onGroupRemove
      }
    })])]);
  },
  methods: {
    onGroupRemove: function onGroupRemove() {
      this.$emit('remove', {
        filter: this.$props.filter
      });
    },
    onAddExpression: function onAddExpression() {
      var prevFilter = this.$props.filter;
      var firstField = this.$props.fields[0];
      var newExpression = {
        field: firstField.name,
        operator: firstField.operators[0].operator
      };
      newExpression.value = stringOperator(newExpression.operator) ? '' : null;
      this.$emit('change', {
        nextFilter: __assign(__assign({}, prevFilter), {
          filters: __spreadArray(__spreadArray([], prevFilter.filters, true), [newExpression], false)
        }),
        prevFilter: prevFilter
      });
    },
    onAddGroup: function onAddGroup() {
      var prevFilter = this.$props.filter;
      this.$emit('change', {
        nextFilter: __assign(__assign({}, prevFilter), {
          filters: __spreadArray(__spreadArray([], prevFilter.filters, true), [__assign({}, this.$props.defaultGroupFilter)], false)
        }),
        prevFilter: prevFilter
      });
    },
    onLogicAnd: function onLogicAnd() {
      this.changeLogic('and');
    },
    onLogicOr: function onLogicOr() {
      this.changeLogic('or');
    },
    changeLogic: function changeLogic(logic) {
      var prevFilter = this.$props.filter;
      if (prevFilter.logic !== logic) {
        this.$emit('change', {
          nextFilter: __assign(__assign({}, prevFilter), {
            logic: logic
          }),
          prevFilter: prevFilter
        });
      }
    }
  }
};
/**
 * @hidden
 */
var GroupToolbar = GroupToolbarVue2;
export { GroupToolbar, GroupToolbarVue2 };