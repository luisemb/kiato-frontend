// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { getDefaultSlots, noop } from '@progress/kendo-vue-common';
import { KEYBOARD_NAV_DATA_ID, KEYBOARD_NAV_DATA_LEVEL } from '../navigation/constants.js';
/**
 * @hidden
 */
var HeaderThElementVue2 = {
  name: 'KendoHeaderThElement',
  // @ts-ignore
  emits: {
    keydown: null
  },
  props: {
    ariaSort: {
      type: String,
      validator: function validator(value) {
        return ['none', 'ascending', 'descending'].includes(value);
      }
    },
    ariaLabel: String,
    ariaColumnIndex: Number,
    ariaSelected: Boolean,
    colSpan: Number,
    rowSpan: Number,
    role: String,
    columnId: String,
    navigatable: Boolean
  },
  computed: {
    thClass: function thClass() {
      var _a;
      var className = this.$props.className;
      return _a = {
        'k-table-th': true
      }, _a[className] = className, _a;
    }
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      ariaSort = _a.ariaSort,
      colSpan = _a.colSpan,
      rowSpan = _a.rowSpan,
      columnId = _a.columnId,
      navigatable = _a.navigatable,
      ariaColumnIndex = _a.ariaColumnIndex,
      ariaLabel = _a.ariaLabel,
      role = _a.role,
      ariaSelected = _a.ariaSelected;
    var navAttrs = this.getKeyboardNavigationAttributes(columnId, navigatable);
    var defaultSlot = getDefaultSlots(this);
    return h("th", {
      style: {
        top: '0px'
      },
      "aria-sort": ariaSort,
      attrs: this.v3 ? undefined : {
        "aria-sort": ariaSort,
        "aria-label": ariaLabel,
        "aria-colindex": ariaColumnIndex,
        "aria-selected": ariaSelected,
        colspan: colSpan,
        rowspan: rowSpan,
        role: role,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "aria-label": ariaLabel,
      "aria-colindex": ariaColumnIndex,
      "aria-selected": ariaSelected,
      colspan: colSpan,
      rowspan: rowSpan,
      "class": this.thClass,
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown
      },
      role: role,
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [defaultSlot]);
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$emit('keydown', e);
    }
  }
};
/**
 * @hidden
 */
var HeaderThElement = HeaderThElementVue2;
export { HeaderThElement, HeaderThElementVue2 };