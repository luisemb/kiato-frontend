// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { guid, getTemplate, getDefaultSlots } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, selectAllRows } from '../messages/main.js';
/**
 * @hidden
 */
var HeaderSelectionCellVue2 = {
  props: {
    field: String,
    title: String,
    sortable: [Boolean, Object],
    selectionValue: Boolean,
    render: [Object, Function, String]
  },
  // @ts-ignore
  emits: {
    selectionchange: null,
    headercellclick: null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    this.inputId = guid();
  },
  methods: {
    changeHandle: function changeHandle(e) {
      this.$emit('selectionchange', {
        field: this.$props.field,
        event: e
      });
    },
    clickHandler: function clickHandler(event) {
      if (this.$props.sortable) {
        this.$emit('headercellclick', event);
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var renderTemplate = this.$props.render;
    var ls = provideLocalizationService(this);
    var selectAllRowsMessage = ls.toLanguageString(selectAllRows, messages[selectAllRows]);
    var input = h("input", {
      key: 0,
      checked: this.v3 ? this.$props.selectionValue : null,
      domProps: this.v3 ? undefined : {
        "checked": this.$props.selectionValue
      },
      id: this.inputId,
      attrs: this.v3 ? undefined : {
        id: this.inputId,
        type: "checkbox",
        "aria-label": selectAllRowsMessage
      },
      type: "checkbox",
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      "aria-label": selectAllRowsMessage,
      onChange: this.changeHandle,
      on: this.v3 ? undefined : {
        "change": this.changeHandle
      }
    });
    var defaultRendering = getTemplate.call(this, {
      h: h,
      template: renderTemplate,
      defaultRendering: input,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.clickHandler,
        selectionchange: this.changeHandle
      }
    });
    return h("span", {
      "class": "k-link",
      onClick: this.clickHandler,
      on: this.v3 ? undefined : {
        "click": this.clickHandler
      }
    }, [h("span", {
      "class": "k-column-title",
      title: this.$props.title,
      attrs: this.v3 ? undefined : {
        title: this.$props.title
      }
    }, [defaultRendering]), defaultSlot]);
  }
};
/**
 * @hidden
 */
var HeaderSelectionCell = HeaderSelectionCellVue2;
export { HeaderSelectionCell, HeaderSelectionCellVue2 };