// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { Button } from '@progress/kendo-vue-buttons';
import { messages, columnMenuFilterClearButton as filterClearButton, columnMenuFilterChooseOperator as filterChooseOperator, filterTextFilterAriaLabel, filterEnumFilterDropdownAriaLabel, filterDateFilterAriaLabel, filterNumericFilterAriaLabel, filterDropDownOperatorAriaLabel } from '../messages/main';
import { DropDownList } from '@progress/kendo-vue-dropdowns';
import { NumericTextBox, TextBox } from '@progress/kendo-vue-inputs';
import { DatePicker } from '@progress/kendo-vue-dateinputs';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { cellBoolDropdownChange, cellInputChange, cellOperatorChange } from '../filterCommon';
import { templateRendering, getListeners, getTemplate } from '@progress/kendo-vue-common';
import { filterIcon, filterClearIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var FilterCellVue2 = {
  name: 'KendoFilterCell',
  inheritAttrs: false,
  // @ts-ignore
  emits: {
    'change': null
  },
  props: {
    id: String,
    grid: Object,
    field: String,
    filterType: String,
    colSpan: Number,
    title: String,
    value: [String, Number, Boolean, Date],
    operator: [String, Function],
    operators: Array,
    booleanValues: Array,
    onChange: Function,
    render: [String, Function, Object],
    ariaLabel: String,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  methods: {
    inputChange: function inputChange(value, e) {
      var filter = cellInputChange(value, e, this.$props);
      this.triggerChange(filter);
    },
    operatorChange: function operatorChange(operatorValue, e) {
      var filter = cellOperatorChange(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange(value, e) {
      var filter = cellBoolDropdownChange(value.value.operator, e);
      this.triggerChange(filter);
    },
    clear: function clear(e) {
      e.preventDefault();
      this.triggerChange({
        value: '',
        operator: '',
        event: e
      });
    },
    triggerChange: function triggerChange(filter) {
      filter.field = this.$props.field;
      this.$emit('change', filter);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var size = this.$props.size;
    var ls = provideLocalizationService(this);
    var selectedOperator = this.$props.operators.find(function (item) {
      return item.operator === _this.$props.operator;
    }) || null;
    var renderOperatorEditor = function renderOperatorEditor() {
      if (this.$props.filterType === 'boolean') {
        return;
      }
      return (
        // @ts-ignore
        h(DropDownList, {
          onChange: this.operatorChange,
          on: this.v3 ? undefined : {
            "change": this.operatorChange
          },
          value: selectedOperator,
          attrs: this.v3 ? undefined : {
            value: selectedOperator,
            size: size,
            icon: 'filter',
            svgIcon: filterIcon,
            iconClassName: "k-button-icon",
            "data-items": this.$props.operators,
            textField: "text",
            title: ls.toLanguageString(filterChooseOperator, messages[filterChooseOperator]),
            popupSettings: {
              width: ''
            },
            "aria-label": this.ariaLabel || ls.toLanguageString(filterDropDownOperatorAriaLabel, messages[filterDropDownOperatorAriaLabel])
          },
          size: size,
          "class": "k-dropdown-operator",
          icon: 'filter',
          svgIcon: filterIcon,
          iconClassName: "k-button-icon",
          "data-items": this.$props.operators,
          textField: "text",
          title: ls.toLanguageString(filterChooseOperator, messages[filterChooseOperator]),
          popupSettings: {
            width: ''
          },
          "aria-label": this.ariaLabel || ls.toLanguageString(filterDropDownOperatorAriaLabel, messages[filterDropDownOperatorAriaLabel])
        })
      );
    };
    var filterComponent = function filterComponent(filterType, value) {
      var _this = this;
      switch (filterType) {
        case 'numeric':
          return (
            // @ts-ignore
            h(NumericTextBox, {
              size: size,
              attrs: this.v3 ? undefined : {
                size: size,
                value: value,
                title: this.$props.title,
                "aria-label": this.ariaLabel || ls.toLanguageString(filterNumericFilterAriaLabel, messages[filterNumericFilterAriaLabel])
              },
              value: value,
              onChange: function onChange(e) {
                _this.inputChange(e.value, e.event);
              },
              on: this.v3 ? undefined : {
                "change": function onChange(e) {
                  _this.inputChange(e.value, e.event);
                }
              },
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterNumericFilterAriaLabel, messages[filterNumericFilterAriaLabel])
            })
          );
        case 'date':
          return (
            // @ts-ignore
            h(DatePicker, {
              size: size,
              attrs: this.v3 ? undefined : {
                size: size,
                value: value,
                title: this.$props.title,
                "aria-label": this.ariaLabel || ls.toLanguageString(filterDateFilterAriaLabel, messages[filterDateFilterAriaLabel])
              },
              value: value,
              onChange: function onChange(e) {
                _this.inputChange(e.value, e);
              },
              on: this.v3 ? undefined : {
                "change": function onChange(e) {
                  _this.inputChange(e.value, e);
                }
              },
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterDateFilterAriaLabel, messages[filterDateFilterAriaLabel])
            })
          );
        case 'boolean':
          var booleanValues = this.$props.booleanValues;
          return (
            // @ts-ignore
            h(DropDownList, {
              onChange: this.boolDropdownChange,
              on: this.v3 ? undefined : {
                "change": this.boolDropdownChange
              },
              size: size,
              attrs: this.v3 ? undefined : {
                size: size,
                value: booleanValues.find(function (item) {
                  return item.operator === (value !== null ? value : '');
                }),
                "data-items": booleanValues,
                textField: "text",
                title: this.$props.title,
                "aria-label": this.ariaLabel || ls.toLanguageString(filterEnumFilterDropdownAriaLabel, messages[filterEnumFilterDropdownAriaLabel])
              },
              value: booleanValues.find(function (item) {
                return item.operator === (value !== null ? value : '');
              }),
              "data-items": booleanValues,
              textField: "text",
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterEnumFilterDropdownAriaLabel, messages[filterEnumFilterDropdownAriaLabel])
            })
          );
        default:
          return h(TextBox, {
            size: size,
            attrs: this.v3 ? undefined : {
              size: size,
              value: value || '',
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterTextFilterAriaLabel, messages[filterTextFilterAriaLabel])
            },
            value: value || '',
            onInput: function onInput(e) {
              _this.inputChange(e.target.value, e);
            },
            on: this.v3 ? undefined : {
              "input": function onInput(e) {
                _this.inputChange(e.target.value, e);
              }
            },
            title: this.$props.title,
            "aria-label": this.ariaLabel || ls.toLanguageString(filterTextFilterAriaLabel, messages[filterTextFilterAriaLabel])
          });
      }
    };
    var defaultRendering = h("div", {
      "class": "k-filtercell",
      style: this.$attrs.style
    }, [h("div", {
      "class": "k-filtercell-wrapper"
    }, [filterComponent.call(this, this.$props.filterType, this.$props.value), h("div", {
      "class": "k-filtercell-operator"
    }, [renderOperatorEditor.call(this),
    // @ts-ignore function children 
    h(Button, {
      size: size,
      attrs: this.v3 ? undefined : {
        size: size,
        type: "button",
        icon: 'filter-clear',
        svgIcon: filterClearIcon,
        title: ls.toLanguageString(filterClearButton, messages[filterClearButton])
      },
      type: "button",
      icon: 'filter-clear',
      svgIcon: filterClearIcon,
      "class": {
        /* button is always visible if there is either value or operator */
        'k-disabled': !(!(this.$props.value === null || this.$props.value === '') || this.$props.operator)
      },
      title: ls.toLanguageString(filterClearButton, messages[filterClearButton]),
      onClick: this.clear,
      on: this.v3 ? undefined : {
        "click": this.clear
      }
    })])])]);
    var gridListeners = this.$props.grid ? getListeners.call(this.$props.grid) : null;
    var cellRenderFunction = templateRendering.call(this.$props.grid, this.$props.render, gridListeners);
    return getTemplate.call(this, {
      h: h,
      template: cellRenderFunction,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.triggerChange
      }
    });
  }
};
/**
 * @hidden
 */
var FilterCell = FilterCellVue2;
export { FilterCell, FilterCellVue2 };