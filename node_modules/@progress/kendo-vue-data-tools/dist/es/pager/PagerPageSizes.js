// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { messages, pagerItemPerPage, pagerPageSelection } from '../messages/main';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { DropDownList } from '@progress/kendo-vue-dropdowns';
/**
 * @hidden
 */
var PagerPageSizesVue2 = {
  name: 'KendoPagerPageSizes',
  props: {
    value: [String, Number],
    pageSize: Number,
    pageSizes: Array,
    size: String,
    messagesMap: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    pageSizeChange: function pageSizeChange(e) {
      this.$emit('pagechange', {
        skip: 0,
        take: parseInt(e.target.value, 10)
      }, e);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      value = _a.value,
      pageSizes = _a.pageSizes,
      pageSize = _a.pageSize;
    var ls = provideLocalizationService(this);
    var sizes = pageSizes.slice();
    if (value === undefined && sizes.filter(function (s) {
      return s === pageSize;
    }).length === 0) {
      sizes.unshift(pageSize);
    }
    var itemPerPageMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerItemPerPage) : {
      messageKey: pagerItemPerPage,
      defaultMessage: messages[pagerItemPerPage]
    };
    var pageSelectionMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerPageSelection) : {
      messageKey: pagerPageSelection,
      defaultMessage: messages[pagerPageSelection]
    };
    return h("span", {
      "class": "k-pager-sizes k-label"
    }, [
    // @ts-ignore function children
    h(DropDownList, {
      value: value !== undefined ? value : pageSize,
      attrs: this.v3 ? undefined : {
        value: value !== undefined ? value : pageSize,
        dataItems: sizes,
        size: this.$props.size,
        ariaLabel: ls.toLanguageString(pageSelectionMessage.messageKey, pageSelectionMessage.defaultMessage)
      },
      dataItems: sizes,
      size: this.$props.size,
      ariaLabel: ls.toLanguageString(pageSelectionMessage.messageKey, pageSelectionMessage.defaultMessage),
      onChange: this.pageSizeChange,
      on: this.v3 ? undefined : {
        "change": this.pageSizeChange
      }
    }), ls.toLanguageString(itemPerPageMessage.messageKey, itemPerPageMessage.defaultMessage)]);
  }
};
/**
 * @hidden
 */
var PagerPageSizes = PagerPageSizesVue2;
export { PagerPageSizes, PagerPageSizesVue2 };