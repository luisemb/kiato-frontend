"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PagerInfoVue2 = exports.PagerInfo = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
/**
 * @hidden
 */
var PagerInfoVue2 = {
  name: 'KendoPagerInfo',
  props: {
    totalPages: Number,
    currentPage: Number,
    skip: Number,
    messagesMap: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var intlService = (0, kendo_vue_intl_1.provideIntlService)(this);
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var infoMessage = this.$props.messagesMap ? this.$props.messagesMap(main_1.pagerInfo) : {
      messageKey: main_1.pagerInfo,
      defaultMessage: main_1.messages[main_1.pagerInfo]
    };
    return h("span", {
      "class": "k-pager-info"
    }, [intlService.format(localizationService.toLanguageString(infoMessage.messageKey, infoMessage.defaultMessage), [Math.min(this.$props.skip + 1, this.$props.totalPages), Math.min(this.$props.skip + this.$props.currentPage, this.$props.totalPages), this.$props.totalPages])]);
  }
};
exports.PagerInfoVue2 = PagerInfoVue2;
/**
 * @hidden
 */
var PagerInfo = PagerInfoVue2;
exports.PagerInfo = PagerInfo;