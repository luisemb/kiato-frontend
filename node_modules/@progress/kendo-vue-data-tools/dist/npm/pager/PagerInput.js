"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PagerInputVue2 = exports.PagerInput = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var main_1 = require("../messages/main");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var kendo_vue_inputs_1 = require("@progress/kendo-vue-inputs");
/**
 * @hidden
 */
var PagerInputVue2 = {
  name: 'KendoPagerInput',
  props: {
    totalPages: Number,
    currentPage: Number,
    messagesMap: Function,
    size: String
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentText: undefined
    };
  },
  computed: {
    computedValue: function computedValue() {
      return this.$props.currentPage !== undefined ? this.$props.currentPage : this.currentText;
    }
  },
  methods: {
    changeHangler: function changeHangler(e) {
      this.currentText = e.target.value;
      if (this.currentText) {
        this.$emit('pagechange', this.currentText, e);
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var intlService = (0, kendo_vue_intl_1.provideIntlService)(this);
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var pageMessage = this.$props.messagesMap ? this.$props.messagesMap(main_1.pagerPage) : {
      messageKey: main_1.pagerPage,
      defaultMessage: main_1.messages[main_1.pagerPage]
    };
    var ofMessage = this.$props.messagesMap ? this.$props.messagesMap(main_1.pagerOf) : {
      messageKey: main_1.pagerOf,
      defaultMessage: main_1.messages[main_1.pagerOf]
    };
    var totalPagesMessage = this.$props.messagesMap ? this.$props.messagesMap(main_1.pagerTotalPages) : {
      messageKey: main_1.pagerTotalPages,
      defaultMessage: main_1.messages[main_1.pagerTotalPages]
    };
    var pageInputAriaLabel = this.$props.messagesMap ? this.$props.messagesMap(main_1.pagerPageInputAriaLabel) : {
      messageKey: main_1.pagerPageInputAriaLabel,
      defaultMessage: main_1.messages[main_1.pagerPageInputAriaLabel]
    };
    return h("span", {
      "class": "k-pager-input"
    }, [h("span", [localizationService.toLanguageString(pageMessage.messageKey, pageMessage.defaultMessage)]), h(kendo_vue_inputs_1.NumericTextBox, {
      min: 1,
      attrs: this.v3 ? undefined : {
        min: 1,
        value: this.computedValue,
        spinners: false,
        size: this.$props.size,
        ariaLabel: localizationService.toLanguageString(pageInputAriaLabel.messageKey, pageInputAriaLabel.defaultMessage)
      },
      value: this.computedValue,
      onChange: this.changeHangler,
      on: this.v3 ? undefined : {
        "change": this.changeHangler
      },
      spinners: false,
      size: this.$props.size,
      ariaLabel: localizationService.toLanguageString(pageInputAriaLabel.messageKey, pageInputAriaLabel.defaultMessage)
    }), h("span", ["".concat(localizationService.toLanguageString(ofMessage.messageKey, ofMessage.defaultMessage), " ").concat(intlService.format(localizationService.toLanguageString(totalPagesMessage.messageKey, totalPagesMessage.defaultMessage), [this.$props.totalPages]))])]);
  }
};
exports.PagerInputVue2 = PagerInputVue2;
/**
 * @hidden
 */
var PagerInput = PagerInputVue2;
exports.PagerInput = PagerInput;