"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PagerVue2 = exports.Pager = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var PagerNumericButtons_1 = require("./PagerNumericButtons");
var PagerInput_1 = require("./PagerInput");
var PagerPageSizes_1 = require("./PagerPageSizes");
var PagerInfo_1 = require("./PagerInfo");
var PagerNavigationButton_1 = require("./PagerNavigationButton");
var NUMBERS_CLASS = 'k-pager-numbers-wrap';
var SIZES_CLASS = 'k-pager-sizes';
var INFO_CLASS = 'k-pager-info';
var main_1 = require("../messages/main");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var PagerVue2 = {
  name: 'KendoPager',
  props: {
    pageSizeValue: [String, Number],
    total: Number,
    skip: Number,
    take: Number,
    pageSize: Number,
    settings: [Object, Boolean],
    buttonCount: {
      type: Number,
      default: 10
    },
    info: {
      type: Boolean,
      default: true
    },
    type: {
      type: String,
      default: 'numeric',
      validator: function validator(value) {
        return ['numeric', 'input'].includes(value);
      }
    },
    pageSizes: {
      type: Array
    },
    previousNext: Boolean,
    messagesMap: Function,
    responsive: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    pagerRender: [String, Function, Object],
    width: [Number, String],
    ariaControls: {
      type: String,
      default: undefined
    }
  },
  data: function data() {
    return {
      currentRtl: false,
      itemsToFit: undefined,
      itemsWidths: undefined
    };
  },
  mounted: function mounted() {
    if (kendo_vue_common_1.canUseDOM && window.ResizeObserver) {
      this.observerResize = new window.ResizeObserver(this.onWindowResize);
      this.observerResize.observe(this.$el);
    }
    this.currentRtl = (0, kendo_vue_common_1.isRtl)(this.$el);
    var childrenWidths = this.collectPagerChildrenWidths();
    this.itemsWidths = childrenWidths;
    this.onWindowResize();
  },
  destroyed: !!isV3 ? undefined : function () {
    var _a;
    if (((_a = this.document) === null || _a === void 0 ? void 0 : _a.body) && this.observerResize) {
      this.observerResize.disconnect();
    }
  },
  // @ts-ignore
  unmounted: function unmounted() {
    var _a;
    if (((_a = this.document) === null || _a === void 0 ? void 0 : _a.body) && this.observerResize) {
      this.observerResize.disconnect();
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  computed: {
    wrapperClass: {
      get: function get() {
        var _a;
        var size = this.$props.size;
        return _a = {
          'k-pager': true
        }, _a["k-pager-".concat(kendo_vue_common_1.kendoThemeMaps.sizeMap[size] || size)] = size, _a;
      }
    },
    totalPages: {
      get: function get() {
        return Math.ceil((this.$props.total || 0) / this.currentTake);
      }
    },
    currentPage: {
      get: function get() {
        return Math.floor((this.$props.skip || 0) / this.currentTake) + 1;
      }
    },
    currentTake: {
      get: function get() {
        return this.$props.take || this.$props.pageSize;
      }
    },
    showPageSizes: function showPageSizes() {
      return this.itemsToFit.includes(this.pagerSizesIndex);
    },
    showInfo: function showInfo() {
      return this.itemsToFit.includes(this.pagerInfoIndex);
    }
  },
  methods: {
    changePage: function changePage(page, e) {
      if (page > 0 && page <= this.totalPages) {
        this.$emit('pagechange', {
          skip: (page - 1) * this.currentTake,
          take: this.currentTake
        }, e);
      }
    },
    triggerPageChange: function triggerPageChange(state, event) {
      var pagesizechange = kendo_vue_common_1.hasListener.call(this, 'pagesizechange');
      if (pagesizechange) {
        this.$emit('pagesizechange', state, event);
      } else {
        this.$emit('pagechange', state, event);
      }
    },
    onWindowResize: function onWindowResize() {
      var element = this.$el;
      if (!element || !this.$props.responsive || this.$props.settings.responsive === false) {
        return;
      }
      this.itemsToFit = this.fitChildrenInParent(element, this.itemsWidths || []);
    },
    transformDimension: function transformDimension(initialValue) {
      return typeof initialValue === 'string' ? initialValue.endsWith('px') ? initialValue : initialValue + 'px' : initialValue + 'px';
    },
    collectPagerChildrenWidths: function collectPagerChildrenWidths() {
      var _a;
      var arrayChildren = Array.from(((_a = this.$el) === null || _a === void 0 ? void 0 : _a.children) || []);
      var widths = arrayChildren.map(function (item) {
        if (item instanceof HTMLElement) {
          return {
            class: item.className,
            width: item.offsetWidth
          };
        }
        return 0;
      });
      return widths;
    },
    fitChildrenInParent: function fitChildrenInParent(parent, childrenWidths) {
      var fitItems = [];
      var elementsWidth = 0;
      var updatedWidths = childrenWidths;
      var parentWidth = parent.offsetWidth;
      var buffer = 20;
      for (var index = 0; index < childrenWidths.length; index++) {
        var padding = index === 0 ? 8 : 0;
        var parentChild = parent.children[index];
        var currentElementWidth = index === 0 ? childrenWidths[index].width : (parentChild === null || parentChild === void 0 ? void 0 : parentChild.offsetWidth) || childrenWidths[index].width;
        elementsWidth += currentElementWidth;
        if (elementsWidth < parentWidth - buffer - padding) {
          fitItems.push(childrenWidths[index].class);
        } else {
          updatedWidths[index].width = currentElementWidth;
        }
      }
      this.itemsWidths = updatedWidths;
      return fitItems;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore 
  render: function render(createElement) {
    var _a, _b;
    var h = gh || createElement;
    var _c = this.$props,
      skip = _c.skip,
      take = _c.take,
      total = _c.total,
      pageSizes = _c.pageSizes,
      buttonCount = _c.buttonCount,
      messagesMap = _c.messagesMap,
      info = _c.info,
      type = _c.type,
      previousNext = _c.previousNext,
      pageSizeValue = _c.pageSizeValue;
    var settings = __assign({
      pageSizes: pageSizes,
      buttonCount: buttonCount,
      info: info,
      previousNext: previousNext,
      type: type,
      skip: skip,
      take: take,
      total: total,
      messagesMap: messagesMap,
      pageSizeValue: pageSizeValue
    }, this.$props.settings);
    var pagerRender = this.$props.pagerRender || this.$props.settings.pagerRender;
    var pagerRenderTemplate = pagerRender ? kendo_vue_common_1.templateRendering.call(this, pagerRender, kendo_vue_common_1.getListeners.call(this)) : null;
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var firstPageMessage = messagesMap ? messagesMap(main_1.pagerFirstPage) : {
      messageKey: main_1.pagerFirstPage,
      defaultMessage: main_1.messages[main_1.pagerFirstPage]
    };
    var previousPageMessage = messagesMap ? messagesMap(main_1.pagerPreviousPage) : {
      messageKey: main_1.pagerPreviousPage,
      defaultMessage: main_1.messages[main_1.pagerPreviousPage]
    };
    var nextPageMessage = messagesMap ? messagesMap(main_1.pagerNextPage) : {
      messageKey: main_1.pagerNextPage,
      defaultMessage: main_1.messages[main_1.pagerNextPage]
    };
    var lastPageMessage = messagesMap ? messagesMap(main_1.pagerLastPage) : {
      messageKey: main_1.pagerLastPage,
      defaultMessage: main_1.messages[main_1.pagerLastPage]
    };
    var changer = settings.type === 'numeric' ?
    // @ts-ignore
    h(PagerNumericButtons_1.PagerNumericButtons, {
      responsiveSize: this.responsive && this.itemsToFit && this.itemsToFit.length < 2 ? 'small' : 'large',
      attrs: this.v3 ? undefined : {
        responsiveSize: this.responsive && this.itemsToFit && this.itemsToFit.length < 2 ? 'small' : 'large',
        size: this.size,
        buttonCount: settings.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: this.currentPage
      },
      size: this.size,
      buttonCount: settings.buttonCount || 0,
      totalPages: this.totalPages,
      currentPage: this.currentPage,
      onPagechange: this.changePage,
      on: this.v3 ? undefined : {
        "pagechange": this.changePage
      }
    }) :
    // @ts-ignore
    h(PagerInput_1.PagerInput, {
      currentPage: this.currentPage,
      attrs: this.v3 ? undefined : {
        currentPage: this.currentPage,
        totalPages: this.totalPages,
        messagesMap: messagesMap,
        size: this.size
      },
      totalPages: this.totalPages,
      onPagechange: this.changePage,
      on: this.v3 ? undefined : {
        "pagechange": this.changePage
      },
      messagesMap: messagesMap,
      size: this.size
    });
    var first, prev, next, last;
    if (settings.previousNext) {
      first =
      // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        "class": 'k-pager-first',
        size: this.size,
        attrs: this.v3 ? undefined : {
          size: this.size,
          disabled: this.currentPage === 1,
          page: 1,
          title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
          icon: this.currentRtl ? 'caret-alt-to-right' : 'caret-alt-to-left',
          svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltToRightIcon : kendo_svg_icons_1.caretAltToLeftIcon
        },
        disabled: this.currentPage === 1,
        page: 1,
        title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
        icon: this.currentRtl ? 'caret-alt-to-right' : 'caret-alt-to-left',
        svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltToRightIcon : kendo_svg_icons_1.caretAltToLeftIcon,
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
      prev =
      // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        disabled: this.currentPage === 1,
        attrs: this.v3 ? undefined : {
          disabled: this.currentPage === 1,
          size: this.size,
          page: this.currentPage - 1,
          title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
          icon: this.currentRtl ? 'caret-alt-right' : 'caret-alt-left',
          svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltRightIcon : kendo_svg_icons_1.caretAltLeftIcon
        },
        size: this.size,
        page: this.currentPage - 1,
        title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
        icon: this.currentRtl ? 'caret-alt-right' : 'caret-alt-left',
        svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltRightIcon : kendo_svg_icons_1.caretAltLeftIcon,
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
      next =
      // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        disabled: this.currentPage === this.totalPages,
        attrs: this.v3 ? undefined : {
          disabled: this.currentPage === this.totalPages,
          size: this.size,
          page: this.currentPage + 1,
          title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
          icon: this.currentRtl ? 'caret-alt-left' : 'caret-alt-right',
          svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltLeftIcon : kendo_svg_icons_1.caretAltRightIcon
        },
        size: this.size,
        page: this.currentPage + 1,
        title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
        icon: this.currentRtl ? 'caret-alt-left' : 'caret-alt-right',
        svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltLeftIcon : kendo_svg_icons_1.caretAltRightIcon,
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
      last =
      // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        "class": 'k-pager-last',
        disabled: this.currentPage === this.totalPages,
        attrs: this.v3 ? undefined : {
          disabled: this.currentPage === this.totalPages,
          size: this.size,
          page: this.totalPages,
          title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
          icon: this.currentRtl ? 'caret-alt-to-left' : 'caret-alt-to-right',
          svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltToLeftIcon : kendo_svg_icons_1.caretAltToRightIcon
        },
        size: this.size,
        page: this.totalPages,
        title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
        icon: this.currentRtl ? 'caret-alt-to-left' : 'caret-alt-to-right',
        svgIcon: this.currentRtl ? kendo_svg_icons_1.caretAltToLeftIcon : kendo_svg_icons_1.caretAltToRightIcon,
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
    }
    var renderPageSizes = settings.pageSizes &&
    // @ts-ignore function children
    h(PagerPageSizes_1.PagerPageSizes, {
      onPagechange: this.triggerPageChange,
      on: this.v3 ? undefined : {
        "pagechange": this.triggerPageChange
      },
      pageSize: this.currentTake,
      attrs: this.v3 ? undefined : {
        pageSize: this.currentTake,
        pageSizes: settings.pageSizes,
        value: settings.pageSizeValue,
        messagesMap: messagesMap,
        size: this.size
      },
      pageSizes: settings.pageSizes,
      value: settings.pageSizeValue,
      messagesMap: messagesMap,
      size: this.size
    });
    var infoElement = settings.info &&
    // @ts-ignore function children
    h(PagerInfo_1.PagerInfo, {
      totalPages: this.$props.total,
      attrs: this.v3 ? undefined : {
        totalPages: this.$props.total,
        skip: this.$props.skip,
        currentPage: this.currentTake,
        messagesMap: messagesMap
      },
      skip: this.$props.skip,
      currentPage: this.currentTake,
      messagesMap: messagesMap
    });
    var pagerContent = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: pagerRenderTemplate,
      additionalProps: __assign(__assign({}, this.$props), {
        current: this.currentPage
      }),
      additionalListeners: {
        pagechange: this.triggerPageChange
      }
    });
    var width = this.transformDimension(this.$props.width);
    return pagerRender ? h("div", {
      "class": this.wrapperClass,
      style: {
        width: width
      },
      role: "application",
      attrs: this.v3 ? undefined : {
        role: "application",
        "aria-roledescription": "pager"
      },
      "aria-roledescription": "pager"
    }, [pagerContent]) : h("div", {
      "class": this.wrapperClass,
      style: {
        width: width
      },
      role: "application",
      attrs: this.v3 ? undefined : {
        role: "application",
        "aria-roledescription": "pager",
        "aria-keyshortcuts": "Enter ArrowRight ArrowLeft",
        "aria-label": 'Page navigation, page ' + this.currentPage + ' of ' + this.totalPages,
        "aria-controls": this.$props.ariaControls
      },
      "aria-roledescription": "pager",
      "aria-keyshortcuts": "Enter ArrowRight ArrowLeft",
      "aria-label": 'Page navigation, page ' + this.currentPage + ' of ' + this.totalPages,
      "aria-controls": this.$props.ariaControls
    }, [h("div", {
      "class": NUMBERS_CLASS
    }, [first, prev, changer, next, last]), !(this.responsive && this.itemsToFit && !((_a = this.itemsToFit) === null || _a === void 0 ? void 0 : _a.find(function (it) {
      return it.indexOf(SIZES_CLASS) !== -1;
    }))) && renderPageSizes, !(this.responsive && this.itemsToFit && !((_b = this.itemsToFit) === null || _b === void 0 ? void 0 : _b.find(function (it) {
      return it.indexOf(INFO_CLASS) !== -1;
    }))) && infoElement]);
  }
};
exports.PagerVue2 = PagerVue2;
/**
 * @hidden
 */
var Pager = PagerVue2;
exports.Pager = Pager;