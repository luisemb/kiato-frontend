"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnMenuItemVue2 = exports.ColumnMenuItem = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var ColumnMenuItemVue2 = {
  props: {
    title: String,
    iconClass: String,
    icon: String,
    svgIcon: Object,
    selected: Boolean
  },
  methods: {
    onClick: function onClick(e) {
      this.$emit('menuitemclick', e);
    },
    onKeyDown: function onKeyDown(event) {
      if (event.keyCode === kendo_vue_common_1.Keys.enter) {
        this.$emit('menuitemclick', event);
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      title = _a.title,
      iconClass = _a.iconClass,
      selected = _a.selected,
      icon = _a.icon,
      svgIcon = _a.svgIcon;
    return h("div", {
      tabindex: 0,
      attrs: this.v3 ? undefined : {
        tabindex: 0
      },
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown,
        "click": this.onClick
      },
      onClick: this.onClick,
      "class": "k-columnmenu-item ".concat(selected ? 'k-selected' : '')
    }, [iconClass && h(kendo_vue_common_1.Icon, {
      "class": iconClass
    }), (icon || svgIcon) && h(kendo_vue_common_1.Icon, {
      name: icon,
      attrs: this.v3 ? undefined : {
        name: icon,
        icon: svgIcon
      },
      icon: svgIcon
    }), title]);
  }
};
exports.ColumnMenuItemVue2 = ColumnMenuItemVue2;
/**
 * @hidden
 */
var ColumnMenuItem = ColumnMenuItemVue2;
exports.ColumnMenuItem = ColumnMenuItem;