"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnMenuSortVue2 = exports.ColumnMenuSort = exports.sortGroupByField = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var ColumnMenuItem_1 = require("./ColumnMenuItem");
var ColumnMenuItemGroup_1 = require("./ColumnMenuItemGroup");
var SortSettings_1 = require("../interfaces/SortSettings");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var ASC_DIR = 'asc';
/**
 * @hidden
 */
var DESC_DIR = 'desc';
/**
 * @hidden
 */
var sortSeqMap = {
  true: {
    'asc': {
      'asc': '',
      'desc': 'desc'
    },
    'desc': {
      'asc': 'asc',
      'desc': ''
    },
    '': {
      'asc': 'asc',
      'desc': 'desc'
    }
  },
  false: {
    'asc': {
      'asc': 'asc',
      'desc': 'desc'
    },
    'desc': {
      'asc': 'asc',
      'desc': 'desc'
    },
    '': {
      'asc': 'asc',
      'desc': 'desc'
    }
  }
};
/**
 * @hidden
 */
var sortIndex = function sortIndex(field, sort) {
  if (!sort) {
    return -1;
  }
  return sort.findIndex(function (s) {
    return s.field === field;
  });
};
/**
 * @hidden
 */
var sortedAsc = function sortedAsc(sortedIndex, sort) {
  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === ASC_DIR);
};
/**
 * @hidden
 */
var sortedDesc = function sortedDesc(sortedIndex, sort) {
  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === DESC_DIR);
};
// tslint:disable:max-line-length
/**
 * Can be used to check if sorting is applied to a specific field ([see example]({% slug column_menu_grid %}#toc-styling-the-column-menu-icon)). Useful for creating active sort indicators.
 */
// tslint:enable:max-line-length
var sortGroupByField = function sortGroupByField(field, sort) {
  var currentSortIndex = sortIndex(field, sort);
  return sortedDesc(currentSortIndex, sort) || sortedAsc(currentSortIndex, sort);
};
exports.sortGroupByField = sortGroupByField;
/**
 * @hidden
 */
var ColumnMenuSortVue2 = {
  props: {
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    column: Object
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onAscClick: function onAscClick(e) {
      this.onSort(e, ASC_DIR);
      this.$emit('closemenu');
    },
    onDescClick: function onDescClick(e) {
      this.onSort(e, DESC_DIR);
      this.$emit('closemenu');
    },
    onSort: function onSort(e, selectedDir) {
      e.preventDefault();
      if (!kendo_vue_common_1.hasListener.call(this, 'sortchange')) {
        return;
      }
      var _a = this.$props,
        column = _a.column,
        sortable = _a.sortable,
        sort = _a.sort;
      var _b = (0, SortSettings_1.normalize)(sortable || false, false),
        allowUnsort = _b.allowUnsort,
        mode = _b.mode;
      var oldDescriptor = (sort || []).filter(function (d) {
        return d.field === column.field;
      })[0];
      var dir = sortSeqMap[allowUnsort][oldDescriptor && oldDescriptor.dir || ''][selectedDir];
      var newDescriptor = mode === 'single' ? [] : (this.$props.sort || []).filter(function (d) {
        return d.field !== column.field;
      });
      if (dir !== '' && column.field) {
        newDescriptor.push({
          field: column.field,
          dir: dir
        });
      }
      this.$emit('sortchange', newDescriptor, {
        event: e,
        field: this.$props.column.field
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      sort = _a.sort,
      column = _a.column;
    var currentSortIndex = sortIndex(column.field, sort);
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    return (
      // @ts-ignore function children
      h(ColumnMenuItemGroup_1.ColumnMenuItemGroup, this.v3 ? function () {
        return [
        // @ts-ignore
        h(ColumnMenuItem_1.ColumnMenuItem, {
          title: localizationService.toLanguageString(main_1.columnMenuSortAscending, main_1.messages[main_1.columnMenuSortAscending]),
          attrs: _this.v3 ? undefined : {
            title: localizationService.toLanguageString(main_1.columnMenuSortAscending, main_1.messages[main_1.columnMenuSortAscending]),
            icon: 'sort-asc-small',
            scgIcon: kendo_svg_icons_1.sortAscSmallIcon,
            selected: sortedAsc(currentSortIndex, sort)
          },
          icon: 'sort-asc-small',
          scgIcon: kendo_svg_icons_1.sortAscSmallIcon,
          selected: sortedAsc(currentSortIndex, sort),
          onMenuitemclick: _this.onAscClick,
          on: _this.v3 ? undefined : {
            "menuitemclick": _this.onAscClick
          }
        }),
        // @ts-ignore
        h(ColumnMenuItem_1.ColumnMenuItem, {
          title: localizationService.toLanguageString(main_1.columnMenuSortDescending, main_1.messages[main_1.columnMenuSortDescending]),
          attrs: _this.v3 ? undefined : {
            title: localizationService.toLanguageString(main_1.columnMenuSortDescending, main_1.messages[main_1.columnMenuSortDescending]),
            icon: 'sort-desc-small',
            svgIcon: kendo_svg_icons_1.sortDescSmallIcon,
            selected: sortedDesc(currentSortIndex, sort)
          },
          icon: 'sort-desc-small',
          svgIcon: kendo_svg_icons_1.sortDescSmallIcon,
          selected: sortedDesc(currentSortIndex, sort),
          onMenuitemclick: _this.onDescClick,
          on: _this.v3 ? undefined : {
            "menuitemclick": _this.onDescClick
          }
        })];
      } : [h(ColumnMenuItem_1.ColumnMenuItem, {
        title: localizationService.toLanguageString(main_1.columnMenuSortAscending, main_1.messages[main_1.columnMenuSortAscending]),
        attrs: _this.v3 ? undefined : {
          title: localizationService.toLanguageString(main_1.columnMenuSortAscending, main_1.messages[main_1.columnMenuSortAscending]),
          icon: 'sort-asc-small',
          scgIcon: kendo_svg_icons_1.sortAscSmallIcon,
          selected: sortedAsc(currentSortIndex, sort)
        },
        icon: 'sort-asc-small',
        scgIcon: kendo_svg_icons_1.sortAscSmallIcon,
        selected: sortedAsc(currentSortIndex, sort),
        onMenuitemclick: _this.onAscClick,
        on: _this.v3 ? undefined : {
          "menuitemclick": _this.onAscClick
        }
      }), h(ColumnMenuItem_1.ColumnMenuItem, {
        title: localizationService.toLanguageString(main_1.columnMenuSortDescending, main_1.messages[main_1.columnMenuSortDescending]),
        attrs: _this.v3 ? undefined : {
          title: localizationService.toLanguageString(main_1.columnMenuSortDescending, main_1.messages[main_1.columnMenuSortDescending]),
          icon: 'sort-desc-small',
          svgIcon: kendo_svg_icons_1.sortDescSmallIcon,
          selected: sortedDesc(currentSortIndex, sort)
        },
        icon: 'sort-desc-small',
        svgIcon: kendo_svg_icons_1.sortDescSmallIcon,
        selected: sortedDesc(currentSortIndex, sort),
        onMenuitemclick: _this.onDescClick,
        on: _this.v3 ? undefined : {
          "menuitemclick": _this.onDescClick
        }
      })])
    );
  }
};
exports.ColumnMenuSortVue2 = ColumnMenuSortVue2;
/**
 *
 *
 * {% meta height:410 %}
 *  ```html-preview
 *  <div id="vueapp">
 *     <Grid :style="{height: '280px'}"
 *          :data-items="gridData"
 *          :sortable="true"
 *          :sort= "sort"
 *          :filter="filter"
 *          :expand-field="'Discontinued'"
 *          @datastatechange="dataStateChange"
 *          @expandchange="expandChange"
 *          :columns="columns">
 *       </Grid>
 *  </div>
 * ```
 * ```js
 * import { , ColumnMenuSort } from '@progress/kendo-vue-grid';
 * import { process } from '@progress/kendo-data-query';
 *      const ColumnMenu = {
 *        props: {
 *            column: Object,
 *            sortable: [Boolean, Object],
 *            sort: {
 *                type: Array
 *            },
 *            filter: Object,
 *            filterable: Boolean
 *        },
 *        components: {
 *            ColumnMenuSort
 *        },
 *        template: `<div>
 *            <ColumnMenuSort
 *                :column="column"
 *                :filterable="filterable"
 *                :filter="filter"
 *                @closemenu ="closeMenu"
 *                @sortchange = "sortChange"
 *            />
 *        </div>`,
 *        methods: {
 *            closeMenu () {
 *                this.$emit('closemenu');
 *            },
 *            sortChange (newDescriptor, e) {
 *                this.$emit('filterchange', newDescriptor, e);
 *            }
 *        }
 *      };
 *
 *      Vue.component('Grid', );
 *      new Vue({
 *          el: '#vueapp',
 *          components: {
 *
 *          },
 *          created: function() {
 *             this.getData();
 *          },
 *          methods: {
 *            getData: function () {
 *                let dataState = {
 *                    filter: this.filter,
 *                    sort: this.sort
 *                };
 *                this.gridData = process([{
 *                    "ProductID": 1,
 *                    "ProductName": "Chai",
 *                    "UnitsInStock": 39,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 8, 20)
 *                },{
 *                    "ProductID": 2,
 *                    "ProductName": "Chang",
 *                    "UnitsInStock": 17,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 7, 12)
 *                },{
 *                    "ProductID": 3,
 *                    "ProductName": "Aniseed Syrup",
 *                    "UnitsInStock": 13,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 8, 26)
 *                },{
 *                    "ProductID": 4,
 *                    "ProductName": "Chef Anton's Cajun Seasoning",
 *                    "UnitsInStock": 53,
 *                    "Discontinued": false,
 *                    "FirstOrderedOn": new Date(1996, 9, 19)
 *                }], dataState);
 *            },
 *            createAppState: function(dataState) {
 *                this.sort = dataState.sort;
 *                this.filter = dataState.filter;
 *                this.getData();
 *            },
 *            dataStateChange: function (event) {
 *                this.createAppState(event.data);
 *            },
 *            expandChange: function (event) {
 *                 event.dataItem[event.target.$props.expandField] = event.value;
 *                 //
 *                 // In Vue 2 context, instead of the above line, inside the expandChange method we should have the following:
 *                 //
 *                 //   Vue.set(
 *                 //     event.dataItem,
 *                 //     event.target.$props.expandField,
 *                 //     event.dataItem.expanded === undefined ? false : !event.dataItem.expanded
 *                 //   );
 *                 //
 *            }
 *          },
 *          data: function () {
 *              return {
 *                 filter: null,
 *                 sort: [],
 *                  gridData: [],
 *                  columns: [
 *                      { field: 'ProductID'},
 *                      { field: 'ProductName', title: 'Product Name' },
 *                      { field: 'UnitsInStock', title: 'Units In Stock', columnMenu: ColumnMenu }
 *                  ]
 *              };
 *          }
 *       } );
 * ```
 *
 *
 * ### props <span class='code'>[GridColumnMenuSortProps]({% slug api_grid_gridcolumnmenusortprops %})</span>
 */
var ColumnMenuSort = ColumnMenuSortVue2;
exports.ColumnMenuSort = ColumnMenuSort;