"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupFilterVue2 = exports.GroupFilter = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_data_query_1 = require("@progress/kendo-data-query");
var GroupToolbar_1 = require("./GroupToolbar");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
var Expression_1 = require("./Expression");
/**
 * @hidden
 */
var GroupFilterVue2 = {
  name: 'KendoFilterGroup',
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    },
    defaultGroupFilter: {
      type: Object,
      required: true
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var _a = this.$props,
      fields = _a.fields,
      filter = _a.filter,
      filterRender = _a.filterRender;
    return filter.filters.length > 0 ? h("ul", {
      "class": "k-filter-lines",
      role: "group",
      attrs: this.v3 ? undefined : {
        role: "group"
      }
    }, [filter.filters.map(function (f, idx) {
      return h("li", {
        key: idx,
        "class": "k-filter-item",
        role: "treeitem",
        attrs: this.v3 ? undefined : {
          role: "treeitem"
        }
      }, [(0, kendo_data_query_1.isCompositeFilterDescriptor)(f) ? [
      // @ts-ignore
      h(GroupToolbar_1.GroupToolbar, {
        filter: f,
        attrs: this.v3 ? undefined : {
          filter: f,
          fields: fields,
          ariaLabel: localizationService.toLanguageString(main_1.filterGroupFilterAriaLabel, main_1.messages[main_1.filterGroupFilterAriaLabel]),
          defaultGroupFilter: this.$props.defaultGroupFilter
        },
        fields: fields,
        ariaLabel: localizationService.toLanguageString(main_1.filterGroupFilterAriaLabel, main_1.messages[main_1.filterGroupFilterAriaLabel]),
        onChange: this.onChange,
        on: this.v3 ? undefined : {
          "change": this.onChange,
          "remove": this.onRemove
        },
        onRemove: this.onRemove,
        defaultGroupFilter: this.$props.defaultGroupFilter
      }), h(GroupFilter, {
        filter: f,
        attrs: this.v3 ? undefined : {
          filter: f,
          fields: fields,
          defaultGroupFilter: this.$props.defaultGroupFilter
        },
        fields: fields,
        onChange: this.onChange,
        on: this.v3 ? undefined : {
          "change": this.onChange,
          "remove": this.onRemove
        },
        onRemove: this.onRemove,
        defaultGroupFilter: this.$props.defaultGroupFilter
      })] :
      // @ts-ignore
      h(Expression_1.Expression, {
        filter: f,
        attrs: this.v3 ? undefined : {
          filter: f,
          fields: fields,
          filterRender: filterRender
        },
        fields: fields,
        filterRender: filterRender,
        onChange: this.onChange,
        on: this.v3 ? undefined : {
          "change": this.onChange,
          "remove": this.onRemove
        },
        onRemove: this.onRemove
      })]);
    }, this)]) : null;
  },
  methods: {
    replaceFilter: function replaceFilter(prevFilter, nextFilter) {
      var filter = this.$props.filter;
      var filters = filter.filters.map(function (f) {
        return f === prevFilter ? nextFilter : f;
      });
      return __assign(__assign({}, filter), {
        filters: filters
      });
    },
    onChange: function onChange(event) {
      var nextFilter = this.replaceFilter(event.prevFilter, event.nextFilter);
      var changeEvent = {
        nextFilter: nextFilter,
        prevFilter: this.$props.filter,
        event: event.event,
        target: this
      };
      this.$emit('change', changeEvent);
    },
    onRemove: function onRemove(event) {
      var prevFilter = this.$props.filter;
      var filters = prevFilter.filters.filter(function (f) {
        return f !== event.filter;
      });
      var changeEvent = {
        nextFilter: __assign(__assign({}, prevFilter), {
          filters: filters
        }),
        prevFilter: prevFilter,
        event: event.event,
        target: this
      };
      this.$emit('change', changeEvent);
    }
  }
};
exports.GroupFilterVue2 = GroupFilterVue2;
/**
 * @hidden
 */
var GroupFilter = GroupFilterVue2;
exports.GroupFilter = GroupFilter;