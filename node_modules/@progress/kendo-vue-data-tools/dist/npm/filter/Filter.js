"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterVue2 = exports.Filter = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var GroupFilters_1 = require("./GroupFilters");
var GroupToolbar_1 = require("./GroupToolbar");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var package_metadata_1 = require("../package-metadata");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
/**
 * @hidden
 */
var FilterVue2 = {
  name: 'KendoFilter',
  // @ts-ignore
  emits: {
    change: null,
    'changemodel': null,
    'update:modelValue': null
  },
  model: {
    event: 'changemodel'
  },
  props: {
    fields: {
      type: Array,
      required: true
    },
    modelValue: {
      type: Object,
      default: undefined
    },
    value: Object,
    defaultGroupFilter: Object,
    upperToolbarAriaLabel: {
      type: String,
      default: undefined
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  computed: {
    computedValue: function computedValue() {
      var value;
      if (this.$props.value !== undefined) {
        value = this.$props.value;
      } else if (this.$props.modelValue !== undefined) {
        value = this.$props.modelValue;
      }
      return value;
    }
  },
  render: function render(createElement) {
    var locService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var h = gh || createElement;
    var fields = this.$props.fields.map(function (field) {
      return __assign(__assign({}, field), {
        filterRender: kendo_vue_common_1.templateRendering.call(this, field.filterRender, kendo_vue_common_1.getListeners.call(this))
      });
    }, this);
    return h("div", {
      "class": 'k-filter'
    }, [h("ul", {
      "class": "k-filter-container",
      role: "tree",
      attrs: this.v3 ? undefined : {
        role: "tree",
        ariaLabel: locService.toLanguageString(main_1.filterAriaLabel, main_1.messages[main_1.filterAriaLabel])
      },
      ariaLabel: locService.toLanguageString(main_1.filterAriaLabel, main_1.messages[main_1.filterAriaLabel])
    }, [h("li", {
      "class": "k-filter-group-main",
      role: "treeitem",
      attrs: this.v3 ? undefined : {
        role: "treeitem"
      }
    }, [
    // @ts-ignore function children
    h(GroupToolbar_1.GroupToolbar, {
      "aria-label": this.$props.upperToolbarAriaLabel,
      attrs: this.v3 ? undefined : {
        "aria-label": this.$props.upperToolbarAriaLabel,
        filter: this.computedValue,
        fields: fields,
        defaultGroupFilter: this.$props.defaultGroupFilter || {
          logic: 'and',
          filters: []
        }
      },
      filter: this.computedValue,
      fields: fields,
      onChange: this.onFilterChange,
      on: this.v3 ? undefined : {
        "change": this.onFilterChange,
        "remove": this.onGroupRemove
      },
      onRemove: this.onGroupRemove,
      defaultGroupFilter: this.$props.defaultGroupFilter || {
        logic: 'and',
        filters: []
      }
    }),
    // @ts-ignore function children
    h(GroupFilters_1.GroupFilter, {
      filter: this.computedValue,
      attrs: this.v3 ? undefined : {
        filter: this.computedValue,
        fields: fields,
        defaultGroupFilter: this.$props.defaultGroupFilter || {
          logic: 'and',
          filters: []
        }
      },
      fields: fields,
      onChange: this.onFilterChange,
      on: this.v3 ? undefined : {
        "change": this.onFilterChange,
        "remove": this.onGroupRemove
      },
      onRemove: this.onGroupRemove,
      defaultGroupFilter: this.$props.defaultGroupFilter || {
        logic: 'and',
        filters: []
      }
    })])])]);
  },
  methods: {
    onFilterChange: function onFilterChange(event) {
      var changeEvent = {
        filter: event.nextFilter,
        event: event.event,
        target: this
      };
      this.$emit('changemodel', event.nextFilter);
      this.$emit('update:modelValue', event.nextFilter);
      this.$emit('change', changeEvent);
    },
    onGroupRemove: function onGroupRemove(event) {
      var nextFilter = __assign(__assign({}, this.computedValue), {
        filters: []
      });
      var changeEvent = {
        filter: nextFilter,
        event: event.event,
        target: this
      };
      this.$emit('changemodel', nextFilter);
      this.$emit('update:modelValue', nextFilter);
      this.$emit('change', changeEvent);
    }
  }
};
exports.FilterVue2 = FilterVue2;
/**
 * @hidden
 */
var Filter = FilterVue2;
exports.Filter = Filter;