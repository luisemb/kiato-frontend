"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpressionVue2 = exports.Expression = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var kendo_vue_dropdowns_1 = require("@progress/kendo-vue-dropdowns");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var operators_1 = require("./operators");
var main_1 = require("../messages/main");
var TextFilter_1 = require("./filters/TextFilter");
var NumericFilter_1 = require("./filters/NumericFilter");
var BooleanFilter_1 = require("./filters/BooleanFilter");
var DateFilter_1 = require("./filters/DateFilter");
/**
 * @hidden
 */
var ExpressionVue2 = {
  name: 'KendoExpression',
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      fields = _a.fields,
      filter = _a.filter;
    var field = fields.find(function (f) {
      return f.name === filter.field;
    });
    var locService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var operators = (field && field.operators || []).map(function (o) {
      return __assign(__assign({}, o), {
        text: locService.toLanguageString(o.text, main_1.messages[o.text] || o.text)
      });
    });
    var defaultRendering = null;
    var filterEditors = function filterEditors(filterName, filterRender) {
      switch (filterName) {
        case 'numeric':
          defaultRendering =
          // @ts-ignore
          h(NumericFilter_1.NumericFilter, {
            filter: filter,
            attrs: this.v3 ? undefined : {
              filter: filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? undefined : {
              "filterchange": this.onInputChange
            }
          });
          break;
        case 'date':
          defaultRendering =
          // @ts-ignore
          h(DateFilter_1.DateFilter, {
            filter: filter,
            attrs: this.v3 ? undefined : {
              filter: filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? undefined : {
              "filterchange": this.onInputChange
            }
          });
          break;
        case 'boolean':
          defaultRendering =
          // @ts-ignore
          h(BooleanFilter_1.BooleanFilter, {
            filter: filter,
            attrs: this.v3 ? undefined : {
              filter: filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? undefined : {
              "filterchange": this.onInputChange
            }
          });
          break;
        default:
          defaultRendering =
          // @ts-ignore
          h(TextFilter_1.TextFilter, {
            filter: filter,
            attrs: this.v3 ? undefined : {
              filter: filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? undefined : {
              "filterchange": this.onInputChange
            }
          });
          break;
      }
      return kendo_vue_common_1.getTemplate.call(this, {
        h: h,
        template: filterRender,
        defaultRendering: defaultRendering,
        additionalProps: {
          filter: filter
        },
        additionalListeners: {
          filterchange: this.onInputChange
        }
      });
    };
    return h("div", {
      "class": "k-filter-toolbar"
    }, [
    // @ts-ignore function children 
    h(kendo_vue_buttons_1.Toolbar, {
      keyboardNavigation: false,
      attrs: this.v3 ? undefined : {
        keyboardNavigation: false,
        ariaLabel: filter.ariaLabel ? filter.ariaLabel : undefined
      },
      ariaLabel: filter.ariaLabel ? filter.ariaLabel : undefined
    }, this.v3 ? function () {
      return [
      // @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, {
        "class": "k-filter-field"
      }, _this.v3 ? function () {
        return [
        // @ts-ignore 
        h(kendo_vue_dropdowns_1.DropDownList, {
          "class": "k-filter-dropdown",
          dataItems: fields,
          attrs: _this.v3 ? undefined : {
            dataItems: fields,
            textField: "label",
            value: fields.find(function (f) {
              return f.name === filter.field;
            }),
            ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
          },
          textField: "label",
          value: fields.find(function (f) {
            return f.name === filter.field;
          }),
          onChange: _this.onFieldChange,
          on: _this.v3 ? undefined : {
            "change": _this.onFieldChange
          },
          ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
        })];
      } : [h(kendo_vue_dropdowns_1.DropDownList, {
        "class": "k-filter-dropdown",
        dataItems: fields,
        attrs: _this.v3 ? undefined : {
          dataItems: fields,
          textField: "label",
          value: fields.find(function (f) {
            return f.name === filter.field;
          }),
          ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
        },
        textField: "label",
        value: fields.find(function (f) {
          return f.name === filter.field;
        }),
        onChange: _this.onFieldChange,
        on: _this.v3 ? undefined : {
          "change": _this.onFieldChange
        },
        ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
      })]),
      // @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, {
        "class": "k-filter-operator"
      }, _this.v3 ? function () {
        return [
        // @ts-ignore
        h(kendo_vue_dropdowns_1.DropDownList, {
          dataItems: operators,
          attrs: _this.v3 ? undefined : {
            dataItems: operators,
            textField: "text",
            value: operators.find(function (o) {
              return o.operator === filter.operator;
            }),
            ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
          },
          textField: "text",
          value: operators.find(function (o) {
            return o.operator === filter.operator;
          }),
          onChange: _this.onOperatorChange,
          on: _this.v3 ? undefined : {
            "change": _this.onOperatorChange
          },
          ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
        })];
      } : [h(kendo_vue_dropdowns_1.DropDownList, {
        dataItems: operators,
        attrs: _this.v3 ? undefined : {
          dataItems: operators,
          textField: "text",
          value: operators.find(function (o) {
            return o.operator === filter.operator;
          }),
          ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
        },
        textField: "text",
        value: operators.find(function (o) {
          return o.operator === filter.operator;
        }),
        onChange: _this.onOperatorChange,
        on: _this.v3 ? undefined : {
          "change": _this.onOperatorChange
        },
        ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
      })]),
      // @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, {
        "class": "k-filter-value"
      }, _this.v3 ? function () {
        return [field && filterEditors.call(_this, field.filter, field.filterRender)];
      } : [field && filterEditors.call(_this, field.filter, field.filterRender)]),
      // @ts-ignore
      h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(main_1.filterClose, main_1.messages[main_1.filterClose]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(main_1.filterClose, main_1.messages[main_1.filterClose]),
          icon: "x",
          svgIcon: kendo_svg_icons_1.xIcon,
          fillMode: "flat",
          type: "button"
        },
        icon: "x",
        svgIcon: kendo_svg_icons_1.xIcon,
        fillMode: "flat",
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onFilterRemove,
        on: _this.v3 ? undefined : {
          "click": _this.onFilterRemove
        }
      })];
    } : [h(kendo_vue_buttons_1.ToolbarItem, {
      "class": "k-filter-field"
    }, _this.v3 ? function () {
      return [h(kendo_vue_dropdowns_1.DropDownList, {
        "class": "k-filter-dropdown",
        dataItems: fields,
        attrs: _this.v3 ? undefined : {
          dataItems: fields,
          textField: "label",
          value: fields.find(function (f) {
            return f.name === filter.field;
          }),
          ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
        },
        textField: "label",
        value: fields.find(function (f) {
          return f.name === filter.field;
        }),
        onChange: _this.onFieldChange,
        on: _this.v3 ? undefined : {
          "change": _this.onFieldChange
        },
        ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
      })];
    } : [h(kendo_vue_dropdowns_1.DropDownList, {
      "class": "k-filter-dropdown",
      dataItems: fields,
      attrs: _this.v3 ? undefined : {
        dataItems: fields,
        textField: "label",
        value: fields.find(function (f) {
          return f.name === filter.field;
        }),
        ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
      },
      textField: "label",
      value: fields.find(function (f) {
        return f.name === filter.field;
      }),
      onChange: _this.onFieldChange,
      on: _this.v3 ? undefined : {
        "change": _this.onFieldChange
      },
      ariaLabel: locService.toLanguageString(main_1.filterExpressionDropdownAriaLabel, main_1.messages[main_1.filterExpressionDropdownAriaLabel])
    })]), h(kendo_vue_buttons_1.ToolbarItem, {
      "class": "k-filter-operator"
    }, _this.v3 ? function () {
      return [h(kendo_vue_dropdowns_1.DropDownList, {
        dataItems: operators,
        attrs: _this.v3 ? undefined : {
          dataItems: operators,
          textField: "text",
          value: operators.find(function (o) {
            return o.operator === filter.operator;
          }),
          ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
        },
        textField: "text",
        value: operators.find(function (o) {
          return o.operator === filter.operator;
        }),
        onChange: _this.onOperatorChange,
        on: _this.v3 ? undefined : {
          "change": _this.onOperatorChange
        },
        ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
      })];
    } : [h(kendo_vue_dropdowns_1.DropDownList, {
      dataItems: operators,
      attrs: _this.v3 ? undefined : {
        dataItems: operators,
        textField: "text",
        value: operators.find(function (o) {
          return o.operator === filter.operator;
        }),
        ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
      },
      textField: "text",
      value: operators.find(function (o) {
        return o.operator === filter.operator;
      }),
      onChange: _this.onOperatorChange,
      on: _this.v3 ? undefined : {
        "change": _this.onOperatorChange
      },
      ariaLabel: locService.toLanguageString(main_1.filterExpressionOperatorDropdownAriaLabel, main_1.messages[main_1.filterExpressionOperatorDropdownAriaLabel])
    })]), h(kendo_vue_buttons_1.ToolbarItem, {
      "class": "k-filter-value"
    }, _this.v3 ? function () {
      return [field && filterEditors.call(_this, field.filter, field.filterRender)];
    } : [field && filterEditors.call(_this, field.filter, field.filterRender)]), h(kendo_vue_buttons_1.Button, {
      title: locService.toLanguageString(main_1.filterClose, main_1.messages[main_1.filterClose]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(main_1.filterClose, main_1.messages[main_1.filterClose]),
        icon: "x",
        svgIcon: kendo_svg_icons_1.xIcon,
        fillMode: "flat",
        type: "button"
      },
      icon: "x",
      svgIcon: kendo_svg_icons_1.xIcon,
      fillMode: "flat",
      type: "button",
      "class": "k-toolbar-button",
      onClick: _this.onFilterRemove,
      on: _this.v3 ? undefined : {
        "click": _this.onFilterRemove
      }
    })])]);
  },
  methods: {
    onFieldChange: function onFieldChange(event) {
      var nextFieldName = event.value.name;
      var nextField = this.$props.fields.find(function (f) {
        return f.name === nextFieldName;
      });
      var prevFilter = this.$props.filter;
      var operator = nextField && !nextField.operators.some(function (o) {
        return o.operator === prevFilter.operator;
      }) ? nextField.operators[0].operator : prevFilter.operator;
      var nextFilter = {
        field: nextFieldName,
        operator: operator
      };
      if (!(0, operators_1.unaryOperator)(operator)) {
        nextFilter.value = (0, operators_1.stringOperator)(operator) ? '' : null;
      }
      this.triggerOnFilterChange(prevFilter, nextFilter, event);
    },
    onOperatorChange: function onOperatorChange(event) {
      var operator = event.value.operator;
      var prevFilter = this.$props.filter;
      var nextFilter;
      if ((0, operators_1.unaryOperator)(operator)) {
        var value = prevFilter.value,
          prevFilterNoValue = __rest(prevFilter, ["value"]);
        nextFilter = __assign(__assign({}, prevFilterNoValue), {
          operator: operator
        });
      } else {
        nextFilter = __assign(__assign({}, prevFilter), {
          operator: operator
        });
      }
      this.triggerOnFilterChange(prevFilter, nextFilter, event);
    },
    onInputChange: function onInputChange(event) {
      var prevFilter = this.$props.filter;
      var nextFilter = event.nextFilter;
      if ((0, operators_1.unaryOperator)(nextFilter.operator)) {
        var field = this.$props.fields.find(function (f) {
          return f.name === nextFilter.field;
        });
        nextFilter = __assign(__assign({}, nextFilter), {
          operator: field && field.operators[0].operator || nextFilter.operator
        });
      }
      this.triggerOnFilterChange(prevFilter, nextFilter, event);
    },
    triggerOnFilterChange: function triggerOnFilterChange(prevFilter, nextFilter, event) {
      var changeEvent = {
        prevFilter: prevFilter,
        nextFilter: nextFilter,
        event: event.event,
        target: this
      };
      this.$emit('change', changeEvent);
    },
    onFilterRemove: function onFilterRemove(event) {
      var removeEvent = {
        filter: this.$props.filter,
        event: event.event,
        target: this
      };
      this.$emit('remove', removeEvent);
    }
  }
};
exports.ExpressionVue2 = ExpressionVue2;
/**
 * @hidden
 */
var Expression = ExpressionVue2;
exports.Expression = Expression;